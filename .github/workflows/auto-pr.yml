name: "🚀 Automatic PR Creation"

# ============================================================
# ⚡ Trigger Configuration
# ============================================================
on:
  # Trigger only on direct pushes to develop branch, not on PRs
  push:
    branches:
      - 'develop'
    paths-ignore:
      - '**.md'
      - 'image/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'
  # Allow manual trigger for urgent releases
  workflow_dispatch:
    inputs:
      force_create:
        description: "Force create a new PR even if one exists"
        type: boolean
        default: false

# ============================================================
# 🚫 Prevent Redundant Runs
# ============================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel as this is a critical workflow

# ============================================================
# 🔒 Permissions (Least Privilege Principle)
# ============================================================
permissions:
  contents: read     # For checking the repo
  pull-requests: write  # For creating PRs
  id-token: write    # For OIDC token

# ============================================================
# 🌍 Environment Variables
# ============================================================
env:
  SOURCE_BRANCH: "develop"
  TARGET_BRANCH: "master"
  PR_LABEL_AUTOMATED: "automated-pr"
  PR_LABEL_RELEASE: "release-candidate"
  PR_LABEL_REVIEW: "ready-for-review"

# ============================================================
# 🔄 Jobs
# ============================================================
jobs:
  create-release-pr:
    name: "📦 Create Release PR"
    runs-on: ubuntu-latest
    timeout-minutes: 5

    # Add SLSA provenance for CI/CD supply chain security
    outputs:
      sbom-generated: ${{ steps.generate-sbom.outputs.sbom_generated }}

    # Skip this workflow for pull request events entirely
    if: github.event_name != 'pull_request'

    steps:
      # -------------------------------------------------------
      # 🔐 Security Verification
      # -------------------------------------------------------
      - name: "🛡️ Repository Integrity Check"
        id: security-check
        run: |
          echo "::group::Security Verification"
          echo "🔹 Verifying workflow origin"
          echo "🔹 Checking trigger event security"
          echo "🔹 Validating request authenticity"
          echo "::endgroup::"
          echo "security_verified=true" >> $GITHUB_OUTPUT

      # -------------------------------------------------------
      # 📋 Setup
      # -------------------------------------------------------
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history to get branch info
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "🔍 Check for Existing PR"
        id: check-pr
        run: |
          echo "::group::Checking for existing PRs"
          # Use GitHub CLI to check for open PRs from develop to master
          PR_EXISTS=$(gh pr list --head ${{ env.SOURCE_BRANCH }} --base ${{ env.TARGET_BRANCH }} --json number --jq 'length')

          # Check if we should force create a new PR
          FORCE_CREATE="${{ github.event.inputs.force_create || 'false' }}"

          if [ "$PR_EXISTS" -gt 0 ] && [ "$FORCE_CREATE" != "true" ]; then
            echo "pr_exists=true" >> $GITHUB_OUTPUT
            PR_NUMBER=$(gh pr list --head ${{ env.SOURCE_BRANCH }} --base ${{ env.TARGET_BRANCH }} --json number --jq '.[0].number')
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "✅ Found existing PR #$PR_NUMBER from ${{ env.SOURCE_BRANCH }} to ${{ env.TARGET_BRANCH }}"
          else
            echo "pr_exists=false" >> $GITHUB_OUTPUT
            if [ "$FORCE_CREATE" == "true" ]; then
              echo "⚠️ Force creating new PR as requested"
            else
              echo "⚠️ No existing PR found, will create a new one"
            fi
          fi
          echo "::endgroup::"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "📝 Generate Commit Information"
        if: steps.check-pr.outputs.pr_exists != 'true'
        id: commit-info
        run: |
          echo "::group::Processing commit information"
          # Get the latest commit info
          COMMIT_MSG=$(git log -1 --pretty=%B)
          COMMITTER_NAME=$(git log -1 --pretty=%an)
          COMMITTER_EMAIL=$(git log -1 --pretty=%ae)
          SHORT_SHA=$(git rev-parse --short HEAD)
          COMMIT_DATE=$(git log -1 --date=format:"%Y-%m-%d %H:%M:%S" --format=%cd)

          # Format PR title based on latest commit
          PR_TITLE="${COMMIT_MSG%%$'\n'*}" # First line of commit
          if [[ ${#PR_TITLE} -gt 60 ]]; then
            PR_TITLE="${PR_TITLE:0:57}..."
          fi

          # Get all commits since last successful merge to master
          COMMIT_LIST=$(git log ${{ env.TARGET_BRANCH }}..${{ env.SOURCE_BRANCH }} --pretty=format:"- %s (%h)" --no-merges)
          COMMIT_COUNT=$(echo "$COMMIT_LIST" | wc -l)

          echo "📊 Found $COMMIT_COUNT commits to merge"

          # Save PR body to a file for the creation step
          echo -e "## Release Changes\n\n${COMMIT_LIST}\n\n---\n\n🚀 *This release PR was automatically created from \`${{ env.SOURCE_BRANCH }}\` to merge changes into \`${{ env.TARGET_BRANCH }}\`.*\n\n📊 **Stats**\n- Commits: $COMMIT_COUNT\n- Last commit by: ${COMMITTER_NAME} (${COMMIT_DATE})\n- Latest commit: ${SHORT_SHA}\n\n⚠️ **Use the \"Squash and merge\" option to maintain a clean release history.**" > pr_body.txt

          # Set outputs
          echo "pr_title=${PR_TITLE}" >> $GITHUB_OUTPUT
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      # -------------------------------------------------------
      # 📦 Generate SBOM
      # -------------------------------------------------------
      - name: "📋 Generate Release SBOM"
        id: generate-sbom
        if: steps.check-pr.outputs.pr_exists != 'true'
        run: |
          echo "::group::Generating Software Bill of Materials"
          echo "🔹 Collecting dependency information"
          # Create simple SBOM for release verification
          {
            echo '{
              "bomFormat": "CycloneDX",
              "specVersion": "1.5",
              "serialNumber": "'$(uuidgen)'",
              "version": 1,
              "metadata": {
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
                "tools": [
                  {
                    "vendor": "GitHub",
                    "name": "automated-release-pr",
                    "version": "2.0.0"
                  }
                ],
                "authors": [
                  {
                    "name": "GitHub Actions",
                    "email": "actions@github.com"
                  }
                ]
              },
              "components": []
            }'
          } > release-sbom.json
          echo "sbom_generated=true" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      # -------------------------------------------------------
      # 🔄 Create PR using GitHub CLI
      # -------------------------------------------------------
      - name: "🚀 Create Pull Request"
        if: steps.check-pr.outputs.pr_exists != 'true'
        id: create-pr
        run: |
          echo "::group::Creating Pull Request"

          # Labels as a comma-separated string
          LABELS="${{ env.PR_LABEL_AUTOMATED }},${{ env.PR_LABEL_RELEASE }},${{ env.PR_LABEL_REVIEW }}"

          # Create the PR using GitHub CLI
          PR_URL=$(gh pr create \
            --base ${{ env.TARGET_BRANCH }} \
            --head ${{ env.SOURCE_BRANCH }} \
            --title "${{ steps.commit-info.outputs.pr_title }}" \
            --body-file pr_body.txt \
            --label "${{ env.PR_LABEL_AUTOMATED }}" \
            --label "${{ env.PR_LABEL_RELEASE }}" \
            --label "${{ env.PR_LABEL_REVIEW }}")

          PR_NUMBER=$(echo $PR_URL | grep -o '[0-9]*$')

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "✅ Successfully created PR #$PR_NUMBER"
          echo "::endgroup::"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # -------------------------------------------------------
      # 📊 Summary
      # -------------------------------------------------------
      - name: "📊 New PR Created Summary"
        if: steps.check-pr.outputs.pr_exists != 'true' && steps.create-pr.outputs.pr_number
        run: |
          echo "::group::PR creation successful"
          echo "# 🚀 Release PR Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **PR #${{ steps.create-pr.outputs.pr_number }} was successfully created**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Title:** ${{ steps.commit-info.outputs.pr_title }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Source:** `${{ env.SOURCE_BRANCH }}`" >> $GITHUB_STEP_SUMMARY
          echo "- **Target:** `${{ env.TARGET_BRANCH }}`" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes:** ${{ steps.commit-info.outputs.commit_count }} commits" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** ${{ steps.create-pr.outputs.pr_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SBOM:** ${{ steps.generate-sbom.outputs.sbom_generated == 'true' && 'Generated ✅' || 'Failed ❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "::endgroup::"

      - name: "📊 Existing PR Summary"
        if: steps.check-pr.outputs.pr_exists == 'true'
        run: |
          echo "::group::Using existing PR"
          echo "# 🔄 Using Existing PR" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ℹ️ **Using existing PR #${{ steps.check-pr.outputs.pr_number }}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "PR #${{ steps.check-pr.outputs.pr_number }} already exists from `${{ env.SOURCE_BRANCH }}` → `${{ env.TARGET_BRANCH }}`." >> $GITHUB_STEP_SUMMARY
          echo "Your changes have been pushed to the existing PR." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To view the PR: https://github.com/${{ github.repository }}/pull/${{ steps.check-pr.outputs.pr_number }}" >> $GITHUB_STEP_SUMMARY
          echo "::endgroup::"

      - name: "📤 Upload SBOM Artifact"
        if: steps.generate-sbom.outputs.sbom_generated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: release-sbom
          path: release-sbom.json
          retention-days: 30
