# ============================================================
# üìã Profile Weather View: Changelog Generation Workflow
# ============================================================

name: "üìã Changelog Generation"

# ============================================================
# üöÄ Workflow triggers for automatic and manual execution
# ============================================================

on:
  push:
    branches:
      - master                                                   # Trigger on push to the master branch
    paths:
      - 'src/**'                                                 # Trigger on changes in source code
      - 'package.json'                                           # Trigger on changes to dependencies
      - 'release-please-config.json'                             # Trigger on changes to release configuration
      - '.release-please-manifest.json'                          # Trigger on changes to version manifest

  workflow_dispatch:
    inputs:
      version:
        description: "Specify version for changelog (optional)"
        required: false
        type: string
      force:
        description: "Force full changelog regeneration"
        type: boolean
        default: false
      debug:
        description: "Enable verbose logging"
        type: boolean
        default: false

# ============================================================
# üîí Prevent redundant executions (Ensures single execution)
# ============================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# ============================================================
# üîí Workflow permissions (Least privilege principle)
# ============================================================

permissions:
  contents: write                                                # Allow writing changes to the changelog file
  pull-requests: write                                           # Allow updates to pull requests if needed

# ============================================================
# üåç Global environment variables
# ============================================================

env:
  BUN_VERSION: "latest"                                          # Using specific version instead of wildcard for stability
  CHANGELOG_PATH: "CHANGELOG.md"                                 # Default path to the changelog file
  TIMEZONE: "UTC"                                                # Default timezone for logging
  FORCE_REGENERATE: ${{ github.event.inputs.force == true }}    # Flag for full regeneration
  DEBUG_MODE: ${{ github.event.inputs.debug == true }}          # Flag to enable debug mode
  NODE_OPTIONS: "--max-old-space-size=4096"                      # Prevents memory issues with large repositories

jobs:
  # ============================================================
  # üîç Job 1: Preflight Validation (checks environment readiness)
  # ============================================================

  validate-prerequisites:
    name: "üîç Preflight Validation"
    runs-on: ubuntu-latest
    outputs:
      should_proceed: ${{ steps.check-requirements.outputs.should_proceed }}
      repo_state: ${{ steps.repo-state.outputs.state }}

    steps:
      # Step to checkout the repository and fetch full history for changelog
      - name: "‚¨áÔ∏è Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch complete history for accurate changelog generation

      # Step to log the execution context for debugging and tracking purposes
      - name: "üîç Log Execution Context"
        run: |
          echo "::group::Execution Context"
          echo "üîπ Run ID: ${{ github.run_id }}"
          echo "üîπ Workflow: ${{ github.workflow }}"
          echo "üîπ Repository: ${{ github.repository }}"
          echo "üîπ Trigger: ${{ github.event_name }}"
          echo "üîπ Debug Mode: ${{ env.DEBUG_MODE == 'true' && 'Enabled' || 'Disabled' }}"
          echo "::endgroup::"

      # Step to check for required files (critical for changelog generation)
      - name: "üìë Check Required Files"
        id: check-requirements
        run: |
          REQUIRED_FILES=( ".release-please-manifest.json" "release-please-config.json" "package.json" )
          MISSING_FILES=()
          for file in "${REQUIRED_FILES[@]}"; do
            if [[ ! -f "$file" ]]; then
              MISSING_FILES+=("$file")
            fi
          done
          if [[ ${#MISSING_FILES[@]} -gt 0 ]]; then
            echo "::error::Missing critical files: ${MISSING_FILES[*]}"
            echo "should_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "::notice::All prerequisite files are present"
          echo "should_proceed=true" >> $GITHUB_OUTPUT

      # Step to evaluate the repository state (based on commit history, branch count, and file count)
      - name: "üîÑ Evaluate Repository State"
        id: repo-state
        if: steps.check-requirements.outputs.should_proceed == 'true'
        run: |
          COMMIT_COUNT=$(git rev-list --count HEAD)
          BRANCH_COUNT=$(git branch -r | wc -l)
          FILE_COUNT=$(git ls-files | wc -l)

          # Combined complexity assessment
          if [[ $COMMIT_COUNT -lt 5 ]]; then
            echo "state=minimal" >> $GITHUB_OUTPUT
            echo "::notice::Repository has minimal history ($COMMIT_COUNT commits)"
          elif [[ $BRANCH_COUNT -gt 10 || $FILE_COUNT -gt 1000 ]]; then
            echo "state=complex" >> $GITHUB_OUTPUT
            echo "::notice::Repository has complex structure ($BRANCH_COUNT branches, $FILE_COUNT files)"
          else
            echo "state=standard" >> $GITHUB_OUTPUT
            echo "::notice::Repository has standard structure"
          fi

  # ============================================================
  # üöÄ Job 2: Changelog Generation
  # ============================================================

  generate-changelog:
    name: "üöÄ Changelog Generation"
    needs: validate-prerequisites
    if: needs.validate-prerequisites.outputs.should_proceed == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      # Step to record the start time for measuring duration
      - name: "‚è±Ô∏è Record Start Time"
        id: start-timer
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

      # Step to checkout the repository again for the changelog generation
      - name: "‚¨áÔ∏è Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step to set up Bun runtime for executing changelog generation scripts
      - name: "üß∞ Setup Bun Runtime"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      # Step to cache Bun dependencies to speed up workflow execution
      - name: "üíæ Cache Bun Dependencies"
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: ${{ runner.os }}-bun-

      # Step to verify that the Bun runtime is installed and configured correctly
      - name: "üîç Verify Bun Installation"
        run: |
          echo "::group::Runtime Verification"
          RAW_VERSION=$(bun --version)
          BUN_VERSION=$(echo "$RAW_VERSION" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
          echo "üîπ Raw Bun Version: $RAW_VERSION"
          echo "üîπ Parsed Bun Version: $BUN_VERSION"

          # Validate version format with improved error message
          if [[ ! "$BUN_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid Bun version format: $RAW_VERSION. Expected semver format (e.g., 1.0.0)."
            exit 1
          fi

          # Parse version parts and check minimum required version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BUN_VERSION"
          if (( MAJOR < 1 )); then
            echo "::warning::Bun version is below recommended minimum (1.0.0). Current: $BUN_VERSION"
          else
            echo "üîπ Bun version $BUN_VERSION meets minimum requirements"
          fi
          echo "::endgroup::"

      # Step to resolve the version from the manual input or release manifest
      - name: "üìã Resolve Version"
        id: version-validation
        run: |
          if [[ -n "${{ github.event.inputs.version }}" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            SOURCE="manual input"
          else
            VERSION=$(jq -r '.codebase' .release-please-manifest.json)
            SOURCE="release manifest"
          fi
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.]+)?$ ]]; then
            echo "::error::Invalid semantic version format: $VERSION"
            exit 1
          fi
          echo "::notice::Detected Version: $VERSION (Source: $SOURCE)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Step to prepare the environment for changelog generation (install dependencies)
      - name: "üì¶ Prepare Environment"
        run: |
          echo "::group::Environment Preparation"
          bun add --exact @commitlint/parse --no-save
          mkdir -p src/docs/changelog
          if [[ ! -f "${{ env.CHANGELOG_PATH }}" ]]; then
            echo -e "# Changelog\n\nAll notable changes to this project will be documented in this file." > "${{ env.CHANGELOG_PATH }}"
          fi
          echo "::endgroup::"

      # Step to generate the changelog based on the version and repo state
      - name: "üîÑ Generate Changelog"
        id: generate
        run: |
          echo "::group::Changelog Generation Process"
          TIMESTAMP=$(date +%s)  # Initialize TIMESTAMP here for monitoring
          OUTPUT_LOG="/tmp/changelog-generator-$TIMESTAMP.log"
          DEBUG_FLAG=""
          if [[ "${{ env.DEBUG_MODE }}" == "true" ]]; then DEBUG_FLAG="--debug"; fi
          FORCE_FLAG=""
          if [[ "${{ env.FORCE_REGENERATE }}" == "true" ]]; then FORCE_FLAG="--force"; fi
          REPO_STATE="${{ needs.validate-prerequisites.outputs.repo_state }}"
          echo "üîπ Repository state: $REPO_STATE"

          # Set timeout monitoring
          MAX_DURATION=540  # 9 minutes (slightly under the 10-minute job timeout)
          (
            # Background process to monitor execution time
            while true; do
              sleep 30
              CURRENT=$(date +%s)
              ELAPSED=$((CURRENT - TIMESTAMP))
              if [[ $ELAPSED -gt $MAX_DURATION ]]; then
                echo "::warning::Changelog generation approaching timeout limit ($ELAPSED seconds). Process may be terminated."
                break
              elif [[ $ELAPSED -gt 300 ]]; then
                # After 5 minutes, show a warning
                echo "::warning::Changelog generation running for $ELAPSED seconds. This is longer than expected."
                break
              fi
            done
          ) &
          MONITOR_PID=$!

          # Run the actual changelog generation
          bun run src/docs/changelog/changelog-generator.ts \
            "${{ steps.version-validation.outputs.version }}" \
            $FORCE_FLAG $DEBUG_FLAG \
            --repo-state=$REPO_STATE \
            2>&1 | tee $OUTPUT_LOG
          GENERATION_STATUS=$?

          # Kill the monitoring process
          kill $MONITOR_PID 2>/dev/null || true

          # Safely check for successful commit parsing count and status output
          CHANGE_COUNT=0
          GEN_STATUS="failed"

          if [[ -f "$OUTPUT_LOG" ]]; then
            CHANGE_COUNT=$(grep -c "Successfully parsed commit:" $OUTPUT_LOG || echo "0")
            # Check for success status from the updated generator script
            if grep -q "status=success" $OUTPUT_LOG; then
              GEN_STATUS="success"
            fi
          fi

          echo "::endgroup::"
          if [[ $GENERATION_STATUS -ne 0 ]]; then
            echo "::error::Changelog generation failed with exit code: $GENERATION_STATUS"
            exit $GENERATION_STATUS
          fi

          if [[ "$GEN_STATUS" != "success" ]]; then
            echo "::warning::Changelog generation did not report explicit success"
          fi

          echo "::notice::Successfully processed $CHANGE_COUNT commit entries"
          echo "change_count=$CHANGE_COUNT" >> $GITHUB_OUTPUT
          echo "gen_status=$GEN_STATUS" >> $GITHUB_OUTPUT

      # Step to commit and push the changelog updates if any changes were detected
      - name: "üì§ Commit Changelog Updates"
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "::group::Git Operations"
          # Set up git configuration with better traceability
          git config user.name 'github-actions[bot]'
          git config user.email '${{ github.actor }}@users.noreply.github.com'

          if [[ -n "$(git status --porcelain ${{ env.CHANGELOG_PATH }})" ]]; then
            git add ${{ env.CHANGELOG_PATH }}

            # Build commit message with proper suffixes
            MSG_SUFFIX=""
            if [[ "${{ env.FORCE_REGENERATE }}" == "true" ]]; then MSG_SUFFIX="$MSG_SUFFIX (full regeneration)"; fi
            if [[ "${{ steps.version-validation.outputs.source }}" == "manual input" ]]; then MSG_SUFFIX="$MSG_SUFFIX [manual]"; fi
            COMMIT_MSG="docs(changelog): update for v${{ steps.version-validation.outputs.version }}$MSG_SUFFIX"

            git commit -m "$COMMIT_MSG"
            echo "commit_message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT  # Capture the commit message

            if git push; then
              echo "::notice::Successfully pushed changelog updates"
              echo "changes_committed=true" >> $GITHUB_OUTPUT
            else
              echo "::error::Push failed"
              exit 1
            fi
          else
            echo "üîπ No changelog updates detected"
            echo "changes_committed=false" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"

      # Step to generate a final report on the changelog generation process
      - name: "üìä Generation Report"
        run: |
          END_TIME=$(date +%s)
          TIMESTAMP=$(date +%s)  # Initialize TIMESTAMP for elapsed time calculation
          START_TIME=${{ steps.start-timer.outputs.start_time }}
          DURATION=$((END_TIME - START_TIME))

          echo "::notice::Changelog Generation Duration: $DURATION seconds"
          CHANGES_COMMITTED=${{ steps.commit.outputs.changes_committed }}
          if [[ "$CHANGES_COMMITTED" == "true" ]]; then
            echo "::notice::Changelog updates were successfully committed!"
          else
            echo "::warning::No changes to commit for the changelog."
          fi

          if [[ "$CHANGES_COMMITTED" == "true" ]]; then
            COMMIT_MSG="${{ steps.commit.outputs.commit_message }}"
            echo "::notice::Commit Message: $COMMIT_MSG"
          fi

          if [[ $DURATION -gt 180 ]]; then
            echo "::warning::Changelog generation took more than 3 minutes ($DURATION seconds). Please review the logs for any issues."
          else
            echo "::notice::Changelog generation completed successfully within $DURATION seconds."
          fi

      # Step to save logs as artifacts for debugging
      - name: "üìÅ Save Logs as Artifacts"
        if: always() && env.DEBUG_MODE == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: changelog-generation-logs-${{ github.run_id }}
          path: /tmp/changelog-generator-*.log
          retention-days: 7
          if-no-files-found: ignore
          compression-level: 9  # Maximum compression
