name: Dependabot Auto-Approve

on:
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize

jobs:
  auto-approve:
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' && contains(github.event.pull_request.labels.*.name, 'automerge') && github.event.pull_request.head.repo.full_name == github.repository }}
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: actions/github-script@v7
        with:
          script: |
            const prUrl = context.payload.pull_request.html_url
            const prNumber = context.payload.pull_request.number
            const prTitle = context.payload.pull_request.title
            
            if (prTitle.startsWith('build(deps)') || prTitle.startsWith('build(deps-dev)')) {
              const updateType = prTitle.includes('from') && prTitle.includes('to') ? 
                (prTitle.match(/\d+\.\d+\.\d+/g) || []).length >= 2 ? 
                  (versions => {
                    const [oldVer, newVer] = versions.map(v => v.split('.').map(Number))
                    return oldVer[0] !== newVer[0] ? 'major' : 
                           oldVer[1] !== newVer[1] ? 'minor' : 'patch'
                  })(prTitle.match(/\d+\.\d+\.\d+/g)) : 'unknown' : 'unknown'
            
              core.setOutput('update-type', updateType)
              core.setOutput('pr-url', prUrl)
              core.setOutput('pr-number', prNumber)
            }

      - name: Log PR Approval Attempt
        run: |
          echo "Attempting to auto-approve PR: ${{ steps.metadata.outputs.pr-url }}"

      - name: Approve PR
        if: ${{ steps.metadata.outputs.update-type != 'major' || contains(github.event.pull_request.title, 'typescript') || contains(github.event.pull_request.title, 'eslint') || contains(github.event.pull_request.title, 'vitest') || contains(github.event.pull_request.title, 'zod') || contains(github.event.pull_request.title, '@js-temporal') }}
        run: |
          gh pr review --approve "$PR_URL" || echo "Failed to approve PR $PR_URL"
        env:
          PR_URL: ${{ steps.metadata.outputs.pr-url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
