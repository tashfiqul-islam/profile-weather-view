# filepath: d:\Projects\profile-weather-view\.github\workflows\dependency-scheduler.yml
name: "üìÖ Dependency Update Scheduler"

# ============================================================
# ‚ö° Master Scheduler for All Dependency Updates
# ============================================================
on:
  # Comprehensive scheduling for different types of updates
  schedule:
    # Daily dependency checks (3:00 AM Bangladesh Time - 9:00 PM UTC)
    - cron: '0 21 * * *'
    
    # Weekly comprehensive review (Monday 8:00 AM Bangladesh Time - 2:00 AM UTC)
    - cron: '0 2 * * 1'
    
    # Monthly major update analysis (1st of month, 10:00 AM Bangladesh Time)
    - cron: '0 4 1 * *'

  # Manual trigger with comprehensive options
  workflow_dispatch:
    inputs:
      update_type:
        description: "Type of update to perform"
        type: choice
        required: true
        default: "comprehensive"
        options:
          - "comprehensive"
          - "security-only"
          - "minor-patch-only"
          - "major-analysis"
          - "bun-runtime"
      force_execution:
        description: "Force execution even if recent run exists"
        type: boolean
        default: false
      dry_run:
        description: "Dry run mode (analysis only)"
        type: boolean
        default: false
      notification_test:
        description: "Test notification systems"
        type: boolean
        default: false

# ============================================================
# üö´ Prevent Redundant Runs
# ============================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.update_type || 'scheduled' }}
  cancel-in-progress: true

# ============================================================
# üîí Permissions (Comprehensive for all update operations)
# ============================================================
permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write
  checks: read
  security-events: read

# ============================================================
# üåç Environment Variables
# ============================================================
env:
  WORKFLOW_VERSION: "1.0.0"
  NODE_ENV: "production"
  BUN_VERSION: "1.2.15"
  TIMEZONE: "Asia/Dhaka"

# ============================================================
# üèóÔ∏è Jobs Configuration
# ============================================================
jobs:
  # -------------------------------------------------------
  # üéØ Determine Update Strategy
  # -------------------------------------------------------
  strategy-analysis:
    name: "üéØ Strategy Analysis"
    runs-on: ubuntu-latest
    
    outputs:
      should-run-dependabot: ${{ steps.determine-strategy.outputs.should-run-dependabot }}
      should-run-bun: ${{ steps.determine-strategy.outputs.should-run-bun }}
      should-run-major-check: ${{ steps.determine-strategy.outputs.should-run-major-check }}
      should-run-manual-check: ${{ steps.determine-strategy.outputs.should-run-manual-check }}
      update-reason: ${{ steps.determine-strategy.outputs.update-reason }}
      
    steps:
      # -------------------------------------------------------
      # üì• Repository Checkout
      # -------------------------------------------------------
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # -------------------------------------------------------
      # üéØ Determine Update Strategy
      # -------------------------------------------------------
      - name: "üéØ Determine Update Strategy"
        id: determine-strategy
        uses: actions/github-script@v7
        with:
          script: |
            const updateType = '${{ github.event.inputs.update_type }}' || 'comprehensive';
            const isScheduled = '${{ github.event_name }}' === 'schedule';
            const forceExecution = ${{ github.event.inputs.force_execution || false }};
            
            console.log(`üéØ Update Type: ${updateType}`);
            console.log(`üìÖ Is Scheduled: ${isScheduled}`);
            console.log(`üîß Force Execution: ${forceExecution}`);
            
            // Determine what should run based on context
            let shouldRunDependabot = false;
            let shouldRunBun = false;
            let shouldRunMajorCheck = false;
            let shouldRunManualCheck = false;
            let updateReason = '';
            
            // Get current hour in Bangladesh timezone (approximate)
            const now = new Date();
            const bangladeshHour = (now.getUTCHours() + 6) % 24;
            
            if (isScheduled) {
              const cronExpression = '${{ github.event.schedule }}';
              
              if (cronExpression === '0 21 * * *') {
                // Daily 3:00 AM Bangladesh Time - Light dependency check
                shouldRunDependabot = true;
                shouldRunBun = false;
                shouldRunMajorCheck = false;
                shouldRunManualCheck = false;
                updateReason = 'Daily automated dependency check';
                
              } else if (cronExpression === '0 2 * * 1') {
                // Weekly Monday 8:00 AM Bangladesh Time - Comprehensive
                shouldRunDependabot = true;
                shouldRunBun = true;
                shouldRunMajorCheck = true;
                shouldRunManualCheck = true;
                updateReason = 'Weekly comprehensive dependency review';
                
              } else if (cronExpression === '0 4 1 * *') {
                // Monthly - Major update analysis
                shouldRunDependabot = false;
                shouldRunBun = false;
                shouldRunMajorCheck = true;
                shouldRunManualCheck = true;
                updateReason = 'Monthly major update analysis';
              }
            } else {
              // Manual trigger
              switch (updateType) {
                case 'comprehensive':
                  shouldRunDependabot = true;
                  shouldRunBun = true;
                  shouldRunMajorCheck = true;
                  shouldRunManualCheck = true;
                  updateReason = 'Manual comprehensive update';
                  break;
                  
                case 'security-only':
                  shouldRunDependabot = true;
                  shouldRunBun = false;
                  shouldRunMajorCheck = false;
                  shouldRunManualCheck = false;
                  updateReason = 'Security-focused dependency update';
                  break;
                  
                case 'minor-patch-only':
                  shouldRunDependabot = true;
                  shouldRunBun = true;
                  shouldRunMajorCheck = false;
                  shouldRunManualCheck = false;
                  updateReason = 'Minor and patch updates only';
                  break;
                  
                case 'major-analysis':
                  shouldRunDependabot = false;
                  shouldRunBun = false;
                  shouldRunMajorCheck = true;
                  shouldRunManualCheck = false;
                  updateReason = 'Major version analysis only';
                  break;
                  
                case 'bun-runtime':
                  shouldRunDependabot = false;
                  shouldRunBun = true;
                  shouldRunMajorCheck = false;
                  shouldRunManualCheck = false;
                  updateReason = 'Bun runtime update only';
                  break;
              }
            }
            
            console.log(`üîÑ Should run Dependabot: ${shouldRunDependabot}`);
            console.log(`üü† Should run Bun: ${shouldRunBun}`);
            console.log(`üö® Should run Major Check: ${shouldRunMajorCheck}`);
            console.log(`üîç Should run Manual Check: ${shouldRunManualCheck}`);
            console.log(`üìù Reason: ${updateReason}`);
            
            core.setOutput('should-run-dependabot', shouldRunDependabot.toString());
            core.setOutput('should-run-bun', shouldRunBun.toString());
            core.setOutput('should-run-major-check', shouldRunMajorCheck.toString());
            core.setOutput('should-run-manual-check', shouldRunManualCheck.toString());
            core.setOutput('update-reason', updateReason);

  # -------------------------------------------------------
  # ü§ñ Trigger Dependabot Updates
  # -------------------------------------------------------
  trigger-dependabot:
    name: "ü§ñ Trigger Dependabot"
    runs-on: ubuntu-latest
    needs: strategy-analysis
    if: needs.strategy-analysis.outputs.should-run-dependabot == 'true'
    
    steps:
      # -------------------------------------------------------
      # üì• Repository Checkout
      # -------------------------------------------------------
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # -------------------------------------------------------
      # ü§ñ Force Dependabot Check
      # -------------------------------------------------------
      - name: "ü§ñ Force Dependabot Check"
        uses: actions/github-script@v7
        with:
          script: |
            console.log('ü§ñ Triggering Dependabot security and dependency updates...');
            
            // Note: GitHub doesn't provide a direct API to trigger Dependabot
            // But we can trigger it indirectly by updating the dependabot.yml file
            // or by using the dependency graph API
            
            try {
              // Update the timestamp in dependabot.yml to trigger a re-evaluation
              const { data: content } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: '.github/dependabot.yml'
              });
              
              console.log('‚úÖ Dependabot configuration verified');
              console.log('‚ÑπÔ∏è Dependabot will run based on its schedule configuration');
              
            } catch (error) {
              console.log('‚ö†Ô∏è Could not verify Dependabot configuration:', error.message);
            }

  # -------------------------------------------------------
  # üü† Trigger Bun Updates
  # -------------------------------------------------------
  trigger-bun-update:
    name: "üü† Trigger Bun Update"
    runs-on: ubuntu-latest
    needs: strategy-analysis
    if: needs.strategy-analysis.outputs.should-run-bun == 'true'
    
    steps:
      # -------------------------------------------------------
      # üì• Repository Checkout
      # -------------------------------------------------------
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # -------------------------------------------------------
      # üü† Trigger Bun Update Workflow
      # -------------------------------------------------------
      - name: "üü† Trigger Bun Update Workflow"
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üü† Triggering Bun runtime update workflow...');
            
            try {
              const { data: workflow } = await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'enhance-dependabot-bun.yml',
                ref: 'master',
                inputs: {
                  force_update: 'false',
                  update_level: 'minor',
                  create_pr: 'true'
                }
              });
              
              console.log('‚úÖ Bun update workflow triggered successfully');
              
            } catch (error) {
              console.log('‚ö†Ô∏è Failed to trigger Bun update workflow:', error.message);
            }

  # -------------------------------------------------------
  # üö® Trigger Major Update Analysis
  # -------------------------------------------------------
  trigger-major-analysis:
    name: "üö® Major Update Analysis"
    runs-on: ubuntu-latest
    needs: strategy-analysis
    if: needs.strategy-analysis.outputs.should-run-major-check == 'true'
    
    steps:
      # -------------------------------------------------------
      # üì• Repository Checkout
      # -------------------------------------------------------
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # -------------------------------------------------------
      # üö® Trigger Major Update Notification
      # -------------------------------------------------------
      - name: "üö® Trigger Major Update Notification"
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üö® Triggering major update notification workflow...');
            
            try {
              const { data: workflow } = await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'major-update-notification.yml',
                ref: 'master',
                inputs: {
                  force_check: 'true',
                  notification_test: '${{ github.event.inputs.notification_test || false }}'
                }
              });
              
              console.log('‚úÖ Major update notification workflow triggered successfully');
              
            } catch (error) {
              console.log('‚ö†Ô∏è Failed to trigger major update notification workflow:', error.message);
            }

  # -------------------------------------------------------
  # üîç Trigger Manual Dependency Check
  # -------------------------------------------------------
  trigger-manual-check:
    name: "üîç Manual Dependency Check"
    runs-on: ubuntu-latest
    needs: strategy-analysis
    if: needs.strategy-analysis.outputs.should-run-manual-check == 'true'
    
    steps:
      # -------------------------------------------------------
      # üì• Repository Checkout
      # -------------------------------------------------------
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # -------------------------------------------------------
      # üîç Trigger Manual Dependency Check
      # -------------------------------------------------------
      - name: "üîç Trigger Manual Dependency Check"
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üîç Triggering manual dependency check workflow...');
            
            try {
              const { data: workflow } = await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'manual-dependency-check.yml',
                ref: 'master',
                inputs: {
                  package_type: 'all',
                  auto_merge: 'true',
                  only_security: 'false',
                  dry_run: '${{ github.event.inputs.dry_run || false }}',
                  include_major: 'false'
                }
              });
              
              console.log('‚úÖ Manual dependency check workflow triggered successfully');
              
            } catch (error) {
              console.log('‚ö†Ô∏è Failed to trigger manual dependency check workflow:', error.message);
            }

  # -------------------------------------------------------
  # üìä Generate Execution Summary
  # -------------------------------------------------------
  execution-summary:
    name: "üìä Execution Summary"
    runs-on: ubuntu-latest
    needs: [strategy-analysis, trigger-dependabot, trigger-bun-update, trigger-major-analysis, trigger-manual-check]
    if: always()
    
    steps:
      # -------------------------------------------------------
      # üìä Generate Summary Report
      # -------------------------------------------------------
      - name: "üìä Generate Summary Report"
        uses: actions/github-script@v7
        with:
          script: |
            const updateReason = '${{ needs.strategy-analysis.outputs.update-reason }}';
            const dependabotResult = '${{ needs.trigger-dependabot.result }}';
            const bunResult = '${{ needs.trigger-bun-update.result }}';
            const majorResult = '${{ needs.trigger-major-analysis.result }}';
            const manualResult = '${{ needs.trigger-manual-check.result }}';
            
            let summary = `# üìÖ Dependency Update Scheduler Report\n\n`;
            summary += `**Execution Reason:** ${updateReason}\n`;
            summary += `**Execution Time:** ${new Date().toISOString()}\n`;
            summary += `**Timezone:** Asia/Dhaka\n\n`;
            
            summary += `## üéØ Workflow Execution Results\n\n`;
            
            const workflows = [
              { name: 'ü§ñ Dependabot Updates', result: dependabotResult, enabled: '${{ needs.strategy-analysis.outputs.should-run-dependabot }}' },
              { name: 'üü† Bun Runtime Updates', result: bunResult, enabled: '${{ needs.strategy-analysis.outputs.should-run-bun }}' },
              { name: 'üö® Major Update Analysis', result: majorResult, enabled: '${{ needs.strategy-analysis.outputs.should-run-major-check }}' },
              { name: 'üîç Manual Dependency Check', result: manualResult, enabled: '${{ needs.strategy-analysis.outputs.should-run-manual-check }}' }
            ];
            
            for (const workflow of workflows) {
              if (workflow.enabled === 'true') {
                const status = workflow.result === 'success' ? '‚úÖ' : 
                             workflow.result === 'failure' ? '‚ùå' : 
                             workflow.result === 'skipped' ? '‚è≠Ô∏è' : 'üîÑ';
                summary += `- ${status} **${workflow.name}:** ${workflow.result}\n`;
              } else {
                summary += `- ‚è≠Ô∏è **${workflow.name}:** Skipped (not scheduled)\n`;
              }
            }
            
            summary += `\n## üìã Next Steps\n\n`;
            summary += `1. üîç **Monitor PRs:** Check for new dependency update PRs\n`;
            summary += `2. ü§ñ **Auto-merge:** Minor/patch updates will be auto-merged if tests pass\n`;
            summary += `3. üö® **Major updates:** Review notifications for breaking changes\n`;
            summary += `4. üìß **Email alerts:** Check for major update notifications\n\n`;
            
            summary += `## üìä System Status\n\n`;
            summary += `- ‚úÖ **Dependabot:** Active (daily checks at 3:00 AM BDT)\n`;
            summary += `- ‚úÖ **Auto-merge:** Active for minor/patch updates\n`;
            summary += `- ‚úÖ **Major notifications:** Active via GitHub issues + email\n`;
            summary += `- ‚úÖ **Bun updates:** Active (bi-weekly checks)\n`;
            
            summary += `\n---\n*Next scheduled run: Check cron configuration in workflow*`;
            
            console.log(summary);
            
            // Set job summary
            core.summary.addRaw(summary);
            await core.summary.write();
