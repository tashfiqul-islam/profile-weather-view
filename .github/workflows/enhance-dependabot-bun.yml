name: "🔄 Automatic Bun Updates"

# ============================================================
# ⚡ Trigger Configuration (Run on schedule)
# ============================================================
on:
  # Run on a schedule to check for updates automatically
  schedule:
    # Run every Tuesday and Friday at 2:00 AM Bangladesh Time (8:00 PM UTC Monday/Thursday)
    - cron: '0 20 * * 1,4'

  # Also allow manual triggering for testing/immediate updates
  workflow_dispatch:
    inputs:
      force_update:
        description: "Force update even if only patch/minor version"
        type: boolean
        default: false
      update_level:
        description: "Update level to allow"
        type: choice
        default: "minor"
        options:
          - patch
          - minor
          - major
      create_pr:
        description: "Create PR for updates (vs direct push)"
        type: boolean
        default: true

# ============================================================
# 🚫 Prevent Redundant Runs
# ============================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# ============================================================
# 🔒 Permissions (Least Privilege Principle)
# ============================================================
permissions:
  contents: write       # For repository updates
  pull-requests: write  # For PR creation
  id-token: write      # For provenance generation
  actions: read        # For workflow access
  security-events: write # For security scanning

# ============================================================
# 🌍 Environment Variables
# ============================================================
env:
  WORKFLOW_VERSION: "3.0.0"  # Updated version with fixes
  UPDATE_BRANCH: "auto-update-bun"
  NODE_ENV: "production"
  CACHE_KEY_PREFIX: "v9-profile-weather"

# ============================================================
# 🔄 Jobs
# ============================================================
jobs:
  update-bun-version:
    name: "🔄 Check & Update Bun"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    # Add SLSA provenance for CI/CD supply chain security
    outputs:
      workflow-provenance: ${{ steps.provenance.outputs.provenance-id }}
      update-applied: ${{ steps.check-bun-update.outputs.is_bun_update }}
      old-version: ${{ steps.check-bun-update.outputs.old_bun_version }}
      new-version: ${{ steps.check-bun-update.outputs.new_bun_version }}

    steps:
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 1
          persist-credentials: true

      # -------------------------------------------------------
      # 🔐 Setup Git Configuration (Enhanced Security)
      # -------------------------------------------------------
      - name: "🔐 Setup Git Configuration"
        id: git-setup
        run: |
          echo "::group::Git Setup"
          
          # Configure Git for automated commits with enhanced security
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global init.defaultBranch main
          git config --global pull.rebase false
          git config --global core.autocrlf false
          
          # Security: Disable potentially dangerous Git operations
          git config --global protocol.file.allow never
          git config --global protocol.ftp.allow never
          git config --global protocol.ftps.allow never
          
          echo "✅ Git configured securely for automated commits"
          echo "::endgroup::"

      - name: "🔒 Security Validation - Repository State"
        run: |
          echo "::group::Security Validation"
          
          # Verify we're in the expected repository
          REPO_NAME="${{ github.repository }}"
          echo "Operating on repository: $REPO_NAME"
          
          # Check for required files
          if [[ ! -f "package.json" ]]; then
            echo "::error::package.json not found - invalid repository state"
            exit 1
          fi
          
          # Verify package.json is valid JSON
          if ! jq empty package.json 2>/dev/null; then
            echo "::error::package.json is not valid JSON"
            exit 1
          fi
          
          # Check repository permissions
          if [[ "${{ github.actor }}" != "github-actions[bot]" && "${{ github.event_name }}" == "schedule" ]]; then
            echo "::warning::Scheduled run should only be triggered by GitHub Actions"
          fi
          
          echo "✅ Security validation passed"
          echo "::endgroup::"

      - name: "🔍 Check for Bun Update"
        id: check-bun-update
        run: |
          echo "::group::Checking for Bun updates"

          # Get current bun version from package.json with enhanced error handling
          if [[ -f "package.json" ]]; then
            CURRENT_BUN_VERSION=$(jq -r '.packageManager // empty' package.json | grep -o 'bun@[0-9][0-9.]*' | cut -d@ -f2 || echo "")
            
            if [[ -z "$CURRENT_BUN_VERSION" ]]; then
              echo "::error::Could not extract Bun version from package.json packageManager field"
              echo "Expected format: \"packageManager\": \"bun@x.y.z\""
              exit 1
            fi
          else
            echo "::error::package.json not found"
            exit 1
          fi

          echo "Current Bun Version: $CURRENT_BUN_VERSION"

          # Get latest Bun version from npm registry with retry logic
          MAX_RETRIES=3
          RETRY_COUNT=0
          LATEST_BUN_VERSION=""

          while [[ $RETRY_COUNT -lt $MAX_RETRIES && -z "$LATEST_BUN_VERSION" ]]; do
            echo "Attempt $((RETRY_COUNT + 1)) to fetch latest Bun version..."
            
            LATEST_BUN_VERSION=$(curl -s --max-time 30 --retry 2 https://registry.npmjs.org/bun/latest | jq -r '.version // empty' 2>/dev/null || echo "")
            
            if [[ -z "$LATEST_BUN_VERSION" ]]; then
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; then
                echo "Failed to fetch version, retrying in 5 seconds..."
                sleep 5
              fi
            fi
          done

          if [[ -z "$LATEST_BUN_VERSION" ]]; then
            echo "::error::Failed to fetch latest Bun version from npm registry after $MAX_RETRIES attempts"
            exit 1
          fi

          echo "Latest Bun Version: $LATEST_BUN_VERSION"

          # Validate version format for both versions
          VERSION_REGEX='^[0-9]+\.[0-9]+\.[0-9]+$'
          if [[ ! "$CURRENT_BUN_VERSION" =~ $VERSION_REGEX ]]; then
            echo "::error::Invalid current version format: $CURRENT_BUN_VERSION"
            exit 1
          fi
          
          if [[ ! "$LATEST_BUN_VERSION" =~ $VERSION_REGEX ]]; then
            echo "::error::Invalid latest version format: $LATEST_BUN_VERSION"
            exit 1
          fi

          # Compare versions using proper semantic version comparison
          if [[ "$CURRENT_BUN_VERSION" == "$LATEST_BUN_VERSION" ]]; then
            echo "✅ Bun is already up-to-date: $CURRENT_BUN_VERSION"
            echo "is_bun_update=false" >> $GITHUB_OUTPUT
            echo "old_bun_version=$CURRENT_BUN_VERSION" >> $GITHUB_OUTPUT
            echo "new_bun_version=$LATEST_BUN_VERSION" >> $GITHUB_OUTPUT
          else
            # Enhanced version comparison logic
            IFS='.' read -ra CURRENT_PARTS <<< "$CURRENT_BUN_VERSION"
            IFS='.' read -ra LATEST_PARTS <<< "$LATEST_BUN_VERSION"
            
            CURRENT_MAJOR=${CURRENT_PARTS[0]}
            CURRENT_MINOR=${CURRENT_PARTS[1]}
            CURRENT_PATCH=${CURRENT_PARTS[2]}
            
            LATEST_MAJOR=${LATEST_PARTS[0]}
            LATEST_MINOR=${LATEST_PARTS[1]}
            LATEST_PATCH=${LATEST_PARTS[2]}

            UPDATE_TYPE="patch"
            if [[ "$LATEST_MAJOR" -gt "$CURRENT_MAJOR" ]]; then
              UPDATE_TYPE="major"
            elif [[ "$LATEST_MAJOR" -eq "$CURRENT_MAJOR" && "$LATEST_MINOR" -gt "$CURRENT_MINOR" ]]; then
              UPDATE_TYPE="minor"
            elif [[ "$LATEST_MAJOR" -eq "$CURRENT_MAJOR" && "$LATEST_MINOR" -eq "$CURRENT_MINOR" && "$LATEST_PATCH" -gt "$CURRENT_PATCH" ]]; then
              UPDATE_TYPE="patch"
            else
              echo "::warning::Version comparison suggests downgrade or lateral move - skipping"
              echo "is_bun_update=false" >> $GITHUB_OUTPUT
              echo "old_bun_version=$CURRENT_BUN_VERSION" >> $GITHUB_OUTPUT
              echo "new_bun_version=$LATEST_BUN_VERSION" >> $GITHUB_OUTPUT
              echo "::endgroup::"
              exit 0
            fi

            # Determine if we should update based on update level
            SHOULD_UPDATE="false"
            UPDATE_LEVEL="${{ github.event.inputs.update_level || 'minor' }}"
            FORCE_UPDATE="${{ github.event.inputs.force_update || 'false' }}"

            if [[ "$FORCE_UPDATE" == "true" ]]; then
              SHOULD_UPDATE="true"
              echo "🔧 Force update requested, will update regardless of version change type"
            elif [[ "$UPDATE_TYPE" == "patch" ]]; then
              # Always update patch versions (security fixes)
              SHOULD_UPDATE="true"
            elif [[ "$UPDATE_TYPE" == "minor" && ("$UPDATE_LEVEL" == "minor" || "$UPDATE_LEVEL" == "major") ]]; then
              SHOULD_UPDATE="true"
            elif [[ "$UPDATE_TYPE" == "major" && "$UPDATE_LEVEL" == "major" ]]; then
              SHOULD_UPDATE="true"
            fi

            # Set outputs
            echo "is_bun_update=$SHOULD_UPDATE" >> $GITHUB_OUTPUT
            echo "old_bun_version=$CURRENT_BUN_VERSION" >> $GITHUB_OUTPUT
            echo "new_bun_version=$LATEST_BUN_VERSION" >> $GITHUB_OUTPUT
            echo "update_type=$UPDATE_TYPE" >> $GITHUB_OUTPUT

            echo "::notice::Bun update available: $CURRENT_BUN_VERSION -> $LATEST_BUN_VERSION ($UPDATE_TYPE change)"
            if [[ "$SHOULD_UPDATE" == "true" ]]; then
              echo "::notice::✅ Will update Bun version to $LATEST_BUN_VERSION"
            else
              echo "::notice::⏭️ Skipping update due to $UPDATE_TYPE change with update level set to $UPDATE_LEVEL"
            fi
          fi

          echo "::endgroup::"

      - name: "🔄 Update packageManager in package.json"
        if: steps.check-bun-update.outputs.is_bun_update == 'true'
        run: |
          echo "::group::Updating packageManager in package.json"
          
          NEW_VERSION="${{ steps.check-bun-update.outputs.new_bun_version }}"
          OLD_VERSION="${{ steps.check-bun-update.outputs.old_bun_version }}"
          
          # Create backup
          cp package.json package.json.backup
          
          # Update the packageManager field using jq for safe JSON manipulation
          jq --arg ver "$NEW_VERSION" '.packageManager = "bun@" + $ver' package.json > package.json.tmp
          
          # Verify the update was successful
          UPDATED_VERSION=$(jq -r '.packageManager' package.json.tmp | cut -d@ -f2)
          if [[ "$UPDATED_VERSION" != "$NEW_VERSION" ]]; then
            echo "::error::Failed to update packageManager field correctly"
            mv package.json.backup package.json
            exit 1
          fi
          
          mv package.json.tmp package.json
          rm package.json.backup
          
          echo "✅ Updated packageManager from bun@$OLD_VERSION to bun@$NEW_VERSION"
          echo "::endgroup::"

      - name: "🔄 Update engines.bun in package.json (if exists)"
        if: steps.check-bun-update.outputs.is_bun_update == 'true'
        run: |
          echo "::group::Checking for engines.bun field"
          
          NEW_VERSION="${{ steps.check-bun-update.outputs.new_bun_version }}"
          
          # Check if there's an engines.bun field to update
          if jq -e '.engines.bun' package.json >/dev/null 2>&1; then
            MAJOR_MINOR=$(echo "$NEW_VERSION" | cut -d. -f1-2)
            CURRENT_ENGINES_BUN=$(jq -r '.engines.bun' package.json)
            
            echo "Found engines.bun: $CURRENT_ENGINES_BUN"
            
            # Create backup
            cp package.json package.json.backup
            
            # Update engines.bun while preserving the format (>= or ^ prefix)
            if [[ "$CURRENT_ENGINES_BUN" =~ ^">=" ]]; then
              # For >= format (minimum version)
              jq --arg ver "$MAJOR_MINOR.0" '.engines.bun = ">=" + $ver' package.json > package.json.tmp
              echo "Updated engines.bun to >=$MAJOR_MINOR.0"
            elif [[ "$CURRENT_ENGINES_BUN" =~ ^\^ ]]; then
              # For ^ format (compatible with)
              jq --arg ver "$MAJOR_MINOR.0" '.engines.bun = "^" + $ver' package.json > package.json.tmp
              echo "Updated engines.bun to ^$MAJOR_MINOR.0"
            else
              # For exact version or other formats, use >= with major.minor
              jq --arg ver "$MAJOR_MINOR.0" '.engines.bun = ">=" + $ver' package.json > package.json.tmp
              echo "Updated engines.bun to >=$MAJOR_MINOR.0 (normalized format)"
            fi
            
            # Verify update
            if jq empty package.json.tmp 2>/dev/null; then
              mv package.json.tmp package.json
              rm package.json.backup
            else
              echo "::error::Generated invalid JSON, rolling back"
              mv package.json.backup package.json
              exit 1
            fi
          else
            echo "No engines.bun field found in package.json"
          fi
          
          echo "::endgroup::"

      # Install the new Bun version to update lockfile and ensure dependencies are compatible
      - name: "🔧 Install Updated Bun Version"
        if: steps.check-bun-update.outputs.is_bun_update == 'true'
        run: |
          echo "::group::Installing new Bun version"
          
          NEW_VERSION="${{ steps.check-bun-update.outputs.new_bun_version }}"
          
          # Install the new Bun version globally with verification
          echo "Installing Bun $NEW_VERSION..."
          npm install -g bun@$NEW_VERSION
          
          # Verify installation
          INSTALLED_VERSION=$(bun --version)
          echo "Installed Bun version: $INSTALLED_VERSION"
          
          if [[ "$INSTALLED_VERSION" != "$NEW_VERSION" ]]; then
            echo "::error::Version mismatch after installation. Expected: $NEW_VERSION, Got: $INSTALLED_VERSION"
            exit 1
          fi
          
          # Clean install to update lockfile
          echo "Updating dependencies and lockfile..."
          rm -f bun.lockb
          bun install --frozen-lockfile=false
          
          # Verify lockfile was created
          if [[ ! -f "bun.lockb" ]]; then
            echo "::warning::bun.lockb was not created, but continuing..."
          else
            echo "✅ bun.lockb updated successfully"
          fi
          
          echo "✅ Successfully installed Bun $NEW_VERSION and updated dependencies"
          echo "::endgroup::"

      # Enhanced SBOM generation with more details
      - name: "📋 Generate SBOM for Bun Update"
        if: steps.check-bun-update.outputs.is_bun_update == 'true'
        id: generate-sbom
        run: |
          echo "::group::Generating SBOM"
          
          NEW_VERSION="${{ steps.check-bun-update.outputs.new_bun_version }}"
          OLD_VERSION="${{ steps.check-bun-update.outputs.old_bun_version }}"
          UPDATE_TYPE="${{ steps.check-bun-update.outputs.update_type }}"
          
          # Generate comprehensive SBOM
          cat > sbom.json << EOF
          {
            "bomFormat": "CycloneDX",
            "specVersion": "1.5",
            "serialNumber": "urn:uuid:$(cat /proc/sys/kernel/random/uuid)",
            "version": 1,
            "metadata": {
              "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
              "tools": [
                {
                  "vendor": "GitHub",
                  "name": "enhance-dependabot-bun",
                  "version": "${{ env.WORKFLOW_VERSION }}"
                }
              ],
              "component": {
                "type": "application",
                "bom-ref": "pkg:npm/bun@$NEW_VERSION",
                "name": "bun-runtime",
                "version": "$NEW_VERSION"
              },
              "properties": [
                {
                  "name": "update:previous-version",
                  "value": "$OLD_VERSION"
                },
                {
                  "name": "update:type",
                  "value": "$UPDATE_TYPE"
                },
                {
                  "name": "update:automated",
                  "value": "true"
                },
                {
                  "name": "update:workflow-version", 
                  "value": "${{ env.WORKFLOW_VERSION }}"
                }
              ]
            },
            "components": [
              {
                "type": "library",
                "bom-ref": "pkg:npm/bun@$NEW_VERSION",
                "name": "bun",
                "version": "$NEW_VERSION",
                "purl": "pkg:npm/bun@$NEW_VERSION",
                "description": "Bun JavaScript runtime and package manager",
                "licenses": [
                  {
                    "license": {
                      "name": "MIT"
                    }
                  }
                ]
              }
            ]
          }
          EOF
          
          # Validate SBOM is valid JSON
          if ! jq empty sbom.json 2>/dev/null; then
            echo "::error::Generated invalid SBOM JSON"
            exit 1
          fi
          
          echo "✅ Generated comprehensive SBOM saved to sbom.json"
          echo "::endgroup::"
          echo "sbom_generated=true" >> $GITHUB_OUTPUT

      - name: "🔒 Security Scan - Dependency Check"
        if: steps.check-bun-update.outputs.is_bun_update == 'true'
        run: |
          echo "::group::Security scanning"
          
          NEW_VERSION="${{ steps.check-bun-update.outputs.new_bun_version }}"
          
          # Basic security checks
          echo "Performing basic security validation..."
          
          # Check if the new version has any known critical vulnerabilities
          # This is a placeholder for more sophisticated security scanning
          echo "Security check: Validating Bun version $NEW_VERSION"
          
          # Verify package integrity by checking if bun can run basic commands
          if ! timeout 30 bun --version >/dev/null 2>&1; then
            echo "::error::Security check failed - Bun installation appears corrupted"
            exit 1
          fi
          
          # Check for any suspicious changes in package.json
          if git diff --name-only | grep -v '^package\.json$' | grep -v '^bun\.lockb$' | grep -v '^sbom\.json$' | grep -q .; then
            echo "::warning::Unexpected files modified during update"
            git diff --name-only
          fi
          
          echo "✅ Basic security validation passed"
          echo "::endgroup::"

      - name: "📝 Commit Changes"
        if: steps.check-bun-update.outputs.is_bun_update == 'true'
        run: |
          echo "::group::Committing changes"
          
          NEW_VERSION="${{ steps.check-bun-update.outputs.new_bun_version }}"
          OLD_VERSION="${{ steps.check-bun-update.outputs.old_bun_version }}"
          UPDATE_TYPE="${{ steps.check-bun-update.outputs.update_type }}"
          
          # Check if there are any changes to commit
          if git diff --quiet && git diff --cached --quiet; then
            echo "::notice::No changes detected to commit"
            echo "::endgroup::"
            exit 0
          fi
          
          # Show what's being changed for transparency
          echo "Changes to be committed:"
          git diff --name-only
          echo ""
          echo "Detailed changes:"
          git diff --unified=1
          
          # Create a descriptive commit message following conventional commits
          COMMIT_MSG="chore(deps): update bun from $OLD_VERSION to $NEW_VERSION

          - Updated packageManager field in package.json
          - Updated engines.bun field (if present)
          - Regenerated bun.lockb with new version
          - Generated SBOM for supply chain security
          
          Type: $UPDATE_TYPE version update
          Workflow: enhance-dependabot-bun v${{ env.WORKFLOW_VERSION }}
          Security: SBOM included for provenance tracking"
          
          # Add all relevant files
          git add package.json
          
          # Add lockfile if it exists
          if [[ -f "bun.lockb" ]]; then
            git add bun.lockb
          fi
          
          # Add SBOM
          if [[ -f "sbom.json" ]]; then
            git add sbom.json
          fi
          
          # Commit with detailed message
          git commit -m "$COMMIT_MSG"
          
          # Push to the main branch with error handling
          if ! git push origin HEAD:${GITHUB_REF#refs/heads/}; then
            echo "::error::Failed to push changes to repository"
            echo "This might be due to:"
            echo "1. Branch protection rules requiring reviews"
            echo "2. Insufficient permissions"
            echo "3. Conflicts with concurrent changes"
            exit 1
          fi
          
          echo "✅ Successfully committed and pushed Bun update from $OLD_VERSION to $NEW_VERSION ($UPDATE_TYPE change)"
          echo "::endgroup::"

      - name: "🧪 Post-Update Verification"
        if: steps.check-bun-update.outputs.is_bun_update == 'true'
        run: |
          echo "::group::Post-update verification"
          
          NEW_VERSION="${{ steps.check-bun-update.outputs.new_bun_version }}"
          
          # Verify package.json was updated correctly
          UPDATED_VERSION=$(jq -r '.packageManager' package.json | cut -d@ -f2)
          if [[ "$UPDATED_VERSION" != "$NEW_VERSION" ]]; then
            echo "::error::Verification failed: package.json shows $UPDATED_VERSION, expected $NEW_VERSION"
            exit 1
          fi
          
          # Verify Bun can still run basic operations
          if ! bun --version >/dev/null 2>&1; then
            echo "::error::Verification failed: Bun is not working after update"
            exit 1
          fi
          
          # Test basic Bun functionality
          if ! echo "console.log('test')" | bun run - >/dev/null 2>&1; then
            echo "::warning::Basic Bun execution test failed, but continuing"
          fi
          
          echo "✅ Post-update verification completed successfully"
          echo "::endgroup::"

      - name: "💬 Create Summary Report"
        if: always()
        run: |
          echo "::group::Creating summary report"
          
          # Create a comprehensive summary for GitHub step output
          echo "# 🤖 Bun Auto-Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.check-bun-update.outputs.is_bun_update }}" == "true" ]]; then
            NEW_VERSION="${{ steps.check-bun-update.outputs.new_bun_version }}"
            OLD_VERSION="${{ steps.check-bun-update.outputs.old_bun_version }}"
            UPDATE_TYPE="${{ steps.check-bun-update.outputs.update_type }}"
            
            echo "## ✅ Update Successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Successfully updated Bun from \`$OLD_VERSION\` to \`$NEW_VERSION\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📋 Changes Made" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Updated \`packageManager\` field in package.json" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Updated \`engines.bun\` field (if present)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Regenerated \`bun.lockb\` with new version" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Generated SBOM for supply chain security" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Performed security validation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📊 Update Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Update Type**: $UPDATE_TYPE version change" >> $GITHUB_STEP_SUMMARY
            echo "- **Workflow Version**: enhance-dependabot-bun v${{ env.WORKFLOW_VERSION }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Updated On**: $(date -u "+%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
            echo "- **SBOM Generated**: ${{ steps.generate-sbom.outputs.sbom_generated || 'false' }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Security Scan**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
            
            # Add note about workflow file approach
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 💡 Integration Note" >> $GITHUB_STEP_SUMMARY
            echo "This workflow updates only package.json as the single source of truth." >> $GITHUB_STEP_SUMMARY
            echo "Your other workflows should read the Bun version dynamically from package.json." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Recommended workflow integration:**" >> $GITHUB_STEP_SUMMARY
            echo '```yaml' >> $GITHUB_STEP_SUMMARY
            echo 'steps:' >> $GITHUB_STEP_SUMMARY
            echo '  - name: "Extract Bun Version"' >> $GITHUB_STEP_SUMMARY
            echo '    id: bun-version' >> $GITHUB_STEP_SUMMARY
            echo '    run: |' >> $GITHUB_STEP_SUMMARY
            echo '      BUN_VERSION=$(jq -r .packageManager package.json | cut -d@ -f2)' >> $GITHUB_STEP_SUMMARY
            echo '      echo "version=$BUN_VERSION" >> $GITHUB_OUTPUT' >> $GITHUB_STEP_SUMMARY
            echo '  - uses: oven-sh/setup-bun@v1' >> $GITHUB_STEP_SUMMARY
            echo '    with:' >> $GITHUB_STEP_SUMMARY
            echo '      bun-version: ${{ steps.bun-version.outputs.version }}' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
          else
            OLD_VERSION="${{ steps.check-bun-update.outputs.old_bun_version }}"
            NEW_VERSION="${{ steps.check-bun-update.outputs.new_bun_version }}"
            
            if [[ "$OLD_VERSION" == "$NEW_VERSION" ]]; then
              echo "## ℹ️ No Update Needed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Bun is already up-to-date at version \`$OLD_VERSION\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "## ⏭️ Update Skipped" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Update from \`$OLD_VERSION\` to \`$NEW_VERSION\` was skipped due to update policy settings." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Current Settings:**" >> $GITHUB_STEP_SUMMARY
              echo "- Update Level: ${{ github.event.inputs.update_level || 'minor' }}" >> $GITHUB_STEP_SUMMARY
              echo "- Force Update: ${{ github.event.inputs.force_update || 'false' }}" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Automated by enhance-dependabot-bun v${{ env.WORKFLOW_VERSION }}*" >> $GITHUB_STEP_SUMMARY
          
          echo "::endgroup::"

      # Generate provenance for supply chain security
      - name: "🔒 Generate Provenance"
        id: provenance
        if: always()
        run: |
          echo "::group::Generating provenance"
          
          # Generate a unique provenance ID with timestamp and workflow info
          TIMESTAMP=$(date +%s)
          WORKFLOW_RUN="${{ github.run_id }}"
          PROVENANCE_ID="bun-update-${TIMESTAMP}-${WORKFLOW_RUN}"
          
          echo "provenance-id=$PROVENANCE_ID" >> $GITHUB_OUTPUT
          echo "Generated provenance ID: $PROVENANCE_ID"
          
          # Log provenance information
          echo "::notice::Workflow execution provenance: $PROVENANCE_ID"
          echo "::notice::Repository: ${{ github.repository }}"
          echo "::notice::Commit SHA: ${{ github.sha }}"
          echo "::notice::Workflow: ${{ github.workflow }}"
          echo "::notice::Run ID: ${{ github.run_id }}"
          
          echo "::endgroup::"
