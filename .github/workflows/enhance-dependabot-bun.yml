name: "🔄 Automatic Bun Updates"

# ============================================================
# ⚡ Trigger Configuration (Run on schedule)
# ============================================================
on:
  # Run on a schedule to check for updates automatically
  schedule:
    # Run every Monday at 3:15 AM UTC
    - cron: '15 3 * * 1'

  # Also allow manual triggering for testing/immediate updates
  workflow_dispatch:
    inputs:
      force_update:
        description: "Force update even if only patch/minor version"
        type: boolean
        default: false
      update_level:
        description: "Update level to allow"
        type: choice
        default: "minor"
        options:
          - patch
          - minor
          - major

# ============================================================
# 🚫 Prevent Redundant Runs
# ============================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.run_id }}
  cancel-in-progress: true

# ============================================================
# 🔒 Permissions (Least Privilege Principle)
# ============================================================
permissions:
  contents: write  # For repository updates
  pull-requests: write  # For PR creation
  id-token: write  # For provenance generation
  actions: write  # Required to modify workflow files

# ============================================================
# 🌍 Environment Variables
# ============================================================
env:
  GH_TOKEN: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
  WORKFLOW_VERSION: "2.0.0"  # For tracking workflow version
  UPDATE_BRANCH: "auto-update-bun"

# ============================================================
# 🔄 Jobs
# ============================================================
jobs:
  update-bun-version:
    name: "🔄 Check & Update Bun"
    runs-on: ubuntu-latest
    timeout-minutes: 5

    # Add SLSA provenance for CI/CD supply chain security
    outputs:
      workflow-provenance: ${{ steps.provenance.outputs.provenance-id }}

    steps:
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      # -------------------------------------------------------
      # 🔐 Setup Git Configuration (No GPG Signing)
      # -------------------------------------------------------
      - name: "🔐 Setup Git Configuration"
        id: git-setup
        run: |
          echo "::group::Git Setup"
          # Configure Git for standard commits (no GPG signing)
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          echo "✅ Git configured for automated commits"
          echo "::endgroup::"

      - name: "🔍 Check for Bun Update"
        id: check-bun-update
        run: |
          echo "::group::Checking for Bun updates"

          # Get current bun version from package.json
          if [[ -f "package.json" ]]; then
            CURRENT_BUN_VERSION=$(grep -o '"packageManager": *"bun@[0-9.]*"' package.json | grep -o '[0-9][0-9.]*' || echo "unknown")
          else
            echo "::error::package.json not found"
            exit 1
          fi

          echo "Current Bun Version: $CURRENT_BUN_VERSION"

          # Get latest Bun version from npm registry
          LATEST_BUN_VERSION=$(curl -s https://registry.npmjs.org/bun/latest | jq -r '.version')
          echo "Latest Bun Version: $LATEST_BUN_VERSION"

          # Compare versions
          if [[ "$CURRENT_BUN_VERSION" == "$LATEST_BUN_VERSION" ]]; then
            echo "✅ Bun is already up-to-date: $CURRENT_BUN_VERSION"
            echo "is_bun_update=false" >> $GITHUB_OUTPUT
            echo "old_bun_version=$CURRENT_BUN_VERSION" >> $GITHUB_OUTPUT
            echo "new_bun_version=$LATEST_BUN_VERSION" >> $GITHUB_OUTPUT
          else
            # Determine version change type (major.minor.patch)
            CURRENT_MAJOR=$(echo "$CURRENT_BUN_VERSION" | cut -d. -f1)
            CURRENT_MINOR=$(echo "$CURRENT_BUN_VERSION" | cut -d. -f2)
            CURRENT_PATCH=$(echo "$CURRENT_BUN_VERSION" | cut -d. -f3)

            LATEST_MAJOR=$(echo "$LATEST_BUN_VERSION" | cut -d. -f1)
            LATEST_MINOR=$(echo "$LATEST_BUN_VERSION" | cut -d. -f2)
            LATEST_PATCH=$(echo "$LATEST_BUN_VERSION" | cut -d. -f3)

            UPDATE_TYPE="patch"
            if [[ "$LATEST_MAJOR" -gt "$CURRENT_MAJOR" ]]; then
              UPDATE_TYPE="major"
            elif [[ "$LATEST_MINOR" -gt "$CURRENT_MINOR" ]]; then
              UPDATE_TYPE="minor"
            fi

            # Determine if we should update based on update level
            SHOULD_UPDATE="false"
            UPDATE_LEVEL="${{ github.event.inputs.update_level || 'minor' }}"
            FORCE_UPDATE="${{ github.event.inputs.force_update || 'false' }}"

            if [[ "$FORCE_UPDATE" == "true" ]]; then
              SHOULD_UPDATE="true"
              echo "Force update requested, will update regardless of version change type"
            elif [[ "$UPDATE_TYPE" == "patch" ]]; then
              # Always update patch versions
              SHOULD_UPDATE="true"
            elif [[ "$UPDATE_TYPE" == "minor" && ("$UPDATE_LEVEL" == "minor" || "$UPDATE_LEVEL" == "major") ]]; then
              SHOULD_UPDATE="true"
            elif [[ "$UPDATE_TYPE" == "major" && "$UPDATE_LEVEL" == "major" ]]; then
              SHOULD_UPDATE="true"
            fi

            # Set outputs
            echo "is_bun_update=$SHOULD_UPDATE" >> $GITHUB_OUTPUT
            echo "old_bun_version=$CURRENT_BUN_VERSION" >> $GITHUB_OUTPUT
            echo "new_bun_version=$LATEST_BUN_VERSION" >> $GITHUB_OUTPUT
            echo "update_type=$UPDATE_TYPE" >> $GITHUB_OUTPUT

            echo "::notice::Bun update available: $CURRENT_BUN_VERSION -> $LATEST_BUN_VERSION ($UPDATE_TYPE change)"
            if [[ "$SHOULD_UPDATE" == "true" ]]; then
              echo "::notice::Will update Bun version to $LATEST_BUN_VERSION"
            else
              echo "::notice::Skipping update due to $UPDATE_TYPE change with update level set to $UPDATE_LEVEL"
            fi
          fi

          echo "::endgroup::"

      # Add security validation for version strings
      - name: "🔒 Validate Version Strings"
        if: steps.check-bun-update.outputs.is_bun_update == 'true'
        run: |
          echo "::group::Validating version strings"
          NEW_VERSION="${{ steps.check-bun-update.outputs.new_bun_version }}"

          # Validate version format using strict regex
          if [[ ! "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format: $NEW_VERSION"
            exit 1
          fi

          echo "✅ Version format validation passed"
          echo "::endgroup::"

      - name: "🔄 Update packageManager in package.json"
        if: steps.check-bun-update.outputs.is_bun_update == 'true'
        run: |
          echo "::group::Updating packageManager in package.json"
          # Update the packageManager field
          NEW_VERSION="${{ steps.check-bun-update.outputs.new_bun_version }}"

          # Check if current version format uses bun@x.y.z
          if grep -q '"packageManager": "bun@' package.json; then
            # Update with jq ensuring we preserve the exact format
            jq --arg ver "$NEW_VERSION" '.packageManager = "bun@" + $ver' package.json > package.json.tmp
            mv package.json.tmp package.json
            echo "Updated packageManager to bun@$NEW_VERSION"
          else
            echo "::warning::packageManager format not recognized, skipping update"
          fi
          echo "::endgroup::"

      - name: "🔄 Update BUN_VERSION in Workflow Files"
        if: steps.check-bun-update.outputs.is_bun_update == 'true'
        run: |
          echo "::group::Updating BUN_VERSION in workflow files"
          NEW_VERSION="${{ steps.check-bun-update.outputs.new_bun_version }}"

          # Find workflow files more efficiently
          WORKFLOW_FILES=$(find .github/workflows -name "*.yml" -type f)

          for file in $WORKFLOW_FILES; do
            if grep -q "BUN_VERSION:" "$file"; then
              echo "Updating BUN_VERSION in $file"
              # Use more efficient sed command
              sed -i -E "s/(BUN_VERSION: *\")[0-9]+\.[0-9]+\.[0-9]+(\" *#.*)/\1$NEW_VERSION\2/" "$file"
            fi
          done
          echo "::endgroup::"

      - name: "🔄 Update engines.bun in package.json (if exists)"
        if: steps.check-bun-update.outputs.is_bun_update == 'true'
        run: |
          echo "::group::Checking for engines.bun field"
          # Check if there's an engines.bun field to update
          if grep -q '"engines":' package.json && grep -q '"bun":' package.json; then
            NEW_VERSION="${{ steps.check-bun-update.outputs.new_bun_version }}"
            MAJOR_MINOR=$(echo "$NEW_VERSION" | cut -d. -f1-2)

            # Update engines.bun while preserving the format (>= or ^ prefix)
            if grep -q '"bun": *">=' package.json; then
              # For >= format (minimum version)
              jq --arg ver "$MAJOR_MINOR.0" '.engines.bun = ">=" + $ver' package.json > package.json.tmp
              mv package.json.tmp package.json
              echo "Updated engines.bun to >=$MAJOR_MINOR.0"
            elif grep -q '"bun": *"\\^' package.json; then
              # For ^ format (compatible with)
              jq --arg ver "$MAJOR_MINOR.0" '.engines.bun = "^" + $ver' package.json > package.json.tmp
              mv package.json.tmp package.json
              echo "Updated engines.bun to ^$MAJOR_MINOR.0"
            else
              echo "::warning::engines.bun format not recognized, keeping existing value"
            fi
          else
            echo "No engines.bun field found in package.json"
          fi
          echo "::endgroup::"

      # Install the new Bun version to update lockfile and ensure dependencies are compatible
      - name: "🔧 Install Updated Bun Version"
        if: steps.check-bun-update.outputs.is_bun_update == 'true'
        run: |
          echo "::group::Installing new Bun version"
          NEW_VERSION="${{ steps.check-bun-update.outputs.new_bun_version }}"

          # Install the new Bun version globally
          npm install -g bun@$NEW_VERSION

          # Verify installation
          bun --version

          # Update lockfile by reinstalling dependencies
          bun install

          echo "✅ Successfully installed Bun $NEW_VERSION and updated lockfile"
          echo "::endgroup::"

      # Add SBOM generation
      - name: "📋 Generate SBOM for Bun Update"
        if: steps.check-bun-update.outputs.is_bun_update == 'true'
        id: generate-sbom
        run: |
          echo "::group::Generating SBOM"
          NEW_VERSION="${{ steps.check-bun-update.outputs.new_bun_version }}"

          # Generate simplified SBOM
          cat > sbom.json << EOF
          {
            "bomFormat": "CycloneDX",
            "specVersion": "1.5",
            "serialNumber": "urn:uuid:$(cat /proc/sys/kernel/random/uuid)",
            "version": 1,
            "metadata": {
              "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
              "tools": [
                {
                  "vendor": "GitHub",
                  "name": "enhance-dependabot-bun",
                  "version": "${{ env.WORKFLOW_VERSION }}"
                }
              ],
              "component": {
                "type": "application",
                "bom-ref": "pkg:npm/bun@$NEW_VERSION"
              }
            },
            "components": [
              {
                "type": "library",
                "name": "bun",
                "version": "$NEW_VERSION",
                "purl": "pkg:npm/bun@$NEW_VERSION"
              },
              {
                "type": "library",
                "name": "bun-types",
                "version": "$NEW_VERSION",
                "purl": "pkg:npm/bun-types@$NEW_VERSION"
              }
            ]
          }
          EOF
          echo "Generated SBOM saved to sbom.json"
          echo "::endgroup::"
          echo "sbom_generated=true" >> $GITHUB_OUTPUT

      - name: "📝 Commit Changes"
        if: steps.check-bun-update.outputs.is_bun_update == 'true'
        run: |
          echo "::group::Committing changes"
          # Check if there are changes to commit
          if git diff --quiet && [ ! -f "bun.lockb" ]; then
            echo "::notice::No changes to commit"
            echo "::endgroup::"
            exit 0
          fi

          NEW_VERSION="${{ steps.check-bun-update.outputs.new_bun_version }}"
          OLD_VERSION="${{ steps.check-bun-update.outputs.old_bun_version }}"
          UPDATE_TYPE="${{ steps.check-bun-update.outputs.update_type }}"

          # Create a short commit message that follows commitlint format (under 100 chars)
          COMMIT_MSG="chore(deps): update bun from $OLD_VERSION to $NEW_VERSION"

          # Show what's being changed
          git diff --unified=1

          # Add changes - ensure we include the lockfile
          git add package.json .github/workflows/*.yml bun.lockb sbom.json

          # Commit the changes (no GPG signing)
          git commit -m "$COMMIT_MSG"

          # Push directly to the main branch since these are safe minor/patch updates
          git push origin HEAD:${GITHUB_REF#refs/heads/}

          echo "✅ Successfully committed and pushed Bun update from $OLD_VERSION to $NEW_VERSION ($UPDATE_TYPE change)"
          echo "::endgroup::"

      - name: "💬 Record Update Details"
        if: steps.check-bun-update.outputs.is_bun_update == 'true'
        run: |
          echo "::group::Recording Update Details"
          NEW_VERSION="${{ steps.check-bun-update.outputs.new_bun_version }}"
          OLD_VERSION="${{ steps.check-bun-update.outputs.old_bun_version }}"

          # Log the information
          echo "::notice::Bun updated from $OLD_VERSION to $NEW_VERSION"
          echo "::notice::This is an automated update triggered by schedule or manual workflow"

          echo "::endgroup::"

      - name: "💬 Create Summary Report"
        if: steps.check-bun-update.outputs.is_bun_update == 'true'
        run: |
          echo "::group::Creating summary report"
          NEW_VERSION="${{ steps.check-bun-update.outputs.new_bun_version }}"
          OLD_VERSION="${{ steps.check-bun-update.outputs.old_bun_version }}"

          # Create a detailed summary for GitHub step output
          echo "# 🤖 Bun Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Successfully updated Bun from \`$OLD_VERSION\` to \`$NEW_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Updated Files" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ \`packageManager\` field in package.json" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ \`BUN_VERSION\` environment variables in workflow files" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ \`engines.bun\` field in package.json (if present)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: enhance-dependabot-bun v${{ env.WORKFLOW_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Updated on**: $(date -u "+%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "- **SBOM generated**: ${{ steps.generate-sbom.outputs.sbom_generated || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Update type**: ${{ steps.check-bun-update.outputs.update_type }} version change" >> $GITHUB_STEP_SUMMARY

          echo "::notice::Successfully updated Bun from $OLD_VERSION to $NEW_VERSION"
          echo "::endgroup::"

      # Generate provenance for supply chain security
      - name: "🔒 Generate Provenance"
        id: provenance
        run: |
          echo "::group::Generating provenance"
          # Generate a unique provenance ID
          PROVENANCE_ID="$(date +%s)-$(echo $RANDOM | md5sum | head -c 8)"
          echo "provenance-id=$PROVENANCE_ID" >> $GITHUB_OUTPUT
          echo "Generated provenance ID: $PROVENANCE_ID"
          echo "::endgroup::"

      - name: "🧪 Verify Integration"
        if: steps.check-bun-update.outputs.is_bun_update == 'true'
        run: |
          echo "::group::Verifying update consistency"
          # Check that packageManager and BUN_VERSION are in sync
          if [[ -f "package.json" ]]; then
            # Extract values to verify
            PKG_MGR_VERSION=$(grep -o '"packageManager": *"bun@[0-9.]*"' package.json | grep -o '[0-9][0-9.]*')

            # Find a workflow file with BUN_VERSION
            WORKFLOW_WITH_BUN=$(grep -l "BUN_VERSION:" .github/workflows/*.yml | head -1)
            if [[ -n "$WORKFLOW_WITH_BUN" ]]; then
              WORKFLOW_BUN_VERSION=$(grep "BUN_VERSION:" "$WORKFLOW_WITH_BUN" | grep -o '[0-9][0-9.]*')

              # Compare versions
              if [[ "$PKG_MGR_VERSION" == "$WORKFLOW_BUN_VERSION" ]]; then
                echo "✅ Versions are in sync: package.json ($PKG_MGR_VERSION) matches workflow ($WORKFLOW_BUN_VERSION)"
              else
                echo "⚠️ Version mismatch: package.json ($PKG_MGR_VERSION) vs workflow ($WORKFLOW_BUN_VERSION)"
              fi
            else
              echo "No workflow file with BUN_VERSION found for verification"
            fi
          else
            echo "package.json not found for verification"
          fi
          echo "::endgroup::"
