name: "🔍 Dependency Check & Update"

# ============================================================
# ⚡ Trigger Configuration
# ============================================================
on:
  workflow_dispatch:
    inputs:
      package_type:
        description: "Type of package updates"
        type: choice
        required: true
        default: "all"
        options:
          - "all"
          - "npm"
          - "github-actions"
      auto_merge:
        description: "Auto-merge eligible updates"
        type: boolean
        default: true
      only_security:
        description: "Only check for security updates"
        type: boolean
        default: false
      dry_run:
        description: "Dry run mode"
        type: boolean
        default: false

# ============================================================
# 🚫 Prevent Redundant Runs
# ============================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# ============================================================
# 🔒 Permissions (Least Privilege Principle)
# ============================================================
permissions:
  contents: write
  pull-requests: write
  security-events: write

# ============================================================
# 🌍 Environment Variables
# ============================================================
env:
  CHECK_TYPE: ${{ github.event.inputs.package_type || 'all' }}
  AUTO_MERGE: ${{ github.event.inputs.auto_merge || 'true' }}
  SECURITY_ONLY: ${{ github.event.inputs.only_security || 'false' }}
  DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}

# ============================================================
# 🔄 Jobs
# ============================================================
jobs:
  check-dependencies:
    name: "🔍 Check & Update Dependencies"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🧰 Setup Tools"
        run: |
          npm install -g npm-check-updates@latest
          sudo apt-get update && sudo apt-get install -y jq curl

      - name: "🔍 Analyze Project"
        id: analyze-config
        run: |
          # Check for Bun as package manager
          if jq -e '.packageManager | startswith("bun@")' package.json > /dev/null; then
            echo "uses_bun=true" >> $GITHUB_OUTPUT
            echo "bun_version=$(jq -r '.packageManager' package.json | sed 's/bun@//')" >> $GITHUB_OUTPUT
          else
            echo "uses_bun=false" >> $GITHUB_OUTPUT
          fi

      - name: "🔍 Check npm Dependencies"
        id: check-npm
        if: env.CHECK_TYPE == 'all' || env.CHECK_TYPE == 'npm'
        run: |
          # Use npm-check-updates to identify available updates
          if [ "${{ env.SECURITY_ONLY }}" == "true" ]; then
            NCU_OUTPUT=$(npx npm-check-updates --jsonUpgraded --target newest --loglevel error 2>/dev/null || echo "{}")
          else
            NCU_OUTPUT=$(npx npm-check-updates --jsonUpgraded --loglevel error 2>/dev/null || echo "{}")
          fi

          UPDATE_COUNT=$(echo $NCU_OUTPUT | jq 'length')
          echo "🔹 Found $UPDATE_COUNT package updates available"

          # Save the list of updates for later
          echo "$NCU_OUTPUT" > npm-updates.json

          if [ "$UPDATE_COUNT" -gt 0 ]; then
            echo "updates_available=true" >> $GITHUB_OUTPUT
            echo "update_count=$UPDATE_COUNT" >> $GITHUB_OUTPUT
          else
            echo "updates_available=false" >> $GITHUB_OUTPUT
            echo "update_count=0" >> $GITHUB_OUTPUT
          fi

      - name: "🔍 Check GitHub Actions"
        id: check-actions
        if: env.CHECK_TYPE == 'all' || env.CHECK_TYPE == 'github-actions'
        run: |
          ACTION_UPDATES_AVAILABLE=false
          ACTION_UPDATE_COUNT=0

          # Create output file
          touch action_updates.csv

          # Function to check a workflow file for outdated actions
          check_workflow_file() {
            local file="$1"

            # Extract all GitHub Actions uses statements
            ACTIONS=$(grep -o "uses: [a-zA-Z0-9_\-\.\/]*@[a-zA-Z0-9_\-\.]\\+" "$file" || echo "")

            # Check each action
            while IFS= read -r ACTION; do
              # Extract name and version
              ACTION_NAME=$(echo "$ACTION" | cut -d '@' -f 1 | sed 's/uses: //')
              ACTION_VERSION=$(echo "$ACTION" | cut -d '@' -f 2)

              # Skip if version is not a tag/version (e.g., using branch name)
              if [[ ! "$ACTION_VERSION" =~ ^v[0-9]+(\.[0-9]+)*$ ]]; then
                continue
              fi

              # Determine if this is a trusted action
              PUBLISHER="unknown"
              if [[ "$ACTION_NAME" =~ ^github/ || "$ACTION_NAME" =~ ^actions/ ]]; then
                PUBLISHER="trusted"
              fi

              # Get latest release through GitHub API
              if [[ "$ACTION_NAME" =~ ^[a-zA-Z0-9_\-]+/[a-zA-Z0-9_\-]+$ ]]; then
                LATEST_VERSION=$(curl -s -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/repos/$ACTION_NAME/releases/latest | \
                  jq -r '.tag_name // "not_found"' 2>/dev/null || echo "not_found")

                if [ "$LATEST_VERSION" != "not_found" ] && [ "$LATEST_VERSION" != "$ACTION_VERSION" ]; then
                  echo "$ACTION_NAME,$ACTION_VERSION,$LATEST_VERSION,$file,$PUBLISHER" >> action_updates.csv
                  ACTION_UPDATES_AVAILABLE=true
                  ACTION_UPDATE_COUNT=$((ACTION_UPDATE_COUNT + 1))
                fi
              fi
            done <<< "$ACTIONS"
          }

          # Check all workflow files
          for FILE in .github/workflows/*.yml; do
            [ -f "$FILE" ] && check_workflow_file "$FILE"
          done

          # Set outputs
          echo "actions_update_available=$ACTION_UPDATES_AVAILABLE" >> $GITHUB_OUTPUT
          echo "actions_update_count=$ACTION_UPDATE_COUNT" >> $GITHUB_OUTPUT

      - name: "🔐 Setup Git"
        id: git-setup
        if: (steps.check-npm.outputs.updates_available == 'true' || steps.check-actions.outputs.actions_update_available == 'true') && env.DRY_RUN != 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: "🔄 Update NPM Dependencies"
        if: env.CHECK_TYPE != 'github-actions' && steps.check-npm.outputs.updates_available == 'true' && env.DRY_RUN != 'true'
        id: update-npm
        run: |
          # Setup Bun if it's used in the project
          if [ "${{ steps.analyze-config.outputs.uses_bun }}" == "true" ]; then
            curl -fsSL https://bun.sh/install | bash
            export BUN_INSTALL="$HOME/.bun"
            export PATH="$BUN_INSTALL/bin:$PATH"
          fi

          # Read the update data
          UPDATES=$(cat npm-updates.json)

          # Create a temporary file for filtered updates
          echo "{}" > minor-patch-updates.json

          # Filter updates to include only minor and patch versions
          MINOR_PATCH_COUNT=0

          # Loop through each package
          for pkg in $(echo "$UPDATES" | jq -r 'keys[]'); do
            # Get current version from package.json
            if jq -e '.dependencies["'$pkg'"]' package.json > /dev/null; then
              CURRENT=$(jq -r '.dependencies["'$pkg'"]' package.json | sed 's/[\^~=]//g')
            elif jq -e '.devDependencies["'$pkg'"]' package.json > /dev/null; then
              CURRENT=$(jq -r '.devDependencies["'$pkg'"]' package.json | sed 's/[\^~=]//g')
            else
              CURRENT="0.0.0"
            fi

            # Get target version from updates
            TARGET=$(echo "$UPDATES" | jq -r ".\"$pkg\"")

            # Skip invalid versions
            if [ -z "$CURRENT" ] || [ "$CURRENT" = "null" ] || [ -z "$TARGET" ] || [ "$TARGET" = "null" ]; then
              continue
            fi

            # Extract major.minor.patch
            CURRENT_MAJOR=$(echo "$CURRENT" | sed -E 's/^([0-9]+)\..*/\1/')
            CURRENT_MINOR=$(echo "$CURRENT" | sed -E 's/^[0-9]+\.([0-9]+)\..*/\1/')
            TARGET_MAJOR=$(echo "$TARGET" | sed -E 's/^([0-9]+)\..*/\1/')
            TARGET_MINOR=$(echo "$TARGET" | sed -E 's/^[0-9]+\.([0-9]+)\..*/\1/')

            # Only include minor or patch updates
            if [ "$TARGET_MAJOR" = "$CURRENT_MAJOR" ]; then
              jq --arg pkg "$pkg" --arg ver "$TARGET" '.[$pkg] = $ver' minor-patch-updates.json > tmp.json
              mv tmp.json minor-patch-updates.json
              MINOR_PATCH_COUNT=$((MINOR_PATCH_COUNT + 1))
            fi
          done

          echo "🔹 Found $MINOR_PATCH_COUNT minor/patch updates to apply"
          echo "minor_patch_count=$MINOR_PATCH_COUNT" >> $GITHUB_OUTPUT

          if [ "$MINOR_PATCH_COUNT" -eq 0 ]; then
            exit 0
          fi

          # Create a new branch for the updates
          BRANCH_NAME="deps-update-$(date +"%Y%m%d%H%M%S")"
          git checkout -b "$BRANCH_NAME"

          # Apply the updates
          if [ "${{ steps.analyze-config.outputs.uses_bun }}" == "true" ]; then
            # Use Bun to update dependencies
            for pkg in $(jq -r 'keys[]' minor-patch-updates.json); do
              version=$(jq -r ".\"$pkg\"" minor-patch-updates.json)
              if jq -e '.dependencies["'$pkg'"]' package.json > /dev/null; then
                bun add "$pkg@$version"
              elif jq -e '.devDependencies["'$pkg'"]' package.json > /dev/null; then
                bun add -d "$pkg@$version"
              fi
            done
          else
            # Use npm to update dependencies
            for pkg in $(jq -r 'keys[]' minor-patch-updates.json); do
              version=$(jq -r ".\"$pkg\"" minor-patch-updates.json)
              if jq -e '.dependencies["'$pkg'"]' package.json > /dev/null; then
                npm install --save "$pkg@$version"
              elif jq -e '.devDependencies["'$pkg'"]' package.json > /dev/null; then
                npm install --save-dev "$pkg@$version"
              fi
            done
          fi

          # Check if there are actually changes to commit
          if git diff --quiet package.json; then
            echo "⚠️ No changes to package.json, nothing to commit"
          else
            # Format the updated package.json
            if command -v prettier > /dev/null && [ -f ".prettierrc" ]; then
              npx prettier --write package.json
            fi

            # Commit the changes
            git add package.json package-lock.json bun.lockb 2>/dev/null || git add package.json

            # Create detailed commit message
            UPDATE_LIST=$(jq -r 'to_entries | map("  - \(.key): \(.value)") | join("\n")' minor-patch-updates.json)
            COMMIT_MSG="deps: update dependencies with minor and patch updates\n\nUpdates the following dependencies:\n$UPDATE_LIST"

            git commit -m "$(echo -e "$COMMIT_MSG")"

            # Push the changes
            git push origin "$BRANCH_NAME"

            # Create PR
            PR_URL=$(curl -s -X POST \
              -H "Authorization: token ${{ secrets.PAT }}" \
              -H "Accept: application/vnd.github.v4+json" \
              https://api.github.com/repos/${{ github.repository }}/pulls \
              -d "{
                \"title\": \"deps: update minor and patch dependencies\",
                \"body\": \"Automated dependency updates for minor and patch versions.\n\nUpdated packages:\n$UPDATE_LIST\",
                \"head\": \"$BRANCH_NAME\",
                \"base\": \"$(git rev-parse --abbrev-ref origin/HEAD | sed 's|^origin/||')\"
              }" | jq -r '.html_url')

            echo "✅ Pull request created: $PR_URL"
            echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          fi

      - name: "🔄 Update GitHub Actions"
        if: env.CHECK_TYPE != 'npm' && steps.check-actions.outputs.actions_update_available == 'true' && env.DRY_RUN != 'true'
        id: update-actions
        run: |
          if [ ! -f "action_updates.csv" ] || [ ! -s "action_updates.csv" ]; then
            exit 0
          fi

          # Create a branch for updates
          BRANCH_NAME="action-updates-$(date +"%Y%m%d%H%M%S")"
          git checkout -b "$BRANCH_NAME"

          # Track changes
          UPDATED_ACTIONS=()
          UPDATED_FILES=()

          # Read the CSV file
          while IFS=, read -r ACTION_NAME ACTION_VERSION LATEST_VERSION FILE PUBLISHER; do
            if [ -z "$ACTION_NAME" ] || [ -z "$ACTION_VERSION" ] || [ -z "$LATEST_VERSION" ] || [ -z "$FILE" ]; then
              continue
            fi

            # Only update trusted actions
            if [[ "$PUBLISHER" == "trusted" ]]; then
              # Update the action version in the workflow file
              sed -i "s|uses: $ACTION_NAME@$ACTION_VERSION|uses: $ACTION_NAME@$LATEST_VERSION|g" "$FILE"

              # Track what we updated
              UPDATED_ACTIONS+=("$ACTION_NAME: $ACTION_VERSION → $LATEST_VERSION")

              # Add file to tracking if not already there
              if [[ ! " ${UPDATED_FILES[*]} " =~ " ${FILE} " ]]; then
                UPDATED_FILES+=("$FILE")
              fi
            fi
          done < action_updates.csv

          # Check if we have any updates
          if [ ${#UPDATED_ACTIONS[@]} -eq 0 ]; then
            exit 0
          fi

          # Commit the changes
          git add "${UPDATED_FILES[@]}"

          # Build commit message
          ACTIONS_LIST=$(printf "  - %s\n" "${UPDATED_ACTIONS[@]}")
          COMMIT_MSG="ci: update GitHub Actions to latest versions\n\nUpdated actions:\n$ACTIONS_LIST"

          git commit -m "$(echo -e "$COMMIT_MSG")"

          # Push the changes
          git push origin "$BRANCH_NAME"

          # Create PR
          PR_URL=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github.v4+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d "{
              \"title\": \"ci: update GitHub Actions to latest versions\",
              \"body\": \"Automated update of GitHub Actions.\n\nUpdated actions:\n$(printf \"- %s\n\" \"${UPDATED_ACTIONS[@]}\")\",
              \"head\": \"$BRANCH_NAME\",
              \"base\": \"$(git rev-parse --abbrev-ref origin/HEAD | sed 's|^origin/||')\"
            }" | jq -r '.html_url')

          echo "✅ Pull request created: $PR_URL"
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT

      - name: "📊 Generate Results Summary"
        if: always()
        run: |
          # Count of updates
          NPM_UPDATE_COUNT="${{ steps.check-npm.outputs.update_count || '0' }}"
          ACTIONS_UPDATE_COUNT="${{ steps.check-actions.outputs.actions_update_count || '0' }}"
          NPM_PR_URL="${{ steps.update-npm.outputs.pr_url || 'None' }}"
          ACTIONS_PR_URL="${{ steps.update-actions.outputs.pr_url || 'None' }}"

          {
            echo "# 📊 Dependency Update Summary"
            echo ""

            echo "## 🔍 Scan Results"
            echo ""
            echo "### 📦 NPM Packages"
            echo "- **$NPM_UPDATE_COUNT** package updates detected"
            if [ "$NPM_PR_URL" != "None" ]; then
              echo "- ✅ PR created: $NPM_PR_URL"
            elif [ "$NPM_UPDATE_COUNT" != "0" ] && [ "${{ env.DRY_RUN }}" == "true" ]; then
              echo "- ℹ️ Dry run mode enabled, no PR created"
            fi
            echo ""

            echo "### 🔄 GitHub Actions"
            echo "- **$ACTIONS_UPDATE_COUNT** action updates detected"
            if [ "$ACTIONS_PR_URL" != "None" ]; then
              echo "- ✅ PR created: $ACTIONS_PR_URL"
            elif [ "$ACTIONS_UPDATE_COUNT" != "0" ] && [ "${{ env.DRY_RUN }}" == "true" ]; then
              echo "- ℹ️ Dry run mode enabled, no PR created"
            fi
            echo ""

            if [ "${{ env.DRY_RUN }}" == "true" ]; then
              echo "## ℹ️ Dry Run Mode"
              echo "No actual updates were applied. This was just a scan."
            fi
          } > dependency_summary.md

          cat dependency_summary.md >> $GITHUB_STEP_SUMMARY
