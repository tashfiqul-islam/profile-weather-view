name: "🔍 Dependency Check & Update"

# ============================================================
# ⚡ Trigger Configuration
# ============================================================
on:
  workflow_dispatch:
    inputs:
      package_type:
        description: "Type of package updates"
        type: choice
        required: true
        default: "all"
        options:
          - "all"
          - "npm"
          - "github-actions"
      auto_merge:
        description: "Auto-merge eligible updates"
        type: boolean
        default: true
      only_security:
        description: "Only check for security updates"
        type: boolean
        default: false
      dry_run:
        description: "Dry run mode"
        type: boolean
        default: false
      pr_labels:
        description: "Additional PR labels (comma-separated)"
        type: string
        required: false
      include_major:
        description: "Include major version updates"
        type: boolean
        default: false

# ============================================================
# 🚫 Prevent Redundant Runs
# ============================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# ============================================================
# 🔒 Permissions (Least Privilege Principle)
# ============================================================
permissions:
  contents: write
  pull-requests: write
  security-events: write
  packages: read
  id-token: write # Required for GitHub OIDC token authentication

# ============================================================
# 🌍 Environment Variables
# ============================================================
env:
  CHECK_TYPE: ${{ github.event.inputs.package_type || 'all' }}
  AUTO_MERGE: ${{ github.event.inputs.auto_merge || 'true' }}
  SECURITY_ONLY: ${{ github.event.inputs.only_security || 'false' }}
  DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_OPTIONS: "--max-old-space-size=4096" # Increased memory limit for Node processes

# ============================================================
# 🔄 Jobs
# ============================================================
jobs:
  # Split into separate jobs for parallel execution
  analyze-project:
    name: "🔍 Analyze Project Structure"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      uses_bun: ${{ steps.analyze-config.outputs.uses_bun }}
      bun_version: ${{ steps.analyze-config.outputs.bun_version }}
      node_version: ${{ steps.detect-node.outputs.node_version }}
      default_branch: ${{ steps.branch-info.outputs.default_branch }}

    steps:
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # Reduced to improve checkout speed since we don't need history here

      - name: "🔍 Detect Node.js Version"
        id: detect-node
        run: |
          NODE_VERSION=$(jq -r '.engines.node // "18.x"' package.json 2>/dev/null || echo "18.x")
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "📊 Detected Node.js version: $NODE_VERSION"

      - name: "🔍 Analyze Project Configuration"
        id: analyze-config
        run: |
          # Check for Bun as package manager
          if jq -e '.packageManager | startswith("bun@")' package.json > /dev/null; then
            echo "uses_bun=true" >> $GITHUB_OUTPUT
            echo "bun_version=$(jq -r '.packageManager' package.json | sed 's/bun@//')" >> $GITHUB_OUTPUT
            echo "📊 Detected Bun package manager version: $(jq -r '.packageManager' package.json | sed 's/bun@//')"
          else
            echo "uses_bun=false" >> $GITHUB_OUTPUT
            echo "📊 Using NPM package manager"
          fi

      - name: "🌿 Get Default Branch"
        id: branch-info
        run: |
          DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
          echo "default_branch=${DEFAULT_BRANCH}" >> $GITHUB_OUTPUT
          echo "📊 Default branch: $DEFAULT_BRANCH"

  check-npm-deps:
    name: "🔍 Check NPM Dependencies"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: analyze-project
    if: ${{ github.event.inputs.package_type == 'all' || github.event.inputs.package_type == 'npm' }}
    outputs:
      updates_available: ${{ steps.check-npm.outputs.updates_available }}
      update_count: ${{ steps.check-npm.outputs.update_count }}
      security_vulnerabilities: ${{ steps.audit.outputs.vulnerabilities }}

    steps:
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "🔧 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.analyze-project.outputs.node_version }}
          cache: 'npm'

      - name: "🧰 Install npm-check-updates"
        run: |
          npm install -g npm-check-updates@latest

      - name: "🔍 Check npm Dependencies"
        id: check-npm
        run: |
          # Use npm-check-updates with improved parameters
          if [ "${{ env.SECURITY_ONLY }}" == "true" ]; then
            NCU_OUTPUT=$(npx npm-check-updates --jsonUpgraded --target newest --filterVersion="^[~^]" --loglevel error --errorLevel 0 2>/dev/null || echo "{}")
          else
            NCU_OUTPUT=$(npx npm-check-updates --jsonUpgraded --filterVersion="^[~^]" --loglevel error --errorLevel 0 2>/dev/null || echo "{}")
          fi

          UPDATE_COUNT=$(echo $NCU_OUTPUT | jq 'length')
          echo "🔹 Found $UPDATE_COUNT package updates available"

          # Save the list of updates for later with better formatting
          echo "$NCU_OUTPUT" > npm-updates.json

          if [ "$UPDATE_COUNT" -gt 0 ]; then
            echo "updates_available=true" >> $GITHUB_OUTPUT
            echo "update_count=$UPDATE_COUNT" >> $GITHUB_OUTPUT
          else
            echo "updates_available=false" >> $GITHUB_OUTPUT
            echo "update_count=0" >> $GITHUB_OUTPUT
          fi

      - name: "🔒 Audit for Security Vulnerabilities"
        id: audit
        if: needs.analyze-project.outputs.uses_bun == 'true'
        run: |
          # Using Bun audit if available
          curl -fsSL https://bun.sh/install | bash
          export BUN_INSTALL="$HOME/.bun"
          export PATH="$BUN_INSTALL/bin:$PATH"

          # Run audit and capture output
          AUDIT_RESULT=$(bun pm audit --json || true)
          VULN_COUNT=$(echo "$AUDIT_RESULT" | jq -r '.vulnerabilities | length')

          echo "vulnerabilities=$VULN_COUNT" >> $GITHUB_OUTPUT
          echo "$AUDIT_RESULT" > audit-results.json

          echo "🔒 Found $VULN_COUNT security vulnerabilities"

      - name: "🔒 NPM Audit for Security Vulnerabilities"
        id: npm-audit
        if: needs.analyze-project.outputs.uses_bun != 'true'
        run: |
          # Using npm audit for non-Bun projects
          AUDIT_RESULT=$(npm audit --json || true)
          VULN_COUNT=$(echo "$AUDIT_RESULT" | jq -r '.vulnerabilities | length // 0')

          echo "vulnerabilities=$VULN_COUNT" >> $GITHUB_OUTPUT
          echo "$AUDIT_RESULT" > audit-results.json

          echo "🔒 Found $VULN_COUNT security vulnerabilities"

      # Upload artifacts for later use
      - name: "📤 Upload Dependency Info"
        uses: actions/upload-artifact@v4
        with:
          name: npm-dependencies-info
          path: |
            npm-updates.json
            audit-results.json
          retention-days: 1

  check-github-actions:
    name: "🔍 Check GitHub Actions"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: analyze-project
    if: ${{ github.event.inputs.package_type == 'all' || github.event.inputs.package_type == 'github-actions' }}
    outputs:
      actions_update_available: ${{ steps.check-actions.outputs.actions_update_available }}
      actions_update_count: ${{ steps.check-actions.outputs.actions_update_count }}

    steps:
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "🧰 Setup GitHub CLI"
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: "🧰 Install GitHub CLI"
        run: |
          npm install -g @octokit/rest
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update -y
          sudo apt install -y gh
          gh --version
          gh auth login --with-token <<< "${{ env.GITHUB_TOKEN }}"

      - name: "🔍 Check GitHub Actions"
        id: check-actions
        run: |
          ACTION_UPDATES_AVAILABLE=false
          ACTION_UPDATE_COUNT=0

          # Create output file
          touch action_updates.csv
          echo "action_name,current_version,latest_version,file_path,publisher,is_major,is_verified" > action_updates.csv

          # Function to check a workflow file for outdated actions with improved reliability
          check_workflow_file() {
            local file="$1"

            # Extract all GitHub Actions uses statements with improved regex
            ACTIONS=$(grep -E 'uses:\s+[a-zA-Z0-9_\-\.\/]+@[a-zA-Z0-9_\-\.v]+' "$file" || echo "")

            # Check each action
            while IFS= read -r ACTION; do
              # Skip empty lines
              [ -z "$ACTION" ] && continue

              # Extract name and version with improved parsing
              ACTION_NAME=$(echo "$ACTION" | sed -E 's/uses:\s+([^@]+)@.*/\1/' | xargs)
              ACTION_VERSION=$(echo "$ACTION" | sed -E 's/uses:\s+[^@]+@(.*)/\1/' | xargs)

              # Skip if not a proper version reference
              if [[ ! "$ACTION_VERSION" =~ ^v?[0-9]+(\.[0-9]+)*$ ]]; then
                continue
              fi

              echo "Checking action: $ACTION_NAME@$ACTION_VERSION"

              # Determine if this is a trusted action with additional checks
              PUBLISHER="unknown"
              IS_VERIFIED="false"
              if [[ "$ACTION_NAME" =~ ^github/ || "$ACTION_NAME" =~ ^actions/ ]]; then
                PUBLISHER="trusted"
              fi

              # Check if action is verified (has a verified badge)
              if gh api "repos/$ACTION_NAME" --jq '.owner.type' 2>/dev/null | grep -q "Organization"; then
                IS_VERIFIED="true"
              fi

              # Get latest release with rate limiting and retry
              if [[ "$ACTION_NAME" =~ ^[a-zA-Z0-9_\-]+/[a-zA-Z0-9_\-]+$ ]]; then
                # Try up to 3 times with backoff
                for attempt in {1..3}; do
                  LATEST_VERSION=$(gh api "repos/$ACTION_NAME/releases/latest" --jq '.tag_name' 2>/dev/null)

                  if [ -n "$LATEST_VERSION" ] && [ "$LATEST_VERSION" != "null" ]; then
                    break
                  fi

                  # Backoff before retry
                  sleep $(( attempt * 2 ))
                done

                # Clean up version strings for comparison (remove 'v' prefix if present)
                CLEAN_CURRENT=$(echo "$ACTION_VERSION" | sed 's/^v//')
                CLEAN_LATEST=$(echo "$LATEST_VERSION" | sed 's/^v//')

                # Skip if we couldn't get a valid latest version
                if [ -z "$CLEAN_LATEST" ] || [ "$CLEAN_LATEST" = "null" ]; then
                  continue
                fi

                # Determine if this is a major version change
                IS_MAJOR="false"
                CURRENT_MAJOR=$(echo "$CLEAN_CURRENT" | cut -d. -f1)
                LATEST_MAJOR=$(echo "$CLEAN_LATEST" | cut -d. -f1)

                if [ "$LATEST_MAJOR" -gt "$CURRENT_MAJOR" ]; then
                  IS_MAJOR="true"
                fi

                if [ "$CLEAN_LATEST" != "$CLEAN_CURRENT" ]; then
                  echo "$ACTION_NAME,$ACTION_VERSION,$LATEST_VERSION,$file,$PUBLISHER,$IS_MAJOR,$IS_VERIFIED" >> action_updates.csv
                  ACTION_UPDATES_AVAILABLE=true
                  ACTION_UPDATE_COUNT=$((ACTION_UPDATE_COUNT + 1))
                  echo "✅ Update available: $ACTION_NAME from $ACTION_VERSION to $LATEST_VERSION"
                fi
              fi
            done <<< "$ACTIONS"
          }

          # Check all workflow files
          echo "🔍 Scanning workflow files for outdated actions..."
          for FILE in .github/workflows/*.yml; do
            [ -f "$FILE" ] && check_workflow_file "$FILE"
          done

          # Set outputs
          echo "actions_update_available=$ACTION_UPDATES_AVAILABLE" >> $GITHUB_OUTPUT
          echo "actions_update_count=$ACTION_UPDATE_COUNT" >> $GITHUB_OUTPUT
          echo "🔹 Found $ACTION_UPDATE_COUNT GitHub Action updates available"

      # Upload artifacts for later use
      - name: "📤 Upload Actions Info"
        uses: actions/upload-artifact@v4
        with:
          name: github-actions-info
          path: action_updates.csv
          retention-days: 1

  update-dependencies:
    name: "🔄 Update Dependencies"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [analyze-project, check-npm-deps, check-github-actions]
    outputs:
      npm_pr_url: ${{ steps.update-npm.outputs.npm_pr_url }}
      npm_pr_number: ${{ steps.update-npm.outputs.npm_pr_number }}
      actions_pr_url: ${{ steps.update-actions.outputs.pr_url }}
      actions_pr_number: ${{ steps.update-actions.outputs.pr_number }}
    if: |
      github.event.inputs.dry_run != 'true' &&
      (needs.check-npm-deps.outputs.updates_available == 'true' ||
       needs.check-github-actions.outputs.actions_update_available == 'true')

    steps:
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for branch operations

      - name: "🔧 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.analyze-project.outputs.node_version }}
          cache: 'npm'

      - name: "🧰 Install Tools"
        run: |
          npm install -g npm-check-updates@latest
          sudo apt-get update -qq && sudo apt-get install -qq -y jq curl

      - name: "📥 Download Artifacts"
        uses: actions/download-artifact@v4
        with:
          name: npm-dependencies-info
          path: ./npm-info

      - name: "📥 Download Actions Info"
        uses: actions/download-artifact@v4
        with:
          name: github-actions-info
          path: ./actions-info

      - name: "🔐 Setup Git"
        id: git-setup
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          echo "::notice::Configured Git for automatic commits"

      - name: "⚙️ Setup Bun"
        if: needs.analyze-project.outputs.uses_bun == 'true'
        run: |
          curl -fsSL https://bun.sh/install | bash
          export BUN_INSTALL="$HOME/.bun"
          export PATH="$BUN_INSTALL/bin:$PATH"
          bun --version
          echo "::notice::Installed Bun $(bun --version)"

      - name: "🔄 Update NPM Dependencies"
        if: needs.check-npm-deps.outputs.updates_available == 'true' && (env.CHECK_TYPE == 'all' || env.CHECK_TYPE == 'npm')
        id: update-npm
        run: |
          # Navigate to NPM info directory
          cd ./npm-info

          # Read the update data with better error handling
          if [ -f "npm-updates.json" ]; then
            UPDATES=$(cat npm-updates.json)
          else
            echo "::error::npm-updates.json not found"
            exit 1
          fi

          cd ..

          # Create a temporary file for filtered updates
          echo "{}" > minor-patch-updates.json

          # Filter updates to include only minor and patch versions
          MINOR_PATCH_COUNT=0

          # Loop through each package with improved error handling
          for pkg in $(echo "$UPDATES" | jq -r 'keys[]' 2>/dev/null || echo ""); do
            [ -z "$pkg" ] && continue

            # Get current version from package.json
            if jq -e '.dependencies["'$pkg'"]' package.json > /dev/null 2>&1; then
              CURRENT=$(jq -r '.dependencies["'$pkg'"]' package.json | sed 's/[\^~=]//g')
            elif jq -e '.devDependencies["'$pkg'"]' package.json > /dev/null 2>&1; then
              CURRENT=$(jq -r '.devDependencies["'$pkg'"]' package.json | sed 's/[\^~=]//g')
            else
              continue
            fi

            # Get target version from updates
            TARGET=$(echo "$UPDATES" | jq -r ".\"$pkg\"")

            # Skip invalid versions
            if [ -z "$CURRENT" ] || [ "$CURRENT" = "null" ] || [ -z "$TARGET" ] || [ "$TARGET" = "null" ]; then
              continue
            fi

            # Extract major.minor.patch
            CURRENT_MAJOR=$(echo "$CURRENT" | sed -E 's/^([0-9]+)\..*/\1/')
            CURRENT_MINOR=$(echo "$CURRENT" | sed -E 's/^[0-9]+\.([0-9]+)\..*/\1/')
            TARGET_MAJOR=$(echo "$TARGET" | sed -E 's/^([0-9]+)\..*/\1/')
            TARGET_MINOR=$(echo "$TARGET" | sed -E 's/^[0-9]+\.([0-9]+)\..*/\1/')

            # Only include minor or patch updates
            if [ "$TARGET_MAJOR" = "$CURRENT_MAJOR" ]; then
              jq --arg pkg "$pkg" --arg ver "$TARGET" '.[$pkg] = $ver' minor-patch-updates.json > tmp.json && mv tmp.json minor-patch-updates.json
              MINOR_PATCH_COUNT=$((MINOR_PATCH_COUNT + 1))
            fi
          done

          echo "🔹 Found $MINOR_PATCH_COUNT minor/patch updates to apply"
          echo "minor_patch_count=$MINOR_PATCH_COUNT" >> $GITHUB_OUTPUT

          if [ "$MINOR_PATCH_COUNT" -eq 0 ]; then
            exit 0
          fi

          # Create a new branch for the updates with timestamp in UTC
          BRANCH_NAME="deps-update-$(date -u +"%Y%m%d%H%M%S")"
          git checkout -b "$BRANCH_NAME"

          # Apply the updates with better error handling
          if [ "${{ needs.analyze-project.outputs.uses_bun }}" == "true" ]; then
            # Use Bun to update dependencies
            for pkg in $(jq -r 'keys[]' minor-patch-updates.json); do
              version=$(jq -r ".\"$pkg\"" minor-patch-updates.json)
              echo "🔄 Updating $pkg to $version"

              if jq -e '.dependencies["'$pkg'"]' package.json > /dev/null 2>&1; then
                bun add "$pkg@$version"
              elif jq -e '.devDependencies["'$pkg'"]' package.json > /dev/null 2>&1; then
                bun add -d "$pkg@$version"
              fi
            done
          else
            # Use npm to update dependencies with improved install flags
            for pkg in $(jq -r 'keys[]' minor-patch-updates.json); do
              version=$(jq -r ".\"$pkg\"" minor-patch-updates.json)
              echo "🔄 Updating $pkg to $version"

              if jq -e '.dependencies["'$pkg'"]' package.json > /dev/null 2>&1; then
                npm install --save --save-exact "$pkg@$version"
              elif jq -e '.devDependencies["'$pkg'"]' package.json > /dev/null 2>&1; then
                npm install --save-dev --save-exact "$pkg@$version"
              fi
            done
          fi

          # Check if there are actually changes to commit
          if git diff --quiet package.json; then
            echo "⚠️ No changes to package.json, nothing to commit"
          else
            # Format the updated package.json if prettier is available
            if [ -f "node_modules/.bin/prettier" ] || command -v prettier > /dev/null; then
              npx prettier --write package.json
            fi

            # Commit the changes with better lockfile handling
            if [ "${{ needs.analyze-project.outputs.uses_bun }}" == "true" ]; then
              git add package.json bun.lockb
            else
              git add package.json package-lock.json
            fi

            # Create detailed commit message with conventional commits format
            UPDATE_LIST=$(jq -r 'to_entries | map("  - \(.key): \(.value)") | join("\n")' minor-patch-updates.json)
            COMMIT_MSG="deps: update dependencies with minor and patch updates\n\nUpdates the following dependencies:\n$UPDATE_LIST"

            git commit -m "$(echo -e "$COMMIT_MSG")"

            # Push the changes with retry logic
            for i in {1..3}; do
              if git push origin "$BRANCH_NAME"; then
                break
              else
                echo "::warning::Push attempt $i failed, retrying..."
                sleep 5
              fi
            done

            # Parse additional PR labels from input
            ADDITIONAL_LABELS=""
            if [ -n "${{ github.event.inputs.pr_labels }}" ]; then
              IFS=',' read -ra LABEL_ARRAY <<< "${{ github.event.inputs.pr_labels }}"
              for label in "${LABEL_ARRAY[@]}"; do
                ADDITIONAL_LABELS="$ADDITIONAL_LABELS,\"$(echo "$label" | xargs)\""
              done
            fi

            # Remove leading comma if present
            ADDITIONAL_LABELS="${ADDITIONAL_LABELS#,}"

            # Create base label JSON
            LABELS_JSON='"dependencies", "npm", "automated"'

            # Add additional labels if present
            if [ -n "$ADDITIONAL_LABELS" ]; then
              LABELS_JSON="$LABELS_JSON, $ADDITIONAL_LABELS"
            fi

            # Create PR with improved reliability
            PR_BODY="Automated dependency updates for minor and patch versions.\n\n### Updated packages:\n$UPDATE_LIST"

            if [ -f "./npm-info/audit-results.json" ]; then
              VULN_COUNT=$(jq -r '.vulnerabilities | length // 0' ./npm-info/audit-results.json)
              if [ "$VULN_COUNT" -gt 0 ]; then
                PR_BODY="$PR_BODY\n\n⚠️ **Security Notice:** $VULN_COUNT vulnerabilities were found during audit. Please review carefully."
              fi
            fi

            # Add auto-merge setting if enabled
            AUTO_MERGE_FLAG=""
            if [ "${{ env.AUTO_MERGE }}" == "true" ]; then
              AUTO_MERGE_FLAG=',
                "auto_merge": true,
                "merge_method": "squash"'
            fi

            # Create PR with GraphQL instead of REST for better control
            PR_QUERY='{
              "query": "mutation($input:CreatePullRequestInput!) { createPullRequest(input:$input) { pullRequest { number url } } }",
              "variables": {
                "input": {
                  "repositoryId": "'$(gh api repos/${{ github.repository }} --jq .node_id)'",
                  "baseRefName": "'${{ needs.analyze-project.outputs.default_branch }}'",
                  "headRefName": "'$BRANCH_NAME'",
                  "title": "deps: update minor and patch dependencies",
                  "body": "'"$PR_BODY"'",
                  "draft": false
                }
              }
            }'

            PR_RESULT=$(gh api graphql -f query="$PR_QUERY")
            PR_URL=$(echo "$PR_RESULT" | jq -r '.data.createPullRequest.pullRequest.url')
            PR_NUMBER=$(echo "$PR_RESULT" | jq -r '.data.createPullRequest.pullRequest.number')

            # Add labels through REST API after PR creation
            gh api -X POST repos/${{ github.repository }}/issues/$PR_NUMBER/labels \
              --input <(echo '{"labels": ['$LABELS_JSON']}')

            # Enable auto-merge if requested
            if [ "${{ env.AUTO_MERGE }}" == "true" ]; then
              gh pr merge $PR_NUMBER --auto --squash
              echo "::notice::Enabled auto-merge for PR #$PR_NUMBER"
            fi

            echo "✅ Pull request created: $PR_URL"
            echo "npm_pr_url=$PR_URL" >> $GITHUB_OUTPUT
            echo "npm_pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          fi

      - name: "🔄 Update GitHub Actions"
        if: (env.CHECK_TYPE == 'all' || env.CHECK_TYPE == 'github-actions') && needs.check-github-actions.outputs.actions_update_available == 'true'
        id: update-actions
        run: |
          cd ./actions-info

          if [ ! -f "action_updates.csv" ] || [ ! -s "action_updates.csv" ]; then
            echo "::warning::No action updates found in CSV"
            exit 0
          fi

          cd ..

          # Create a branch for updates with UTC timestamp
          BRANCH_NAME="action-updates-$(date -u +"%Y%m%d%H%M%S")"
          git checkout -b "$BRANCH_NAME"

          # Track changes
          UPDATED_ACTIONS=()
          UPDATED_FILES=()

          # Read the CSV file with better error handling
          sed 1d ./actions-info/action_updates.csv | while IFS=, read -r ACTION_NAME ACTION_VERSION LATEST_VERSION FILE PUBLISHER IS_MAJOR IS_VERIFIED; do
            if [ -z "$ACTION_NAME" ] || [ -z "$ACTION_VERSION" ] || [ -z "$LATEST_VERSION" ] || [ -z "$FILE" ]; then
              continue
            fi

            # Skip major version updates unless explicitly allowed
            if [ "$IS_MAJOR" == "true" ] && [ "${{ github.event.inputs.include_major }}" != "true" ]; then
              echo "⚠️ Skipping major version update for $ACTION_NAME: $ACTION_VERSION → $LATEST_VERSION"
              continue
            fi

            # Update the action version in the workflow file
            echo "🔄 Updating $ACTION_NAME from $ACTION_VERSION to $LATEST_VERSION in $FILE"
            sed -i "s|uses: $ACTION_NAME@$ACTION_VERSION|uses: $ACTION_NAME@$LATEST_VERSION|g" "$FILE"

            # Track what we updated
            UPDATED_ACTIONS+=("$ACTION_NAME: $ACTION_VERSION → $LATEST_VERSION")

            # Add file to tracking if not already there
            if [[ ! " ${UPDATED_FILES[*]} " =~ " ${FILE} " ]]; then
              UPDATED_FILES+=("$FILE")
            fi
          done

          # Check if we have any updates
          if [ ${#UPDATED_ACTIONS[@]} -eq 0 ]; then
            echo "::warning::No actions were updated"
            exit 0
          fi

          # Commit the changes
          git add "${UPDATED_FILES[@]}"

          # Build commit message using conventional commits format
          ACTIONS_LIST=$(printf "  - %s\n" "${UPDATED_ACTIONS[@]}")
          COMMIT_MSG="ci: update GitHub Actions to latest versions\n\nUpdated actions:\n$ACTIONS_LIST"

          git commit -m "$(echo -e "$COMMIT_MSG")"

          # Push the changes with retry logic
          for i in {1..3}; do
            if git push origin "$BRANCH_NAME"; then
              break
            else
              echo "::warning::Push attempt $i failed, retrying..."
              sleep 5
            fi
          done

          # Parse additional PR labels from input
          ADDITIONAL_LABELS=""
          if [ -n "${{ github.event.inputs.pr_labels }}" ]; then
            IFS=',' read -ra LABEL_ARRAY <<< "${{ github.event.inputs.pr_labels }}"
            for label in "${LABEL_ARRAY[@]}"; do
              ADDITIONAL_LABELS="$ADDITIONAL_LABELS,\"$(echo "$label" | xargs)\""
            done
          fi

          # Remove leading comma if present
          ADDITIONAL_LABELS="${ADDITIONAL_LABELS#,}"

          # Create base label JSON
          LABELS_JSON='"dependencies", "github-actions", "ci", "automated"'

          # Add additional labels if present
          if [ -n "$ADDITIONAL_LABELS" ]; then
            LABELS_JSON="$LABELS_JSON, $ADDITIONAL_LABELS"
          fi

          # Create PR with GraphQL instead of REST API
          PR_BODY="Automated update of GitHub Actions to their latest versions.\n\n### Updated Actions:\n$(printf "- %s\n" "${UPDATED_ACTIONS[@]}")"

          PR_QUERY='{
            "query": "mutation($input:CreatePullRequestInput!) { createPullRequest(input:$input) { pullRequest { number url } } }",
            "variables": {
              "input": {
                "repositoryId": "'$(gh api repos/${{ github.repository }} --jq .node_id)'",
                "baseRefName": "'${{ needs.analyze-project.outputs.default_branch }}'",
                "headRefName": "'$BRANCH_NAME'",
                "title": "ci: update GitHub Actions to latest versions",
                "body": "'"$PR_BODY"'",
                "draft": false
              }
            }
          }'

          PR_RESULT=$(gh api graphql -f query="$PR_QUERY")
          PR_URL=$(echo "$PR_RESULT" | jq -r '.data.createPullRequest.pullRequest.url')
          PR_NUMBER=$(echo "$PR_RESULT" | jq -r '.data.createPullRequest.pullRequest.number')

          # Add labels through REST API after PR creation
          gh api -X POST repos/${{ github.repository }}/issues/$PR_NUMBER/labels \
            --input <(echo '{"labels": ['$LABELS_JSON']}')

          # Enable auto-merge if requested
          if [ "${{ env.AUTO_MERGE }}" == "true" ]; then
            gh pr merge $PR_NUMBER --auto --squash
            echo "::notice::Enabled auto-merge for PR #$PR_NUMBER"
          fi

          echo "✅ Pull request created: $PR_URL"
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

  generate-report:
    name: "📊 Generate Dependency Report"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [analyze-project, check-npm-deps, check-github-actions, update-dependencies]
    if: always() # Run even if previous jobs failed

    steps:
      - name: "📥 Download Artifacts"
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: "📊 Generate Results Summary"
        run: |
          # Count of updates with better handling of missing data
          NPM_UPDATE_COUNT="${{ needs.check-npm-deps.outputs.update_count || '0' }}"
          ACTIONS_UPDATE_COUNT="${{ needs.check-github-actions.outputs.actions_update_count || '0' }}"
          NPM_PR_URL="${{ needs.update-dependencies.result == 'success' && needs.update-dependencies.outputs.npm_pr_url || 'None' }}"
          ACTIONS_PR_URL="${{ needs.update-dependencies.result == 'success' && needs.update-dependencies.outputs.actions_pr_url || 'None' }}"

          # Check for vulnerabilities in audit results
          VULN_COUNT=0
          if [ -f "audit-results.json" ]; then
            VULN_COUNT=$(jq -r '.vulnerabilities | length // 0' audit-results.json)
          fi

          # Generate enhanced report with more details
          {
            echo "# 📊 Dependency Update Summary"
            echo ""

            echo "## 🔍 Scan Results"
            echo ""
            echo "### 📦 NPM Packages"
            echo "- **$NPM_UPDATE_COUNT** package updates detected"

            if [ "$NPM_PR_URL" != "None" ]; then
              echo "- ✅ PR created: $NPM_PR_URL"
            elif [ "$NPM_UPDATE_COUNT" != "0" ] && [ "${{ env.DRY_RUN }}" == "true" ]; then
              echo "- ℹ️ Dry run mode enabled, no PR created"
            fi

            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "- ⚠️ **$VULN_COUNT** security vulnerabilities detected in current dependencies"
            fi
            echo ""

            echo "### 🔄 GitHub Actions"
            echo "- **$ACTIONS_UPDATE_COUNT** action updates detected"
            if [ "$ACTIONS_PR_URL" != "None" ]; then
              echo "- ✅ PR created: $ACTIONS_PR_URL"
            elif [ "$ACTIONS_UPDATE_COUNT" != "0" ] && [ "${{ env.DRY_RUN }}" == "true" ]; then
              echo "- ℹ️ Dry run mode enabled, no PR created"
            fi
            echo ""

            if [ -f "npm-updates.json" ] && [ "$NPM_UPDATE_COUNT" != "0" ]; then
              echo "### 📋 NPM Package Details"
              jq -r 'to_entries | map("- **\(.key)**: \(.value)") | join("\n")' npm-updates.json
              echo ""
            fi

            if [ -f "action_updates.csv" ] && [ "$ACTIONS_UPDATE_COUNT" != "0" ]; then
              echo "### 📋 GitHub Actions Details"
              echo "| Action | Current Version | Latest Version | File |"
              echo "| ------ | --------------- | -------------- | ---- |"
              sed 1d action_updates.csv | while IFS=, read -r ACTION_NAME ACTION_VERSION LATEST_VERSION FILE PUBLISHER IS_MAJOR IS_VERIFIED; do
                echo "| $ACTION_NAME | $ACTION_VERSION | $LATEST_VERSION | $FILE |"
              done
              echo ""
            fi

            if [ "${{ env.DRY_RUN }}" == "true" ]; then
              echo "## ℹ️ Dry Run Mode"
              echo "No actual updates were applied. This was just a scan."
            fi

            echo "## 🔁 Next Steps"
            echo "- Dependencies are updated automatically according to your configuration"
            echo "- If auto-merge is enabled, PRs will be merged when CI checks pass"
            echo "- You can manually trigger this workflow again to check for new updates"
          } > dependency_summary.md

          cat dependency_summary.md >> $GITHUB_STEP_SUMMARY
