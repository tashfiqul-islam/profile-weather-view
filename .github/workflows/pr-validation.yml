name: "🧪 Pull Request Validation"

# ============================================================
# ⚡ Trigger Configuration
# ============================================================
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - 'master'
      - 'main'
    paths-ignore:
      - '**.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'
      - 'image/**'
  # Allow manual trigger for debugging
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to validate"
        required: true
        type: number

# ============================================================
# 🚫 Prevent Redundant Runs
# ============================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

# ============================================================
# 🔒 Permissions (Least Privilege Principle)
# ============================================================
permissions:
  contents: read     # For checkout
  checks: write      # For test results
  pull-requests: write  # For comments
  id-token: write    # For OIDC token
  security-events: write  # For CodeQL results

# ============================================================
# 🌍 Environment Variables
# ============================================================
env:
  NODE_ENV: "test"
  CI: "true"
  BUN_RUNTIME_SAFETY: "true"
  VITEST_SEGFAULT_RETRY: 3

# ============================================================
# 🔄 Jobs
# ============================================================
jobs:
  # Advanced CodeQL Analysis for security scanning
  codeql-analysis:
    name: "🔒 CodeQL Security Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 15

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']
        # CodeQL supports ['cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift']

    steps:
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Initializes the CodeQL tools for scanning
      - name: "🔍 Initialize CodeQL"
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-extended,security-and-quality

      # Autobuild attempts to build any compiled languages
      - name: "🔨 Autobuild"
        uses: github/codeql-action/autobuild@v3

      - name: "🔍 Perform CodeQL Analysis"
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # SonarQube Analysis for code quality and security
  sonarqube-analysis:
    name: "🔍 SonarQube Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for SonarQube to get full history for proper analysis

      - name: "🧰 Setup JDK 21"
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: "🧰 Setup Bun Runtime"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: "📦 Install Dependencies"
        run: bun install

      - name: "📊 Generate Coverage Report"
        run: bun run test:coverage

      - name: "🔍 SonarQube Scan"
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}
            -Dsonar.projectName=${{ github.repository_owner }}_${{ github.event.repository.name }}
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.sources=src/
            -Dsonar.tests=src/__tests__/
            -Dsonar.exclusions=**/node_modules/**,**/*.test.ts,**/*.spec.ts,**/*.benchmark.ts,src/__tests__/**
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}

      - name: "📝 SonarQube Quality Gate Check"
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  quality-validation:
    name: "🧪 Quality Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [codeql-analysis, sonarqube-analysis]

    # Add SLSA provenance for CI/CD supply chain security
    outputs:
      test-passed: ${{ steps.test-results.outputs.test_passed }}
      validation-report: ${{ steps.final-report.outputs.validation_report }}

    steps:
      # -------------------------------------------------------
      # 🔐 Security Verification
      # -------------------------------------------------------
      - name: "🛡️ Validate Workflow Context"
        id: security-check
        run: |
          echo "::group::Security Verification"
          echo "🔹 Verifying workflow origin"
          echo "🔹 Checking PR source safety"
          echo "🔹 Validating user permissions"
          echo "::endgroup::"

      # -------------------------------------------------------
      # 📋 Setup
      # -------------------------------------------------------
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper checks
          persist-credentials: false  # Security best practice

      - name: "🔍 Initialize Workflow"
        id: init
        run: |
          echo "::group::Environment Information"
          echo "🔹 Repository: ${{ github.repository }}"
          echo "🔹 PR: #${{ github.event.pull_request.number || inputs.pr_number }} - ${{ github.event.pull_request.title || 'Manual run' }}"
          echo "🔹 Branch: ${{ github.head_ref || 'unknown' }} → ${{ github.base_ref || 'master' }}"
          echo "🔹 Commit: ${{ github.event.pull_request.head.sha || github.sha }}"
          echo "🔹 Action Version: 2.0.0"
          echo "::endgroup::"

          # Extract Bun version from package.json
          BUN_VERSION=$(node -e "try { const pkg = require('./package.json'); const pm = pkg.packageManager || ''; const version = pm.match(/bun@(.*)/); console.log(version ? version[1] : '1.2.10'); } catch (e) { console.log('1.2.10'); }")
          echo "bun_version=${BUN_VERSION}" >> $GITHUB_OUTPUT

          # Log PR information for better traceability
          {
            echo "pr_number=${{ github.event.pull_request.number || inputs.pr_number }}"
            echo "pr_title=${{ github.event.pull_request.title || 'Manual validation' }}"
            echo "pr_author=${{ github.event.pull_request.user.login || github.actor }}"
          } >> $GITHUB_OUTPUT

      # -------------------------------------------------------
      # ⚙️ Runtime Setup
      # -------------------------------------------------------
      - name: "🧰 Setup Bun Runtime"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ steps.init.outputs.bun_version }}

      - name: "📦 Install Dependencies"
        id: deps
        run: |
          echo "::group::Dependency Installation"
          # Check if we have a lockfile first
          if [ -f "bun.lockb" ]; then
            echo "🔹 Installing with frozen lockfile"
            bun install --frozen-lockfile
          else
            echo "⚠️ No lockfile found, doing regular install"
            bun install
          fi

          # Verify signature integrity (supply chain security)
          bun audit signatures
          echo "::endgroup::"

      # -------------------------------------------------------
      # 🔍 Static Analysis
      # -------------------------------------------------------
      - name: "🔍 Code Quality Checks"
        run: |
          echo "::group::Static Analysis"
          echo "Running ESLint..."
          bun run lint
          echo "::endgroup::"

      - name: "📝 TypeScript Validation"
        run: |
          echo "::group::Type Checking"
          bun run type-check
          echo "::endgroup::"

      # -------------------------------------------------------
      # 🧪 Run Tests & Validation
      # -------------------------------------------------------
      - name: "🧪 Execute Test Suite"
        id: test-execution
        run: |
          echo "::group::Test Execution"
          echo "Running tests with coverage..."
          bun run test:ci
          TEST_EXIT_CODE=$?
          echo "test_exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: "📊 Process Test Results"
        id: test-results
        if: always()
        run: |
          echo "::group::Test Results Processing"
          if [ -f "test-results/junit.xml" ]; then
            echo "✅ Test results file found"
            TEST_COUNT=$(grep -c "<testcase" test-results/junit.xml || echo "0")
            FAIL_COUNT=$(grep -c "<failure" test-results/junit.xml || echo "0")
            SKIP_COUNT=$(grep -c "<skipped" test-results/junit.xml || echo "0")
            PASS_COUNT=$((TEST_COUNT - FAIL_COUNT - SKIP_COUNT))

            echo "📊 Test summary: $PASS_COUNT passed, $FAIL_COUNT failed, $SKIP_COUNT skipped"
            echo "test_count=$TEST_COUNT" >> $GITHUB_OUTPUT
            echo "pass_count=$PASS_COUNT" >> $GITHUB_OUTPUT
            echo "fail_count=$FAIL_COUNT" >> $GITHUB_OUTPUT
            echo "skip_count=$SKIP_COUNT" >> $GITHUB_OUTPUT

            if [ "$FAIL_COUNT" -eq 0 ]; then
              echo "test_passed=true" >> $GITHUB_OUTPUT
            else
              echo "test_passed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ No test results file found"
            echo "test_passed=false" >> $GITHUB_OUTPUT
            echo "test_count=0" >> $GITHUB_OUTPUT
            echo "pass_count=0" >> $GITHUB_OUTPUT
            echo "fail_count=0" >> $GITHUB_OUTPUT
            echo "skip_count=0" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"

      - name: "📊 Publish Test Results"
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: test-results/junit.xml
          comment_mode: always
          comment_title: "📊 Test Results"

      # -------------------------------------------------------
      # 📄 Code Style & Convention Validation
      # -------------------------------------------------------
      - name: "🔍 Validate Conventional Commits"
        id: commit-validation
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            security
          requireScope: false
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: "The subject must not start with an uppercase letter"

      # -------------------------------------------------------
      # 🔒 Security Analysis
      # -------------------------------------------------------
      - name: "🔒 Dependency Security Scan"
        id: security-scan
        continue-on-error: true
        run: |
          echo "::group::Security Scanning"
          echo "Scanning dependencies for vulnerabilities..."
          if ! bun audit --prod; then
            echo "sec_issues_found=true" >> $GITHUB_OUTPUT
            echo "⚠️ Security issues found in dependencies"
          else
            echo "sec_issues_found=false" >> $GITHUB_OUTPUT
            echo "✅ No security issues found"
          fi
          echo "::endgroup::"

      # -------------------------------------------------------
      # 🔍 Secret Scanning
      # -------------------------------------------------------
      - name: "🔍 Secret Scanning"
        id: secret-scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml
          pre-commit: false
          verbose: true
          report-format: sarif
          report-path: gitleaks-report.sarif
        continue-on-error: true  # Don't fail the workflow, but flag the issues

      - name: "📤 Upload Secret Scanning Report"
        if: always() && steps.secret-scan.outcome == 'success'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gitleaks-report.sarif
          category: secret-scanning

      # -------------------------------------------------------
      # 📋 License Compliance Check
      # -------------------------------------------------------
      - name: "📋 License Compliance Check"
        id: license-check
        run: |
          echo "::group::License Compliance Scanning"
          echo "Analyzing dependency licenses..."

          # Install license checker
          bun install --no-save license-checker-rseidelsohn

          # Generate license report
          npx license-checker-rseidelsohn --production --json --out license-report.json

          # Check for disallowed licenses (customize this list as needed)
          DISALLOWED_LICENSES=("GPL" "AGPL" "LGPL")
          LICENSE_ISSUES=0

          for license in "${DISALLOWED_LICENSES[@]}"; do
            if grep -q "$license" license-report.json; then
              echo "⚠️ Found potentially problematic license: $license"
              LICENSE_ISSUES=$((LICENSE_ISSUES + 1))
            fi
          done

          if [ "$LICENSE_ISSUES" -gt 0 ]; then
            echo "license
