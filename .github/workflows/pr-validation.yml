name: "🧪 Pull Request Validation"

# ============================================================
# ⚡ Trigger Configuration
# ============================================================
on:
  # Validate PRs to master branch
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - 'master'
    paths-ignore:
      - '**.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'
      - 'image/**'
  # Run on push to master branch for CodeQL analysis
  push:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'
      - '.github/ISSUE_TEMPLATE/**'
      - 'image/**'
  # Allow manual trigger for debugging
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to validate"
        required: true
        type: number

# ============================================================
# 🚫 Prevent Redundant Runs
# ============================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

# ============================================================
# 🔒 Permissions (Least Privilege Principle)
# ============================================================
permissions:
  contents: read     # For checkout
  checks: write      # For test results
  pull-requests: write  # For comments
  id-token: write    # For OIDC token
  security-events: write  # For CodeQL results

# ============================================================
# 🌍 Environment Variables
# ============================================================
env:
  NODE_ENV: "test"
  CI: "true"
  BUN_RUNTIME_SAFETY: "true"
  VITEST_SEGFAULT_RETRY: 3

# ============================================================
# 🔄 Jobs
# ============================================================
jobs:
  # Advanced CodeQL Analysis for security scanning
  codeql-analysis:
    name: "🔒 CodeQL Security Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 15

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['typescript']

    steps:
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Initializes the CodeQL tools for scanning
      - name: "🔍 Initialize CodeQL"
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-extended,security-and-quality

      # Autobuild attempts to build any compiled languages
      - name: "🔨 Autobuild"
        uses: github/codeql-action/autobuild@v3

      - name: "🔍 Perform CodeQL Analysis"
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # SonarQube Analysis for code quality and security
  sonarqube-analysis:
    name: "🔍 SonarQube Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for SonarQube to get full history for proper analysis

      - name: "🧰 Setup JDK 21"
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: "🧰 Setup Bun Runtime"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: "📦 Install Dependencies"
        run: bun install

      - name: "📊 Generate Coverage Report"
        run: bun run test:coverage

      - name: "🔍 SonarQube Scan"
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          GITHUB_SHA: ${{ github.sha }}
          SONAR_SCANNER_OPTS: "-Dproject.settings=./sonar-project.properties -Dsonar.scanner.metadataFilePath=${{ github.workspace }}/.scannerwork/report-task.txt"

      - name: "📝 SonarQube Quality Gate Check"
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  quality-validation:
    name: "🧪 Quality Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [codeql-analysis, sonarqube-analysis]

    # Add SLSA provenance for CI/CD supply chain security
    outputs:
      test-passed: ${{ steps.test-results.outputs.test_passed }}
      validation-report: ${{ steps.final-report.outputs.validation_report }}

    steps:
      # -------------------------------------------------------
      # 🔍 Source Branch Validation
      # -------------------------------------------------------
      - name: "🔍 Validate Source Branch"
        id: branch-check
        run: |
          echo "::group::Branch Verification"
          SOURCE_BRANCH="${{ github.event.pull_request.head.ref }}"
          TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"

          echo "🔹 Source branch: $SOURCE_BRANCH"
          echo "🔹 Target branch: $TARGET_BRANCH"

          if [ "$SOURCE_BRANCH" != "develop" ] || [ "$TARGET_BRANCH" != "master" ]; then
            echo "::warning::This PR is not from develop to master branch."
            echo "::notice::Source: $SOURCE_BRANCH, Target: $TARGET_BRANCH"
            echo "source_is_develop=false" >> $GITHUB_OUTPUT
            if [ "$SOURCE_BRANCH" != "develop" ]; then
              echo "::warning::Source branch is not 'develop'"
            fi
            if [ "$TARGET_BRANCH" != "master" ]; then
              echo "::warning::Target branch is not 'master'"
            fi
          else
            echo "✅ PR is correctly configured from develop to master branch."
            echo "source_is_develop=true" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"

      # Skip workflow if not from develop to master
      - name: "⏭️ Check if validation should continue"
        id: should-continue
        run: |
          if [ "${{ steps.branch-check.outputs.source_is_develop }}" != "true" ]; then
            echo "::notice::Skipping full validation as this PR is not from develop to master"
            echo "This workflow is configured to fully validate only PRs from develop to master."
            echo "Basic checks will still be performed."
            echo "should_skip=true" >> $GITHUB_OUTPUT
          else
            echo "should_skip=false" >> $GITHUB_OUTPUT
          fi

      # -------------------------------------------------------
      # 🔐 Security Verification
      # -------------------------------------------------------
      - name: "🛡️ Validate Workflow Context"
        id: security-check
        run: |
          echo "::group::Security Verification"
          echo "🔹 Verifying workflow origin"
          echo "🔹 Checking PR source safety"
          echo "🔹 Validating user permissions"
          echo "::endgroup::"

      # -------------------------------------------------------
      # 📋 Setup
      # -------------------------------------------------------
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper checks
          persist-credentials: false  # Security best practice

      - name: "🔍 Initialize Workflow"
        id: init
        run: |
          echo "::group::Environment Information"
          echo "🔹 Repository: ${{ github.repository }}"
          echo "🔹 PR: #${{ github.event.pull_request.number || inputs.pr_number }} - ${{ github.event.pull_request.title || 'Manual run' }}"
          echo "🔹 Branch: ${{ github.head_ref || 'unknown' }} → ${{ github.base_ref || 'master' }}"
          echo "🔹 Commit: ${{ github.event.pull_request.head.sha || github.sha }}"
          echo "🔹 Action Version: 2.0.0"
          echo "::endgroup::"

          # Extract Bun version from package.json
          BUN_VERSION=$(node -e "try { const pkg = require('./package.json'); const pm = pkg.packageManager || ''; const version = pm.match(/bun@(.*)/); console.log(version ? version[1] : '1.2.10'); } catch (e) { console.log('1.2.10'); }")
          echo "bun_version=${BUN_VERSION}" >> $GITHUB_OUTPUT

          # Log PR information for better traceability
          {
            echo "pr_number=${{ github.event.pull_request.number || inputs.pr_number }}"
            echo "pr_title=${{ github.event.pull_request.title || 'Manual validation' }}"
            echo "pr_author=${{ github.event.pull_request.user.login || github.actor }}"
          } >> $GITHUB_OUTPUT

      # -------------------------------------------------------
      # ⚙️ Runtime Setup
      # -------------------------------------------------------
      - name: "🧰 Setup Bun Runtime"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ steps.init.outputs.bun_version }}

      - name: "📦 Install Dependencies"
        id: deps
        run: |
          echo "::group::Dependency Installation"
          # Check if we have a lockfile first
          if [ -f "bun.lockb" ]; then
            echo "🔹 Installing with frozen lockfile"
            bun install --frozen-lockfile
          else
            echo "⚠️ No lockfile found, doing regular install"
            bun install
          fi

          # Verify signature integrity in a more efficient way to avoid argument list too long error
          echo "🔹 Verifying package security"
          # Use a simple check that avoids passing too many arguments
          bun pm untrusted
          echo "::endgroup::"

      # -------------------------------------------------------
      # 🔍 Static Analysis
      # -------------------------------------------------------
      - name: "🔍 Code Quality Checks"
        run: |
          echo "::group::Static Analysis"
          echo "Running ESLint..."
          bun run lint
          echo "::endgroup::"

      - name: "📝 TypeScript Validation"
        run: |
          echo "::group::Type Checking"
          bun run type-check
          echo "::endgroup::"

      # -------------------------------------------------------
      # 🧪 Run Tests & Validation
      # -------------------------------------------------------
      - name: "🧪 Execute Test Suite"
        id: test-execution
        if: steps.should-continue.outputs.should_skip != 'true'
        run: |
          echo "::group::Test Execution"
          echo "Running tests with coverage..."
          bun run test:ci
          TEST_EXIT_CODE=$?
          echo "test_exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: "📊 Process Test Results"
        id: test-results
        if: always()
        run: |
          echo "::group::Test Results Processing"
          if [ -f "test-results/junit.xml" ]; then
            echo "✅ Test results file found"
            # Use grep with -o to avoid empty output issues
            TEST_COUNT=$(grep -c "<testcase" test-results/junit.xml || echo "0")
            FAIL_COUNT=$(grep -c "<failure" test-results/junit.xml || echo "0")
            SKIP_COUNT=$(grep -c "<skipped" test-results/junit.xml || echo "0")

            # Ensure we have valid numbers with fallback to 0
            if [ -z "$TEST_COUNT" ]; then TEST_COUNT=0; fi
            if [ -z "$FAIL_COUNT" ]; then FAIL_COUNT=0; fi
            if [ -z "$SKIP_COUNT" ]; then SKIP_COUNT=0; fi

            # Calculate passing tests safely
            PASS_COUNT=$(( TEST_COUNT - FAIL_COUNT - SKIP_COUNT ))

            echo "📊 Test summary: $PASS_COUNT passed, $FAIL_COUNT failed, $SKIP_COUNT skipped"
            echo "test_count=$TEST_COUNT" >> $GITHUB_OUTPUT
            echo "pass_count=$PASS_COUNT" >> $GITHUB_OUTPUT
            echo "fail_count=$FAIL_COUNT" >> $GITHUB_OUTPUT
            echo "skip_count=$SKIP_COUNT" >> $GITHUB_OUTPUT

            if [ "$FAIL_COUNT" -eq 0 ]; then
              echo "test_passed=true" >> $GITHUB_OUTPUT
            else
              echo "test_passed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ No test results file found"
            echo "test_passed=false" >> $GITHUB_OUTPUT
            echo "test_count=0" >> $GITHUB_OUTPUT
            echo "pass_count=0" >> $GITHUB_OUTPUT
            echo "fail_count=0" >> $GITHUB_OUTPUT
            echo "skip_count=0" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"

      - name: "📊 Publish Test Results"
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: test-results/junit.xml
          comment_mode: always
          comment_title: "📊 Test Results"

      # -------------------------------------------------------
      # 📄 Code Style & Convention Validation
      # -------------------------------------------------------
      - name: "🔍 Validate Conventional Commits"
        id: commit-validation
        if: github.event_name == 'pull_request'
        continue-on-error: true  # Don't fail the entire workflow if this check fails
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            security
          requireScope: false
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: "The subject must not start with an uppercase letter"

      # -------------------------------------------------------
      # 🔒 Security Analysis
      # -------------------------------------------------------
      - name: "🔒 Dependency Security Scan"
        id: security-scan
        continue-on-error: true
        run: |
          echo "::group::Security Scanning"
          echo "Scanning dependencies for vulnerabilities..."
          if ! bun audit --prod; then
            echo "sec_issues_found=true" >> $GITHUB_OUTPUT
            echo "⚠️ Security issues found in dependencies"
          else
            echo "sec_issues_found=false" >> $GITHUB_OUTPUT
            echo "✅ No security issues found"
          fi
          echo "::endgroup::"

      # -------------------------------------------------------
      # 🔍 Secret Scanning
      # -------------------------------------------------------
      - name: "🔍 Secret Scanning"
        id: secret-scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true  # Don't fail the workflow, but flag the issues

      - name: "📤 Upload Secret Scanning Report"
        if: always() && steps.secret-scan.outcome == 'success'
        run: |
          if [ -f "results.sarif" ]; then
            echo "Secret scanning report found, uploading..."
          else
            echo "No secret scanning report found, skipping upload."
            exit 0
          fi

      - name: "📤 Upload SARIF to GitHub"
        if: always() && steps.secret-scan.outcome == 'success'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
          category: secret-scanning
        continue-on-error: true

      # -------------------------------------------------------
      # 📋 License Compliance Check
      # -------------------------------------------------------
      - name: "📋 License Compliance Check"
        id: license-check
        run: |
          echo "::group::License Compliance Scanning"
          echo "Analyzing dependency licenses..."

          # Install license checker
          bun install --no-save license-checker-rseidelsohn

          # Generate license report
          npx license-checker-rseidelsohn --production --json --out license-report.json

          # Check for disallowed licenses (customize this list as needed)
          DISALLOWED_LICENSES=("GPL" "AGPL" "LGPL")
          LICENSE_ISSUES=0

          for license in "${DISALLOWED_LICENSES[@]}"; do
            if grep -q "$license" license-report.json; then
              echo "⚠️ Found potentially problematic license: $license"
              LICENSE_ISSUES=$((LICENSE_ISSUES + 1))
            fi
          done

          if [ "$LICENSE_ISSUES" -gt 0 ]; then
            echo "license_issues_found=true" >> $GITHUB_OUTPUT
            echo "license_issues_count=$LICENSE_ISSUES" >> $GITHUB_OUTPUT
            echo "⚠️ License compliance issues found"
          else
            echo "license_issues_found=false" >> $GITHUB_OUTPUT
            echo "license_issues_count=0" >> $GITHUB_OUTPUT
            echo "✅ No license compliance issues found"
          fi
          echo "::endgroup::"

      - name: "📤 Upload License Report"
        if: always() && steps.license-check.outcome != 'skipped'
        uses: actions/upload-artifact@v4
        with:
          name: license-compliance-report
          path: license-report.json
          retention-days: 14

      # -------------------------------------------------------
      # 📊 SBOM Generation
      # -------------------------------------------------------
      - name: "📊 Generate SBOM"
        id: sbom-generation
        run: |
          echo "::group::Generating SBOM"
          # Install CycloneDX tool for SBOM generation
          bun install --no-save @cyclonedx/cdxgen

          # Generate SBOM in CycloneDX format
          npx @cyclonedx/cdxgen -o sbom.json -t javascript
          echo "sbom_generated=true" >> $GITHUB_OUTPUT

          # Output some stats about the SBOM
          COMPONENT_COUNT=$(jq '.components | length' sbom.json)
          echo "📊 SBOM contains $COMPONENT_COUNT components"
          echo "sbom_component_count=$COMPONENT_COUNT" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: "📤 Upload SBOM"
        if: always() && steps.sbom-generation.outputs.sbom_generated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: software-bill-of-materials
          path: sbom.json
          retention-days: 30

      # -------------------------------------------------------
      # 📊 Workflow Summary
      # -------------------------------------------------------
      - name: "📊 Generate Validation Summary"
        id: final-report
        if: always()
        run: |
          echo "::group::Generating Final Report"

          # Start building report information
          STATUS_EMOJI="❌"
          VALIDATION_ISSUES=0

          # Debug output with proper fallback values
          TEST_EXIT_CODE="${{ steps.test-execution.outputs.test_exit_code || '1' }}"
          COMMIT_VALIDATION_OUTCOME="${{ steps.commit-validation.outcome || 'skipped' }}"
          SECURITY_SCAN_ISSUES="${{ steps.security-scan.outputs.sec_issues_found || 'false' }}"
          SECRET_SCAN_OUTCOME="${{ steps.secret-scan.outcome || 'skipped' }}"
          LICENSE_ISSUES="${{ steps.license-check.outputs.license_issues_found || 'false' }}"

          echo "Debug: Test exit code: $TEST_EXIT_CODE"
          echo "Debug: Commit validation outcome: $COMMIT_VALIDATION_OUTCOME"
          echo "Debug: Security scan issues: $SECURITY_SCAN_ISSUES"
          echo "Debug: Secret scan outcome: $SECRET_SCAN_OUTCOME"
          echo "Debug: License issues: $LICENSE_ISSUES"

          # Check test execution - only if we're not in push mode
          if [ "${{ github.event_name }}" != "push" ] && [ "$TEST_EXIT_CODE" != "0" ]; then
            VALIDATION_ISSUES=$((VALIDATION_ISSUES + 1))
            echo "Debug: ⚠️ Failed check - Test execution"
          fi

          # Check commit validation - only for PRs
          if [ "${{ github.event_name }}" == "pull_request" ] && [ "$COMMIT_VALIDATION_OUTCOME" != "success" ] && [ "$COMMIT_VALIDATION_OUTCOME" != "skipped" ]; then
            VALIDATION_ISSUES=$((VALIDATION_ISSUES + 1))
            echo "Debug: ⚠️ Failed check - Commit validation"
          fi

          # Check security issues
          if [ "$SECURITY_SCAN_ISSUES" == "true" ]; then
            VALIDATION_ISSUES=$((VALIDATION_ISSUES + 1))
            echo "Debug: ⚠️ Failed check - Security scan"
          fi

          # Check secret scanning
          if [ "$SECRET_SCAN_OUTCOME" == "failure" ]; then
            VALIDATION_ISSUES=$((VALIDATION_ISSUES + 1))
            echo "Debug: ⚠️ Failed check - Secret scan"
          fi

          # Check license compliance
          if [ "$LICENSE_ISSUES" == "true" ]; then
            VALIDATION_ISSUES=$((VALIDATION_ISSUES + 1))
            echo "Debug: ⚠️ Failed check - License compliance"
          fi

          # Determine overall validation status
          if [ "$VALIDATION_ISSUES" -eq "0" ]; then
            STATUS_EMOJI="✅"
            VALIDATION_REPORT="passed"
          else
            VALIDATION_REPORT="failed"
          fi

          # Write to GitHub step summary
          echo "# Pull Request Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "$STATUS_EMOJI **Validation $VALIDATION_REPORT**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$VALIDATION_REPORT" == "passed" ]; then
            echo "This PR is ready for review and can be merged using the **Squash and merge** option." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some checks failed - please address the issues before merging**" >> $GITHUB_STEP_SUMMARY
            echo "Issues found: $VALIDATION_ISSUES" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Validation Details" >> $GITHUB_STEP_SUMMARY

          # Handle both PR and push events properly
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            PR_NUMBER="${{ github.event.pull_request.number || steps.init.outputs.pr_number }}"
            PR_TITLE="${{ steps.init.outputs.pr_title }}"
            PR_URL="${{ github.event.pull_request.html_url || format('https://github.com/{0}/pull/{1}', github.repository, steps.init.outputs.pr_number) }}"
            BRANCH_HEAD="${{ github.head_ref }}"
            BRANCH_BASE="${{ github.base_ref }}"
            COMMIT_SHA="${{ github.event.pull_request.head.sha || github.sha }}"
            COMMIT_URL="${{ github.event.pull_request.head.repo.html_url || format('https://github.com/{0}', github.repository) }}/commit/$COMMIT_SHA"
            AUTHOR="${{ steps.init.outputs.pr_author }}"

            echo "- **PR:** [#$PR_NUMBER - $PR_TITLE]($PR_URL)" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch:** \`$BRANCH_HEAD\` → \`$BRANCH_BASE\`" >> $GITHUB_STEP_SUMMARY
          else
            # For push events
            COMMIT_SHA="${{ github.sha }}"
            COMMIT_URL="https://github.com/${{ github.repository }}/commit/$COMMIT_SHA"
            AUTHOR="${{ github.actor }}"

            echo "- **Push:** to \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          fi

          echo "- **Commit:** [\`${COMMIT_SHA:0:7}\`]($COMMIT_URL)" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** @$AUTHOR" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Rest of summary remains the same but with proper string comparison
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Total Tests: ${{ steps.test-results.outputs.test_count || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Passed: ${{ steps.test-results.outputs.pass_count || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Failed: ${{ steps.test-results.outputs.fail_count || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "- ⏩ Skipped: ${{ steps.test-results.outputs.skip_count || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Security Status" >> $GITHUB_STEP_SUMMARY
          if [ "$SECURITY_SCAN_ISSUES" == "true" ]; then
            echo "⚠️ **Security issues found in dependencies**" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No security issues detected in dependencies**" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$SECRET_SCAN_OUTCOME" == "failure" ]; then
            echo "⚠️ **Potential secrets detected in code**" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No secrets detected in code**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Compliance" >> $GITHUB_STEP_SUMMARY
          if [ "$LICENSE_ISSUES" == "true" ]; then
            echo "⚠️ **License compliance issues found: ${{ steps.license-check.outputs.license_issues_count || '0' }}**" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No license compliance issues**" >> $GITHUB_STEP_SUMMARY
          fi

          SBOM_GENERATED="${{ steps.sbom-generation.outputs.sbom_generated || 'false' }}"
          if [ "$SBOM_GENERATED" == "true" ]; then
            echo "✅ **SBOM generated with ${{ steps.sbom-generation.outputs.sbom_component_count || '0' }} components**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **SBOM generation failed**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Store validation report for job output
          echo "validation_report=$VALIDATION_REPORT" >> $GITHUB_OUTPUT
          echo "validation_issues=$VALIDATION_ISSUES" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      # -------------------------------------------------------
      # 📤 Upload Artifacts
      # -------------------------------------------------------
      - name: "📤 Upload Coverage Report"
        if: always() && steps.test-execution.outcome != 'skipped'
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage/
          retention-days: 14

      # -------------------------------------------------------
      # ✅ Status Check Integration
      # -------------------------------------------------------
      - name: "✅ Validate PR Status"
        if: always()
        run: |
          echo "::group::PR Validation Status Check"
          VALIDATION_ISSUES="${{ steps.final-report.outputs.validation_issues }}"
          VALIDATION_REPORT="${{ steps.final-report.outputs.validation_report }}"

          echo "Validation report: $VALIDATION_REPORT (Issues: $VALIDATION_ISSUES)"

          if [[ "$VALIDATION_REPORT" != "passed" ]]; then
            echo "::error::PR validation failed with $VALIDATION_ISSUES issues - please address them before merging"
            exit 1
          else
            echo "::notice::PR validation passed! This PR is ready for review."
          fi
          echo "::endgroup::"
