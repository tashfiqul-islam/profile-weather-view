name: "Profile Weather Update"

# ============================================================
# Workflow triggers
# ============================================================
on:
  schedule:
    - cron: "23 5,13,21 * * *"

  workflow_dispatch:
    inputs:
      force_update:
        description: "Force README update regardless of changes"
        type: boolean
        default: false
      skip_tests:
        description: "Skip test execution"
        type: boolean
        default: false

# ============================================================
# Concurrency control
# ============================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

# ============================================================
# Permissions
# ============================================================
permissions:
  contents: write
  id-token: write

# ============================================================
# Environment variables
# ============================================================
env:
  CACHE_KEY_PREFIX: "v15-profile-weather"
  TIMEZONE: "Asia/Dhaka"
  PROFILE_REPO: "tashfiqul-islam/tashfiqul-islam"
  NODE_ENV: "production"
  FORCE_UPDATE: ${{ github.event.inputs.force_update || 'false' }}
  SKIP_TESTS: ${{ github.event.inputs.skip_tests || 'false' }}

# ============================================================
# Jobs
# ============================================================
jobs:
  update-weather:
    name: "Update Weather Data"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      api_response_time: ${{ steps.update-weather-and-readme.outputs.API_RESPONSE_TIME }}
      cache_hit: ${{ steps.cache-deps.outputs.cache-hit }}
      changes_detected: ${{ steps.update-weather-and-readme.outputs.changes_detected }}

    steps:
      - name: "Checkout Weather Repository"
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          fetch-depth: 0
          persist-credentials: false

      - name: "Checkout Profile Repository"
        uses: actions/checkout@v5
        with:
          repository: ${{ env.PROFILE_REPO }}
          path: profile-repo
          token: ${{ secrets.PAT }}
          fetch-depth: 1
          ref: master
          persist-credentials: false

      - name: "Setup Bun"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: "Restore Dependencies Cache"
        id: cache-deps
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
            bun.lock
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-bun-${{ hashFiles('package.json', 'bun.lock') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-bun-

      - name: "Install Dependencies"
        run: |
          if [[ "${{ steps.cache-deps.outputs.cache-hit }}" != "true" ]]; then
            echo "::group::Installing dependencies"
            bun --version
          else
            echo "::notice::Using cached dependencies"
          fi
          bun install --no-summary
          echo "::endgroup::"

      - name: "Quality Checks"
        if: env.SKIP_TESTS != 'true'
        run: |
          echo "::group::Quality checks"
          bun run lint src/
          bun run type-check
          echo "::endgroup::"

      - name: "Run Tests"
        if: env.SKIP_TESTS != 'true'
        run: |
          echo "::group::Test execution"
          bun run src/scripts/test-pretty.ts --no-live
          echo "::endgroup::"
        env:
          OPEN_WEATHER_KEY: "mock-api-key-for-tests"
          CI: "true"

      - name: "Skip Quality Checks"
        if: env.SKIP_TESTS == 'true'
        run: echo "::notice::Skipping quality checks"

      - name: "Verify Profile README"
        run: |
          if [[ ! -f "profile-repo/README.md" ]]; then
            echo "::error::README.md file not found in profile repository"
            exit 1
          fi

          if ! grep -q "<!-- Hourly Weather Update -->" profile-repo/README.md; then
            echo "::error::Weather section not found in README.md"
            exit 1
          fi
          echo "::notice::Weather section verified"

      - name: "Update Weather and README"
        id: update-weather-and-readme
        env:
          OPEN_WEATHER_KEY: ${{ secrets.OPEN_WEATHER_KEY }}
          GITHUB_ACTIONS: "true"
          PROFILE_README_PATH: "profile-repo/README.md"
          FORCE_UPDATE: ${{ env.FORCE_UPDATE }}
        run: |
          echo "::group::Weather update"

          START_TIME=$(date +%s.%N)

          if [[ ! -f "$PROFILE_README_PATH" ]]; then
            echo "::error::README file not found"
            exit 1
          fi

          OUTPUT=$(bun run src/weather-update/index.ts)
          EXECUTION_STATUS=$?

          END_TIME=$(date +%s.%N)
          ELAPSED_TIME=$(echo "$END_TIME - $START_TIME" | bc)
          echo "API_RESPONSE_TIME=$ELAPSED_TIME" >> $GITHUB_OUTPUT

          if [[ $EXECUTION_STATUS -ne 0 ]]; then
            echo "::error::Weather update failed with code $EXECUTION_STATUS"
            echo "$OUTPUT"
            exit $EXECUTION_STATUS
          fi

          if echo "$OUTPUT" | grep -q "CHANGES_DETECTED=true"; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          else
            if [[ "${{ env.FORCE_UPDATE }}" == "true" ]]; then
              echo "changes_detected=true" >> $GITHUB_OUTPUT
            else
              echo "changes_detected=false" >> $GITHUB_OUTPUT
            fi
          fi

          echo "Execution time: ${ELAPSED_TIME}s"
          echo "$OUTPUT"
          echo "::endgroup::"

      - name: "Save Dependencies Cache"
        if: always() && steps.cache-deps.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
            bun.lock
          key: ${{ steps.cache-deps.outputs.cache-primary-key }}

      - name: "Validate GPG Secret"
        if: github.event_name == 'schedule' || steps.update-weather-and-readme.outputs.changes_detected == 'true'
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          if [ -z "${GPG_PRIVATE_KEY}" ]; then
            echo "::error::Missing secret GPG_PRIVATE_KEY"
            exit 1
          fi
          if ! grep -q "BEGIN PGP PRIVATE KEY BLOCK" <<< "${GPG_PRIVATE_KEY}"; then
            echo "::error::GPG_PRIVATE_KEY is not ASCII-armored"
            exit 1
          fi
          if ! grep -q "END PGP PRIVATE KEY BLOCK" <<< "${GPG_PRIVATE_KEY}"; then
            echo "::error::GPG_PRIVATE_KEY footer missing"
            exit 1
          fi

      - name: "Setup GPG for Commit Signing"
        id: gpg-setup
        if: github.event_name == 'schedule' || steps.update-weather-and-readme.outputs.changes_detected == 'true'
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_config_global: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          git_push_gpgsign: if-asked
        env:
          GPG_TTY: /dev/console

      - name: "Configure Git Identity"
        if: github.event_name == 'schedule' || steps.update-weather-and-readme.outputs.changes_detected == 'true'
        run: |
          git config --global user.name "${{ secrets.GIT_COMMITTER_NAME || github.repository_owner }}"
          git config --global user.email "${{ secrets.GIT_COMMITTER_EMAIL }}"

      - name: "Commit and Push Changes"
        if: github.event_name == 'schedule' || steps.update-weather-and-readme.outputs.changes_detected == 'true'
        working-directory: profile-repo
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          echo "::group::Git operations"

          export GIT_AUTHOR_DATE="$(TZ='Asia/Dhaka' date)"
          export GIT_COMMITTER_DATE="$GIT_AUTHOR_DATE"
          FORMATTED_DATE=$(TZ="Asia/Dhaka" date "+%Y-%m-%d %H:%M:%S %Z")

          if git diff --quiet -- README.md; then
            if [[ "${{ github.event_name }}" == "schedule" ]]; then
              echo "::notice::No weather changes detected"
            elif [[ "${{ env.FORCE_UPDATE }}" == "true" ]]; then
              echo "::warning::Force update requested but no changes to commit"
            else
              echo "::notice::No changes detected"
            fi
          else
            git add README.md
            git commit -S --no-verify -m "update(weather): refresh data for ${FORMATTED_DATE}"
            git push https://x-access-token:${{ secrets.PAT }}@github.com/${{ env.PROFILE_REPO }} HEAD:master
            echo "::notice::Changes pushed successfully"
          fi
          echo "::endgroup::"

  # ============================================================
  # Verification job
  # ============================================================
  verify:
    name: "Verify & Report"
    needs: update-weather
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 2

    steps:
      - name: "Generate Execution Report"
        run: |
          echo "::group::Execution Summary"
          echo "# Profile Weather Update Report" >> $GITHUB_STEP_SUMMARY
          echo "## Execution Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time:** $(TZ='${{ env.TIMEZONE }}' date '+%Y-%m-%d %Z')" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Repository:** ${{ env.PROFILE_REPO }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Execution Mode:** ${{ env.FORCE_UPDATE == 'true' && 'Force Update' || 'Normal' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests:** ${{ env.SKIP_TESTS == 'true' && 'Skipped' || 'Executed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance:** ${{ needs.update-weather.outputs.api_response_time || 'N/A' }}s" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Weather Update:** ${{ needs.update-weather.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Hit:** ${{ needs.update-weather.outputs.cache_hit || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Performance Metrics" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.update-weather.outputs.api_response_time }}" ]]; then
            RESPONSE_TIME="${{ needs.update-weather.outputs.api_response_time }}"
            if (( $(echo "$RESPONSE_TIME < 1.0" | bc -l) )); then
              echo "- **Status:** Excellent (< 1s)" >> $GITHUB_STEP_SUMMARY
            elif (( $(echo "$RESPONSE_TIME < 2.0" | bc -l) )); then
              echo "- **Status:** Good (< 2s)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Status:** Slow (> 2s)" >> $GITHUB_STEP_SUMMARY
            fi
            echo "- **Response Time:** ${RESPONSE_TIME}s" >> $GITHUB_STEP_SUMMARY
          fi
          echo "::endgroup::"

      - name: "Schedule Next Update"
        run: |
          NEXT_UPDATE_TIME=$(TZ="${{ env.TIMEZONE }}" date -d "+8 hours" "+%H:%M:%S %Z")
          echo "::notice title=Next Update::Scheduled for approximately ${NEXT_UPDATE_TIME}"
          echo "## Next Update" >> $GITHUB_STEP_SUMMARY
          echo "- **Scheduled for:** ${NEXT_UPDATE_TIME}" >> $GITHUB_STEP_SUMMARY

  # ============================================================
  # Recovery job
  # ============================================================
  recovery:
    name: "Recovery Actions"
    needs: [update-weather, verify]
    if: always() && (needs.update-weather.result == 'failure' || needs.verify.result == 'failure')
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: "Analyze Failure"
        run: |
          echo "::group::Failure Analysis"
          echo "# Workflow Failure Analysis" >> $GITHUB_STEP_SUMMARY
          echo "## Failed Jobs" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.update-weather.result }}" == "failure" ]]; then
            echo "- **Weather Update:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.verify.result }}" == "failure" ]]; then
            echo "- **Verification:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Recovery Actions" >> $GITHUB_STEP_SUMMARY
          echo "- Recovery mode activated" >> $GITHUB_STEP_SUMMARY
          echo "- Creating notification for manual intervention" >> $GITHUB_STEP_SUMMARY
          echo "::endgroup::"

      - name: "Schedule Re-run"
        run: |
          DELAY_MINUTES=$((15 * 2 ** (${{ github.run_attempt }} - 1)))
          DELAY_MINUTES=$((DELAY_MINUTES > 240 ? 240 : DELAY_MINUTES))

          NEXT_RETRY=$(date -d "+${DELAY_MINUTES} minutes" "+%H:%M:%S")

          echo "::notice title=Automatic Retry::Scheduled in ${DELAY_MINUTES} minutes (at approximately ${NEXT_RETRY})"
          echo "- **Next automatic retry:** in ${DELAY_MINUTES} minutes (at ${NEXT_RETRY})" >> $GITHUB_STEP_SUMMARY
