name: "üå¶Ô∏è Profile Weather Update"

# ============================================================
# üöÄ Optimized triggers for reliability and performance
# ============================================================
on:
  schedule:
    # Strategic times that capture meaningful weather changes while conserving resources
    - cron: "23 5,13,21 * * *"  # 3 times daily: morning (5:23), afternoon (13:23), evening (21:23)

  workflow_dispatch:
    inputs:
      debug:
        description: "Enable debug mode"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
      retry_strategy:
        description: "API failure retry strategy"
        type: choice
        options:
          - exponential
          - linear
          - none
        default: "exponential"
      skip_tests:
        description: "Skip test execution"
        type: boolean
        default: false
      force_update:
        description: "Force README update regardless of changes"
        type: boolean
        default: false

# ============================================================
# üöÄ Prevent redundant executions (Ensures single execution)
# ============================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.run_id }}
  cancel-in-progress: false

# ============================================================
# üîí Explicit permissions (Principle of least privilege)
# ============================================================
permissions:
  contents: write  # For repository updates
  id-token: write  # For OIDC token (keyless signing)

# ============================================================
# üåç Global environment variables
# ============================================================
env:
  BUN_VERSION: "1.2.10"  # Default Bun version (will be overridden if specified in package.json)
  CACHE_KEY_PREFIX: "v9-profile-weather"
  LOG_LEVEL: ${{ github.event.inputs.debug == 'true' && 'debug' || 'warn' }}
  TIMEZONE: "Asia/Dhaka"
  RETRY_STRATEGY: ${{ github.event.inputs.retry_strategy || 'exponential' }}
  EXECUTION_ID: ${{ github.run_id }}-${{ github.run_attempt }}
  CODE_REPO: "${{ github.repository }}"  # Script repository
  PROFILE_REPO: "tashfiqul-islam/tashfiqul-islam"  # README.md repository
  BUN_RUNTIME_SAFETY: "true"  # Aligns with bunfig.toml defaultRuntimeSafety
  NODE_ENV: "production"
  FORCE_UPDATE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.force_update == 'true' || 'false' }}
  SKIP_TESTS: ${{ github.event.inputs.skip_tests == 'true' }}
  WORKFLOW_DEBUG: "true" # Debug info to help troubleshoot startup issues
  # Git commit identity
  GIT_COMMITTER_NAME: ${{ secrets.GIT_COMMITTER_NAME || github.repository_owner }}
  GIT_COMMITTER_EMAIL: ${{ secrets.GIT_COMMITTER_EMAIL || 'github-actions[bot]@users.noreply.github.com' }}
  GIT_AUTHOR_NAME: ${{ secrets.GIT_COMMITTER_NAME || github.repository_owner }}
  GIT_AUTHOR_EMAIL: ${{ secrets.GIT_COMMITTER_EMAIL || 'github-actions[bot]@users.noreply.github.com' }}

# ============================================================
# üìå JOB: PREFLIGHT (Checks environment & dependencies)
# ============================================================
jobs:
  preflight:
    name: "üöÄ Preflight Checks"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      api_status: ${{ steps.api-check.outputs.status }}
      env_valid: ${{ steps.env-check.outputs.valid }}
      cache_hit: ${{ steps.cache-check.outputs.cache_hit }}
      node_modules_hash: ${{ steps.hash-check.outputs.node_modules_hash }}

    steps:
      - name: Check Runner Version
        run: |
          if ! printf "%s\n%s" "2.323.0" "${ACTIONS_RUNNER_VERSION}" | sort -V | head -n 1 | grep -q "2.323.0"; then
            echo "::warning::Runner version ${ACTIONS_RUNNER_VERSION} is older than recommended minimum (2.323.0)"
          else
            echo "Runner version ${ACTIONS_RUNNER_VERSION} meets requirements"
          fi

      - name: "üîç Log Execution Context"
        run: |
          echo "::group::Execution Context"
          echo "üîπ Run ID: ${{ env.EXECUTION_ID }}"
          echo "üîπ Workflow: ${{ github.workflow }}"
          echo "üîπ Repository: ${{ github.repository }}"
          echo "üîπ Target Profile: ${{ env.PROFILE_REPO }}"
          echo "üîπ Trigger: ${{ github.event_name }}"
          echo "üîπ Execution Mode: ${{ env.FORCE_UPDATE == 'true' && 'Force Update' || 'Normal' }}"
          echo "üîπ Tests: ${{ env.SKIP_TESTS == 'true' && 'Skipped' || 'Enabled' }}"
          echo "::endgroup::"

      - name: "üîë Verify Required Secrets"
        id: env-check
        env:
          OPEN_WEATHER_KEY: ${{ secrets.OPEN_WEATHER_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ -z "$OPEN_WEATHER_KEY" ]]; then
            echo "::error::Missing required secret: OPEN_WEATHER_KEY"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          elif [[ -z "$GITHUB_TOKEN" ]]; then
            echo "::error::Missing required secret: GITHUB_TOKEN"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "::notice::API and token validation successful"
          fi

      - name: "üåê Check OpenWeather API Health"
        id: api-check
        if: steps.env-check.outputs.valid == 'true'
        env:
          OPEN_WEATHER_KEY: ${{ secrets.OPEN_WEATHER_KEY }}
        run: |
          # Create cache directory if it doesn't exist
          mkdir -p /tmp/weather-cache
          CACHE_FILE="/tmp/weather-cache/openweather_status"
          CACHE_EXPIRATION=21600 # 6 hours in seconds

          # Check if cache exists and is still valid
          if [[ -f "$CACHE_FILE" && $(($(date +%s) - $(stat -c %Y "$CACHE_FILE"))) -lt $CACHE_EXPIRATION ]]; then
            CACHED_STATUS=$(cat "$CACHE_FILE")
            echo "status=$CACHED_STATUS" >> $GITHUB_OUTPUT
            echo "::notice::Using cached API status ($CACHED_STATUS) - still valid for $((CACHE_EXPIRATION - $(date +%s) + $(stat -c %Y "$CACHE_FILE"))) seconds"
            exit 0
          fi

          # Quick API health check with minimal data request
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            "https://api.openweathermap.org/data/3.0/onecall?lat=23.8759&lon=90.3795&exclude=minutely,hourly,daily,alerts&appid=$OPEN_WEATHER_KEY&units=metric")

          if [[ "$RESPONSE" == "200" ]]; then
            echo "status=operational" >> $GITHUB_OUTPUT
            echo "operational" > "$CACHE_FILE"
            echo "::notice::OpenWeather API is operational"
          else
            echo "status=degraded" >> $GITHUB_OUTPUT
            echo "degraded" > "$CACHE_FILE"
            echo "::warning::OpenWeather API returned status code: $RESPONSE"
            echo "::debug::$(cat response.json)"
          fi

      - name: "‚¨áÔ∏è Checkout Weather Code Repository (For Hash Calculation)"
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CODE_REPO }}
          path: hash-check
          fetch-depth: 1

      - name: "üì¶ Calculate Dependency Hashes"
        id: hash-check
        working-directory: hash-check
        run: |
          # Generate deterministic hash of package.json for cache key
          PACKAGE_HASH=$(sha256sum package.json | cut -d ' ' -f1)
          echo "node_modules_hash=$PACKAGE_HASH" >> $GITHUB_OUTPUT
          echo "::notice::Dependency hash: $PACKAGE_HASH"

      - name: "üì¶ Check Dependency Cache Status"
        id: cache-check
        run: |
          echo "cache_check_time=$(date +%s)" >> $GITHUB_OUTPUT
          echo "cache_hit=unknown" >> $GITHUB_OUTPUT

  # ============================================================
  # üìå JOB: UPDATE WEATHER (Main execution)
  # ============================================================
  update-weather:
    name: "üå¶Ô∏è Update Weather Data"
    needs: preflight
    if: needs.preflight.outputs.env_valid == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: "‚¨áÔ∏è Checkout Weather Code Repository"
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CODE_REPO }}
          path: weather-code
          fetch-depth: 1

      - name: "‚¨áÔ∏è Checkout Profile Repository"
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PROFILE_REPO }}
          path: profile-repo
          token: ${{ secrets.PAT }}
          fetch-depth: 1
          ref: master

      - name: "üìã Extract Bun Version"
        id: extract-bun-version
        working-directory: weather-code
        run: |
          if [[ -f "package.json" ]]; then
            BUN_VERSION=$(node -e "try { const pkg = require('./package.json'); const pm = pkg.packageManager || ''; const version = pm.match(/bun@(.*)/); console.log(version ? version[1] : '1.2.9'); } catch (e) { console.log('1.2.9'); }")
            echo "BUN_VERSION=$BUN_VERSION" >> $GITHUB_ENV
            echo "::notice::Using Bun version $BUN_VERSION from package.json"
          else
            echo "::warning::package.json not found, using default Bun version: ${{ env.BUN_VERSION }}"
          fi

      - name: "üß∞ Setup Bun Runtime"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: "üîç Verify Bun Runtime"
        run: |
          echo "::group::Bun Runtime Verification"
          BUN_VERSION=$(bun --version)
          echo "üîπ Bun Version: $BUN_VERSION"

          # Check if Bun meets minimum requirements
          if [[ "$BUN_VERSION" < "1.0.0" ]]; then
            echo "::error::Bun version $BUN_VERSION is below minimum required version 1.0.0"
            exit 1
          fi

          # Verify TypeScript support
          echo "üîπ TypeScript Support: $(bun --help | grep -q typescript && echo "Enabled" || echo "Disabled")"
          echo "::endgroup::"

      - name: "üì¶ Cache Dependencies"
        uses: actions/cache@v4
        id: bun-cache
        with:
          path: |
            weather-code/node_modules
            ~/.bun/install/cache
            weather-code/bun.lockb
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-bun-${{ needs.preflight.outputs.node_modules_hash }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-bun-
          enableCrossOsArchive: false

      - name: "üõ°Ô∏è Validate Workflow Integrity"
        run: |
          echo "::group::Workflow Integrity Check"
          # Verify workflow file hasn't been tampered with
          WORKFLOW_FILE="$GITHUB_WORKSPACE/.github/workflows/profile-weather-update.yml"
          if [[ -f "$WORKFLOW_FILE" ]]; then
            CHECKSUM=$(sha256sum "$WORKFLOW_FILE" | cut -d ' ' -f1)
            echo "Current workflow checksum: $CHECKSUM"
            echo "Validating workflow integrity..."

            # In production, you could compare against a known good hash
            # or fetch a trusted hash from a secure location
            # if [[ "$CHECKSUM" != "$EXPECTED_HASH" ]]; then
            #   echo "::error::Workflow file integrity validation failed!"
            #   exit 1
            # fi
          else
            echo "::warning::Cannot verify workflow integrity - file not found"
          fi
          echo "::endgroup::"

      - name: "üîÑ Install Dependencies"
        if: steps.bun-cache.outputs.cache-hit != 'true'
        working-directory: weather-code
        run: |
          echo "::group::Bun Installation"
          bun --version
          bun install --frozen-lockfile
          echo "::endgroup::"

      - name: "‚ö° Install Dependencies (Fast Path)"
        if: steps.bun-cache.outputs.cache-hit == 'true'
        working-directory: weather-code
        run: |
          echo "::notice::Using cached dependencies"
          bun install --frozen-lockfile --no-summary

      - name: "üîç Code Quality Check"
        working-directory: weather-code
        run: |
          echo "::group::Code Quality Verification"
          echo "üîπ Running ESLint..."
          bun run lint || { echo "::error::ESLint check failed"; exit 1; }

          echo "üîπ Running Prettier..."
          bun run format --check || { echo "::error::Prettier check failed"; exit 1; }
          echo "::endgroup::"
          echo "::notice::Code quality checks passed"

      - name: "üìã Run Type Check"
        working-directory: weather-code
        run: bun run type-check

      - name: "üßπ Clear Test Cache"
        working-directory: weather-code
        run: |
          echo "::notice::Ensuring latest test files are used"
          rm -rf .vitest-cache        # Clear Vitest cache if it exists
          rm -rf coverage             # Clear any previous coverage data
          rm -rf .turbo               # Clear Turbo cache if you're using it

      - name: "üß™ Run Tests"
        if: env.SKIP_TESTS != 'true'
        working-directory: weather-code
        run: |
          echo "::group::Test Execution"
          bun run test
          echo "::endgroup::"
        env:
          # Mock environment variables for tests
          OPEN_WEATHER_KEY: "mock-api-key-for-tests"
          CI: "true"

      - name: "üì¶ Cache Test Results"
        if: env.SKIP_TESTS != 'true'
        uses: actions/cache@v4
        with:
          path: weather-code/coverage
          key: ${{ env.CACHE_KEY_PREFIX }}-test-${{ hashFiles('weather-code/src/**/*.ts') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-test-

      - name: "üìù Verify Profile README"
        id: readme-check
        run: |
          echo "::group::README Verification"
          if [[ ! -f "profile-repo/README.md" ]]; then
            echo "::error::README.md file not found in profile repository"
            exit 1
          fi

          # Check if weather section exists in README
          if ! grep -q "<!-- Hourly Weather Update -->" profile-repo/README.md; then
            echo "::error::Weather section not found in README.md"
            exit 1
          fi
          echo "::notice::Weather section found in profile README"
          echo "::endgroup::"

      - name: "üîí Prevent Concurrent README Updates"
        run: |
          LOCKFILE="/tmp/readme_update.lock"
          exec 200>"$LOCKFILE"
          flock -n 200 || {
            echo "::error::Another instance is already updating README"
            exit 1
          }
          echo "::notice::Acquired exclusive lock for README update"

      - name: "üå¶Ô∏è Update Weather and README"
        id: update-weather-and-readme
        env:
          OPEN_WEATHER_KEY: ${{ secrets.OPEN_WEATHER_KEY }}
          GITHUB_ACTIONS: "true"
          PROFILE_README_PATH: "../profile-repo/README.md"
          LOG_LEVEL: ${{ env.LOG_LEVEL }}
          BUN_RUNTIME_SAFETY: ${{ env.BUN_RUNTIME_SAFETY }}
          # Force update if requested via input
          FORCE_UPDATE: ${{ env.FORCE_UPDATE }}
        working-directory: weather-code
        run: |
          echo "::group::Weather Update Process"

          # Debug message about force update status
          echo "Force update status: ${{ env.FORCE_UPDATE }}"

          # Log the README path to verify it's correct
          echo "README path: $PROFILE_README_PATH"
          if [[ -f "$PROFILE_README_PATH" ]]; then
            echo "README file exists at path"
            echo "README content preview:"
            head -n 20 "$PROFILE_README_PATH"
          else
            echo "::error::README file not found at specified path"
            exit 1
          fi

          # Make sure FORCE_UPDATE environment variable is properly set
          FORCE_FLAG=""
          if [[ "${{ env.FORCE_UPDATE }}" == "true" ]]; then
            FORCE_FLAG="--force"
            echo "Force update enabled via flag: $FORCE_FLAG"
          fi

          # Track API response time
          echo "Starting API request timing: $(date +%s.%N)"
          START_TIME=$(date +%s.%N)

          # Execute the TypeScript code to fetch weather and update README
          echo "Running weather update script with command: bun run src/weather-update/index.ts $FORCE_FLAG"
          OUTPUT=$(OPEN_WEATHER_KEY="$OPEN_WEATHER_KEY" \
                  GITHUB_ACTIONS="true" \
                  PROFILE_README_PATH="$PROFILE_README_PATH" \
                  LOG_LEVEL="${{ env.LOG_LEVEL }}" \
                  BUN_RUNTIME_SAFETY="${{ env.BUN_RUNTIME_SAFETY }}" \
                  FORCE_UPDATE="${{ env.FORCE_UPDATE }}" \
                  bun run src/weather-update/index.ts $FORCE_FLAG)

          END_TIME=$(date +%s.%N)
          ELAPSED_TIME=$(echo "$END_TIME - $START_TIME" | bc)
          echo "API_RESPONSE_TIME=$ELAPSED_TIME" >> $GITHUB_OUTPUT
          echo "API request completed in $ELAPSED_TIME seconds"

          # Echo the full output for debugging
          echo "Full script output:"
          echo "$OUTPUT"

          # Capture the execution status
          EXECUTION_STATUS=$?

          if [[ $EXECUTION_STATUS -ne 0 ]]; then
            echo "::error::Weather update process failed with code $EXECUTION_STATUS"
            echo "$OUTPUT" | grep -E '‚ùå|Error'
            exit $EXECUTION_STATUS
          fi

          # Parse output for CHANGES_DETECTED flag and set step output
          if echo "$OUTPUT" | grep -q "CHANGES_DETECTED=true"; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            echo "::notice::README changes detected by TypeScript code"
          else
            # Override to force commit if force_update was requested
            if [[ "${{ env.FORCE_UPDATE }}" == "true" ]]; then
              echo "::notice::Force update requested - will commit README even without detected changes"
              echo "changes_detected=true" >> $GITHUB_OUTPUT
            else
              echo "changes_detected=false" >> $GITHUB_OUTPUT
              echo "::notice::No README changes needed"
            fi
          fi

          # Log key output lines for monitoring
          echo "$OUTPUT" | grep -E '‚úÖ|‚ö†Ô∏è|‚ùå|üåç|üìù|üéâ' || true

          # Verify README contents after update
          if [[ -f "$PROFILE_README_PATH" ]]; then
            echo "README content after update (preview):"
            grep -A 5 -B 5 "Hourly Weather Update" "$PROFILE_README_PATH" || echo "Weather section not found"
          fi

          echo "::endgroup::"

      - name: "üì§ Upload Weather Output Artifact"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: weather-output-${{ github.run_id }}
          path: profile-repo/README.md
          retention-days: 7
          if-no-files-found: warn

      - name: "üîê Setup GPG for Commit Signing"
        id: gpg-setup
        if: github.event_name == 'schedule' || steps.update-weather-and-readme.outputs.changes_detected == 'true'
        run: |
          echo "::group::GPG Setup"
          # Only proceed if GPG keys are provided
          if [[ -n "${{ secrets.GPG_PRIVATE_KEY }}" && -n "${{ secrets.GPG_PASSPHRASE }}" ]]; then
            echo "Setting up GPG key for signed commits"

            # Install gnupg if needed
            which gpg > /dev/null || { sudo apt-get update -qq && sudo apt-get install -qq -y gnupg; }

            # Create temporary file for GPG key
            GPG_KEY_FILE=$(mktemp)
            chmod 600 "$GPG_KEY_FILE"
            echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 -d > "$GPG_KEY_FILE"

            # Import the GPG key
            echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --import "$GPG_KEY_FILE"

            # Get the key ID
            KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | head -n1 | awk '{print $2}' | cut -d'/' -f2)

            # Configure Git to use the imported GPG key
            git config --global user.signingkey "$KEY_ID"
            git config --global commit.gpgsign true

            # Set commit author identity from secrets
            git config --global user.name "${{ secrets.GIT_COMMITTER_NAME || github.repository_owner }}"
            git config --global user.email "${{ secrets.GIT_COMMITTER_EMAIL }}"

            # Secure cleanup
            rm -f "$GPG_KEY_FILE"

            echo "signing_enabled=true" >> $GITHUB_OUTPUT
            echo "GPG signing enabled with key: $KEY_ID"
          else
            echo "GPG signing not configured - using standard commits"
            git config --global user.name "${{ env.GIT_COMMITTER_NAME }}"
            git config --global user.email "${{ env.GIT_COMMITTER_EMAIL }}"

            echo "signing_enabled=false" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"

      - name: "üíæ Commit and Push Changes"
        if: github.event_name == 'schedule' || steps.update-weather-and-readme.outputs.changes_detected == 'true'
        working-directory: profile-repo
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          echo "::group::Git Operations"
          # Apply correct commit timestamp in Dhaka timezone
          export GIT_AUTHOR_DATE="$(TZ='Asia/Dhaka' date)"
          export GIT_COMMITTER_DATE="$GIT_AUTHOR_DATE"

          # Format the last updated time for commit message
          FORMATTED_DATE=$(TZ="Asia/Dhaka" date "+%Y-%m-%d %H:%M:%S %Z")

          # Configure GPG for non-interactive environment
          mkdir -p ~/.gnupg
          echo 'allow-loopback-pinentry' > ~/.gnupg/gpg-agent.conf
          echo 'use-agent' > ~/.gnupg/gpg.conf
          echo 'pinentry-mode loopback' >> ~/.gnupg/gpg.conf
          echo 'no-tty' >> ~/.gnupg/gpg.conf
          chmod 700 ~/.gnupg
          gpgconf --kill gpg-agent

          # Export passphrase env var for GPG to use
          export GPG_TTY=$(tty)
          export GNUPGHOME=~/.gnupg
          export GPG_PASSPHRASE="${{ secrets.GPG_PASSPHRASE }}"

          # Create a script to provide the passphrase to GPG
          cat > ~/.git-pass-helper.sh << 'EOF'
          #!/bin/sh
          echo "$GPG_PASSPHRASE"
          EOF
          chmod +x ~/.git-pass-helper.sh

          # Configure Git to use our passphrase helper for signing
          git config --global gpg.program gpg
          git config --global commit.gpgsign true
          git config --global gpg.passphrase "$GPG_PASSPHRASE"

          # For scheduled runs or force update, always commit regardless of git diff
          if [[ "${{ github.event_name }}" == "schedule" || "${{ env.FORCE_UPDATE }}" == "true" ]]; then
            git add README.md
            echo "$GPG_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback -o /dev/null --sign - && git commit -S --no-verify -m "update(weather): refresh data for ${FORMATTED_DATE}"
            git push origin master
            echo "::notice::Changes pushed successfully with signed commit (scheduled/forced)"
          else
            # For manual runs, check if there are actual git changes
            if git diff --quiet -- README.md; then
              echo "No actual changes detected in README.md by git diff"
            else
              git add README.md
              echo "$GPG_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback -o /dev/null --sign - && git commit -S --no-verify -m "update(weather): refresh data for ${FORMATTED_DATE}"
              git push origin master && echo "::notice::Changes pushed successfully with signed commit"
            fi
          fi
          echo "::endgroup::"

  # ============================================================
  # üìå JOB: VERIFICATION (Ensures update success)
  # ============================================================
  verify:
    name: "‚úÖ Verify & Report"
    needs: [preflight, update-weather]
    if: always() && needs.preflight.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 2

    steps:
      - name: "üìä Generate Execution Report"
        run: |
          echo "::group::Execution Summary"
          echo "# Profile Weather Update Report" >> $GITHUB_STEP_SUMMARY
          echo "## Execution Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ env.EXECUTION_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time:** $(TZ='${{ env.TIMEZONE }}' date '+%Y-%m-%d %Z')" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Repository:** ${{ env.PROFILE_REPO }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Execution Mode:** ${{ env.FORCE_UPDATE == 'true' && 'Force Update' || 'Normal' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests:** ${{ env.SKIP_TESTS == 'true' && 'Skipped' || 'Executed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Preflight:** ${{ needs.preflight.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Weather Update:** ${{ needs.update-weather.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API Status:** ${{ needs.preflight.outputs.api_status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Hit:** ${{ needs.preflight.outputs.cache_hit }}" >> $GITHUB_STEP_SUMMARY
          echo "::endgroup::"

      - name: "‚è±Ô∏è Schedule Next Update"
        run: |
          NEXT_UPDATE_TIME=$(TZ="${{ env.TIMEZONE }}" date -d "+8 hours" "+%H:%M:%S %Z")
          echo "::notice title=Next Update::Scheduled for approximately ${NEXT_UPDATE_TIME}"
          echo "## Next Update" >> $GITHUB_STEP_SUMMARY
          echo "- **Scheduled for:** ${NEXT_UPDATE_TIME}" >> $GITHUB_STEP_SUMMARY

      - name: "üìä Workflow Performance Metrics"
        run: |
          echo "::group::Performance Metrics"
          echo "## Performance Metrics" >> $GITHUB_STEP_SUMMARY

          # Calculate duration if possible
          if [ -n "$GITHUB_WORKFLOW_REF" ]; then
            DURATION="$(( $(date +%s) - $GITHUB_RUN_ATTEMPT_STARTED_AT ))"
            echo "- **Total Duration:** $(($DURATION / 60)) minutes and $(($DURATION % 60)) seconds" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Total Duration:** See workflow details in GitHub UI" >> $GITHUB_STEP_SUMMARY
          fi

          echo "- **API Response Time:** Retrieved from execution logs" >> $GITHUB_STEP_SUMMARY
          echo "::endgroup::"

  # ============================================================
  # üìå JOB: RECOVERY (Retries on failure)
  # ============================================================
  recovery:
    name: "üîÑ Recovery Actions"
    needs: [preflight, update-weather, verify]
    if: always() && (needs.update-weather.result == 'failure' || needs.verify.result == 'failure')
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: "üîç Analyze Failure"
        run: |
          echo "::group::Failure Analysis"
          echo "# Workflow Failure Analysis" >> $GITHUB_STEP_SUMMARY
          echo "## Failed Jobs" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.preflight.result }}" == "failure" ]]; then
            echo "- **Preflight:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.update-weather.result }}" == "failure" ]]; then
            echo "- **Weather Update:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.verify.result }}" == "failure" ]]; then
            echo "- **Verification:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Recovery Actions" >> $GITHUB_STEP_SUMMARY
          echo "- Recovery mode activated" >> $GITHUB_STEP_SUMMARY
          echo "- Creating notification for manual intervention" >> $GITHUB_STEP_SUMMARY
          echo "::endgroup::"

      - name: "üìÖ Schedule Re-run"
        if: env.RETRY_STRATEGY != 'none'
        run: |
          # Calculate exponential or linear backoff based on strategy
          if [[ "${{ env.RETRY_STRATEGY }}" == "exponential" ]]; then
            DELAY_MINUTES=$((15 * 2 ** (${{ github.run_attempt }} - 1)))
            # Cap at 4 hours
            DELAY_MINUTES=$((DELAY_MINUTES > 240 ? 240 : DELAY_MINUTES))
          else
            # Linear: 15 minutes per attempt
            DELAY_MINUTES=$((15 * ${{ github.run_attempt }}))
          fi

          NEXT_RETRY=$(date -d "+${DELAY_MINUTES} minutes" "+%H:%M:%S")

          echo "::notice title=Automatic Retry::Scheduled in ${DELAY_MINUTES} minutes (at approximately ${NEXT_RETRY})"
          echo "- **Next automatic retry:** in ${DELAY_MINUTES} minutes (at ${NEXT_RETRY})" >> $GITHUB_STEP_SUMMARY

  # ============================================================
  # üìå JOB: DEBUG (For troubleshooting workflow triggering issues)
  # ============================================================
  debug:
    name: "üîç Workflow Diagnostics"
    runs-on: ubuntu-latest
    # This job always runs regardless of other conditions
    timeout-minutes: 2

    steps:
      - name: "üìã Workflow Trigger Diagnostics"
        run: |
          echo "::group::Trigger Analysis"
          echo "## Workflow Trigger Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Event Name:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Event Path:** ${{ github.event_path }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ref:** ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Attempt:** ${{ github.run_attempt }}" >> $GITHUB_STEP_SUMMARY
          echo "::endgroup::"

          # Dump environment variables for debugging
          echo "::group::Environment Variables"
          env | sort
          echo "::endgroup::"

          # Dump event context
          echo "::group::Event Context"
          cat $GITHUB_EVENT_PATH || echo "Unable to read event context"
          echo "::endgroup::"

          # Check for secrets availability (without revealing them)
          echo "::group::Secrets Availability Check"
          if [[ -n "${{ secrets.OPEN_WEATHER_KEY }}" ]]; then
            echo "OPEN_WEATHER_KEY: Available ‚úÖ"
          else
            echo "OPEN_WEATHER_KEY: Missing ‚ùå"
          fi

          if [[ -n "${{ secrets.GITHUB_TOKEN }}" ]]; then
            echo "GITHUB_TOKEN: Available ‚úÖ"
          else
            echo "GITHUB_TOKEN: Missing ‚ùå"
          fi
          echo "::endgroup::"

      - name: "üåê Test External Access"
        run: |
          echo "::group::Network Connectivity Test"
          # Test GitHub API access
          echo "Testing GitHub API connectivity..."
          curl -s -o /dev/null -w "GitHub API: HTTP %{http_code}\n" https://api.github.com/zen

          # Test OpenWeather API access with a dummy key
          echo "Testing OpenWeather API connectivity..."
          curl -s -o /dev/null -w "OpenWeather API: HTTP %{http_code}\n" "https://api.openweathermap.org/data/2.5/weather?q=London&appid=test"
          echo "::endgroup::"
          echo "::notice::Network connectivity tests completed"
