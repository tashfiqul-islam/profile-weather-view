# Enhanced Documentation Release Management Workflow
# World-class, 2025-ready release automation

name: Documentation Release Workflow

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'src/docs/**'
      - 'meta.json'
      - '.release-please-manifest.json'
      - 'release-please-config.json'

  workflow_dispatch:
    inputs:
      version_override:
        description: "Force specific semantic version"
        required: false
        type: string
      release_type:
        description: "Release strategy"
        required: false
        default: "auto"
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
      dry_run:
        description: "Simulate release without side effects"
        required: false
        type: boolean
        default: false
      debug_mode:
        description: "Enable extensive logging"
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: 20
  BUN_VERSION: latest
  ARTIFACT_DIR: docs-artifacts
  DOCS_SITE_PATH: src/docs
  VERSION_RETENTION_LIMIT: 3
  RELEASE_BRANCH: main

permissions:
  contents: write
  pull-requests: write
  issues: read
  id-token: write
  deployments: write
  pages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  preflight-validation:
    name: "🔍 Preflight Checks"
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.validation.outputs.proceed }}
      debug_mode: ${{ steps.debug-config.outputs.debug_mode }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git Safe Directory
        run: |
          git config --global --add safe.directory "$(pwd)"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Debug Mode Configuration
        id: debug-config
        run: |
          DEBUG_MODE="${{ github.event.inputs.debug_mode || 'false' }}"
          echo "debug_mode=$DEBUG_MODE" >> $GITHUB_OUTPUT

      - name: Comprehensive Repository Validation
        id: validation
        run: |
          required_files=(
            "package.json"
            "meta.json"
            "release-please-config.json"
            ".release-please-manifest.json"
          )
          
          missing_files=()
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done

          if [ ${#missing_files[@]} -ne 0 ]; then
            echo "::error::Missing critical files: ${missing_files[*]}"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          if [ ! -d "${{ env.DOCS_SITE_PATH }}" ]; then
            echo "::error::Documentation directory not found"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "proceed=true" >> $GITHUB_OUTPUT
          echo "::notice::Repository validation successful"

  generate-release:
    name: "🚀 Generate Documentation Release"
    needs: preflight-validation
    if: needs.preflight-validation.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.extract-version.outputs.version }}
      major: ${{ steps.release.outputs.major }}
      minor: ${{ steps.release.outputs.minor }}
      patch: ${{ steps.release.outputs.patch }}
      release_date: ${{ steps.format-date.outputs.formatted_date }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: manifest
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
          skip-github-release: ${{ github.event.inputs.dry_run == 'true' }}

      - name: Extract Version
        id: extract-version
        if: steps.release.outputs.releases_created
        run: |
          TAG="${{ steps.release.outputs.tag_name }}"
          VERSION="${TAG#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "::notice::Documentation release created with version: $VERSION"

      - name: Format Release Date
        id: format-date
        if: steps.release.outputs.releases_created
        run: |
          FORMATTED_DATE=$(date +"%B %d, %Y")
          echo "formatted_date=$FORMATTED_DATE" >> $GITHUB_OUTPUT

      - name: Validate Conventional Commits
        if: steps.release.outputs.releases_created
        run: |
          npx @commitlint/cli --from HEAD~20 --to HEAD

  build-deploy-docs:
    name: "🌐 Build & Deploy Documentation"
    needs: generate-release
    if: needs.generate-release.outputs.releases_created == 'true'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.generate-release.outputs.tag_name }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Configure Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: vitepress

      - name: Install Dependencies
        run: bun install --frozen-lockfile

      - name: Update Version Metadata
        run: |
          # Advanced metadata management script
          VERSION="${{ needs.generate-release.outputs.version }}"
          MAJOR="${{ needs.generate-release.outputs.major }}"
          MINOR="${{ needs.generate-release.outputs.minor }}"
          PATCH="${{ needs.generate-release.outputs.patch }}"
          TIMESTAMP=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          
          # Load current metadata
          jq -c '.' meta.json > /tmp/current-meta.json
          
          # Create new release entry with enhanced metadata
          NEW_RELEASE=$(jq -n \
            --arg version "$VERSION" \
            --arg timestamp "$TIMESTAMP" \
            --arg major "$MAJOR" \
            --arg minor "$MINOR" \
            --arg patch "$PATCH" \
            '{
              "type": "docs",
              "version": $version,
              "timestamp": $timestamp,
              "major": $major,
              "minor": $minor,
              "patch": $patch,
              "channel": "stable",
              "path": "/v\($major).\($minor)/",
              "isLatest": true
            }')
          
          # Advanced version management
          jq --argjson newRelease "$NEW_RELEASE" \
             --argjson limit ${{ env.VERSION_RETENTION_LIMIT }} \
          '
          .docsVersion = $newRelease.version |
          .releases = (
            (.releases | map(select(.type != "docs"))) +
            ($newRelease) +
            (.releases | map(select(.type == "docs" and .version != $newRelease.version)) | sort_by(.version) | reverse | .[0:$limit-1])
          )
          ' /tmp/current-meta.json > meta.json

      - name: Build Documentation
        run: bun run docs:build

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "${{ env.DOCS_SITE_PATH }}/.vitepress/dist"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  create-version-tags:
    name: "🏷️ Create Version Tags"
    needs: [generate-release, build-deploy-docs]
    if: needs.generate-release.outputs.releases_created == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.generate-release.outputs.tag_name }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Create Semantic Version Tags
        run: |
          MAJOR_TAG="docs/v${{ needs.generate-release.outputs.major }}"
          MINOR_TAG="docs/v${{ needs.generate-release.outputs.major }}.${{ needs.generate-release.outputs.minor }}"
          LATEST_TAG="docs/latest"

          # Force-update tags with annotations
          git tag -fa $MAJOR_TAG -m "Documentation Major Release v${{ needs.generate-release.outputs.major }}"
          git tag -fa $MINOR_TAG -m "Documentation Minor Release v${{ needs.generate-release.outputs.major }}.${{ needs.generate-release.outputs.minor }}"
          git tag -fa $LATEST_TAG -m "Latest documentation release"

          # Push tags with force
          git push --force origin $MAJOR_TAG
          git push --force origin $MINOR_TAG
          git push --force origin $LATEST_TAG

  notify:
    name: "📣 Release Notification"
    needs: [generate-release, build-deploy-docs, create-version-tags]
    if: always() && needs.generate-release.outputs.releases_created == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Generate Comprehensive Release Summary
        run: |
          echo "# 📦 Documentation Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "## 🔢 Version Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** v${{ needs.generate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Released:** ${{ needs.generate-release.outputs.release_date }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment URL:** ${{ needs.build-deploy-docs.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "## 🏷️ Version Tags" >> $GITHUB_STEP_SUMMARY
          echo "- Major Tag: \`docs/v${{ needs.generate-release.outputs.major }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Minor Tag: \`docs/v${{ needs.generate-release.outputs.major }}.${{ needs.generate-release.outputs.minor }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Latest Tag: \`docs/latest\`" >> $GITHUB_STEP_SUMMARY

      - name: Update Deployment Status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api \
            --method POST \
            /repos/${{ github.repository }}/deployments \
            -f ref="${{ github.ref }}" \
            -f environment="github-pages" \
            -f description="Docs v${{ needs.generate-release.outputs.version }}" \
            -f auto_merge=false \
            -f required_contexts=[]
