name: "🚀 Semantic Release"

# ============================================================
# ⚡ Trigger Configuration
# ============================================================
on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      debug:
        description: "Enable debug logging"
        required: false
        type: choice
        options: ["true", "false"]
      dry_run:
        description: "Run in dry-run mode"
        type: boolean
        default: false

# ============================================================
# 🚫 Prevent Redundant Runs
# ============================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# ============================================================
# 🔒 Permissions (Least Privilege Principle)
# ============================================================
permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

# ============================================================
# 🌍 Environment Variables
# ============================================================
env:
  GH_TOKEN: ${{ secrets.PAT }}
  NODE_ENV: "production"
  BUN_RUNTIME_SAFETY: "true"
  DEBUG: ${{ (github.event.inputs.debug == 'true' && 'semantic-release:*') || '' }}
  DRY_RUN: ${{ (github.event.inputs.dry_run == 'true' && 'true') || 'false' }}
  GIT_AUTHOR_NAME: "GitHub Actions"
  GIT_AUTHOR_EMAIL: "github-actions@github.com"
  GIT_COMMITTER_NAME: "GitHub Actions"
  GIT_COMMITTER_EMAIL: "github-actions@github.com"

# ============================================================
# 🔄 Jobs
# ============================================================
jobs:
  release-assets:
    name: "🚀 Release"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.check-for-release.outputs.new_release_version }}
      release_upload_url: ${{ steps.check-for-release.outputs.release_upload_url }}
      provenance-assets: ${{ steps.slsa-subjects.outputs.provenance-assets }}
    steps:
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      - name: "🧰 Setup Bun"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: "📦 Install Dependencies"
        run: bun install --frozen-lockfile

      - name: "🔍 Validate Project"
        id: validate
        if: ${{ env.DRY_RUN != 'true' }}
        run: |
          echo "::group::Project Validation"
          bun run type-check
          bun run test:ci
          echo "::endgroup::"

      - name: "🔒 Security Audit"
        id: security-check
        if: ${{ env.DRY_RUN != 'true' }}
        continue-on-error: true
        run: |
          echo "::group::Security Audit"
          if bun audit --level high > bun-audit.txt; then
            echo "✅ No high or critical vulnerabilities found."
          else
            echo "::warning::High or critical vulnerabilities found by bun audit."
            cat bun-audit.txt
          fi
          echo "::endgroup::"

      - name: "Get latest tag before release"
        id: pre-release-check
        run: echo "last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo 'none')" >> $GITHUB_OUTPUT

      - name: "🚀 Run Semantic Release"
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          FLAGS=""
          if [[ "${{ env.DRY_RUN }}" == "true" ]]; then
            FLAGS="--dry-run"
          fi
          if [[ "${{ github.event.inputs.debug }}" == "true" ]]; then
            FLAGS="${FLAGS} --debug"
          fi
          bunx semantic-release $FLAGS

      - name: "Check for new release"
        id: check-for-release
        run: |
          LATEST_TAG_AFTER=$(git describe --tags --abbrev=0 2>/dev/null || echo 'none')
          if [ "${{ steps.pre-release-check.outputs.last_tag }}" != "$LATEST_TAG_AFTER" ]; then
            echo "✅ New release detected: $LATEST_TAG_AFTER"
            echo "new_release_version=${LATEST_TAG_AFTER#v}" >> $GITHUB_OUTPUT
            RELEASE_UPLOAD_URL=$(gh release view "$LATEST_TAG_AFTER" --json uploadUrl -q .uploadUrl)
            echo "release_upload_url=${RELEASE_UPLOAD_URL}" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No new release detected."
            echo "new_release_version=" >> $GITHUB_OUTPUT
            echo "release_upload_url=" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: "Upload changelog artifact"
        if: steps.check-for-release.outputs.new_release_version != ''
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md

      - name: "Generate subjects for SLSA provenance"
        id: slsa-subjects
        if: steps.check-for-release.outputs.new_release_version != ''
        run: |
          ASSETS=("CHANGELOG.md" "package.json" "bun.lockb" "bunfig.toml" "README.md")
          CONTENT=""
          for asset in "${ASSETS[@]}"; do
            if [ -f "$asset" ]; then
              CONTENT+=$(sha256sum "$asset")
              CONTENT+=$'\n'
            fi
          done
          echo "provenance-assets=$(echo -n "$CONTENT" | base64 -w0)" >> "$GITHUB_OUTPUT"

  provenance:
    needs: [release-assets]
    if: needs.release-assets.outputs.version != ''
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: "${{ needs.release-assets.outputs.provenance-assets }}"
      upload-assets: false

  upload-provenance:
    name: "📜 Upload Provenance"
    needs: [release-assets, provenance]
    if: needs.release-assets.outputs.version != ''
    runs-on: ubuntu-latest
    steps:
      - name: "Download provenance artifact"
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.provenance.outputs.provenance-name }}
          path: .

      - name: "Upload provenance to release"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          upload_url: ${{ needs.release-assets.outputs.release_upload_url }}
          asset_path: ${{ needs.provenance.outputs.provenance-name }}
          asset_name: ${{ needs.provenance.outputs.provenance-name }}
          asset_content_type: application/json

  back-merge:
    name: "🔄 Back-Merge & Synchronize Branches"
    needs: [release-assets]
    if: needs.release-assets.outputs.version != '' && github.event.inputs.dry_run != 'true'
    env:
      GH_TOKEN: ${{ secrets.PAT }}
    runs-on: ubuntu-latest
    steps:
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}
      - name: "Run Back-Merge Script"
        run: |
          echo "::group::Back-Merge and Branch Synchronization"

          # Set git identity
          git config --global user.name "${{ env.GIT_AUTHOR_NAME }}"
          git config --global user.email "${{ env.GIT_AUTHOR_EMAIL }}"

          # Check if develop branch exists
          echo "🔹 Checking for develop branch..."
          if git show-ref --verify --quiet refs/remotes/origin/develop; then
            echo "✅ Found develop branch"

            # Fetch all branches and tags to ensure we have the latest state
            echo "🔹 Fetching latest repository state..."
            git fetch --all --tags --force

            # Get the latest release tag for reference
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
            echo "Latest release tag: $LATEST_TAG"

            # Clean workspace completely before starting
            echo "🔹 Cleaning workspace to ensure no conflicts..."
            git reset --hard HEAD
            git clean -fdx

            # Ensure we have the latest master branch
            echo "🔹 Getting the latest master branch..."
            git checkout master
            git pull origin master

            # Store master HEAD for verification
            MASTER_HEAD=$(git rev-parse HEAD)
            echo "Master is at commit: $MASTER_HEAD"

            # Now use the preferred strategy for branch synchronization based on squash merges
            echo "🔹 Synchronizing develop with master's history..."

            # Store original develop HEAD for verification
            git checkout develop
            git pull origin develop
            DEVELOP_HEAD_BEFORE=$(git rev-parse HEAD)
            echo "Develop was at: $DEVELOP_HEAD_BEFORE"

            # COMPLETE HISTORY RESET APPROACH:
            # We will completely reset the develop branch to match master exactly
            # and then create a single new commit with any develop-only changes
            echo "🔹 Completely resetting develop branch history to match master..."

            # Find all commits that are in develop but not in master
            echo "🔹 Identifying develop-only changes..."
            DEVELOP_ONLY_FILES=$(git diff --name-only master...develop)

            # If there are any develop-only files, save them
            if [ -n "$DEVELOP_ONLY_FILES" ]; then
              echo "🔹 Found develop-only changes to preserve"
              mkdir -p /tmp/develop-changes

              # Copy the current state of these files to a temp location
              for FILE in $DEVELOP_ONLY_FILES; do
                if [ -f "$FILE" ]; then
                  echo "Preserving: $FILE"
                  mkdir -p "/tmp/develop-changes/$(dirname "$FILE")"
                  cp "$FILE" "/tmp/develop-changes/$FILE" 2>/dev/null || true
                fi
              done
            else
              echo "🔹 No develop-only changes found"
            fi

            # Completely reset develop branch to be identical to master
            echo "🔹 Resetting develop to exactly match master's history..."
            git checkout master
            git checkout -B develop

            # Copy back develop-only changes if any
            if [ -n "$DEVELOP_ONLY_FILES" ]; then
              echo "🔹 Restoring develop-only changes on clean history..."
              for FILE in $(find /tmp/develop-changes -type f 2>/dev/null); do
                RELATIVE_PATH=${FILE#/tmp/develop-changes/}
                if [ -n "$RELATIVE_PATH" ]; then
                  echo "Restoring: $RELATIVE_PATH"
                  mkdir -p "$(dirname "$RELATIVE_PATH")"
                  cp "$FILE" "$RELATIVE_PATH" 2>/dev/null || true
                fi
              done

              # Commit these changes with a clear message
              git add --all
              HAS_CHANGES=$(git status --porcelain)
              if [ -n "$HAS_CHANGES" ]; then
                git commit -m "chore: preserve develop-only changes [skip ci]"
                echo "✅ Created a clean commit with develop-only changes"
              fi
            fi

            # Force push the updated develop branch with completely rewritten history
            echo "🔹 Force-pushing develop branch with clean history..."
            git push origin develop --force

            # Verify the synchronization was successful
            echo "🔹 Verifying branch synchronization..."
            DEVELOP_HEAD_AFTER=$(git rev-parse HEAD)

            # Check that master's history is now in develop
            if git merge-base --is-ancestor "$MASTER_HEAD" "$DEVELOP_HEAD_AFTER"; then
              echo "✅ Success! Develop branch now has a clean history based on master"
              echo "Master: $MASTER_HEAD"
              echo "Develop (after sync): $DEVELOP_HEAD_AFTER"
              echo "back_merge_status=success" >> $GITHUB_OUTPUT

              # Show commit count difference which should now be minimal
              AHEAD_COUNT=$(git rev-list --count "origin/master..origin/develop")
              BEHIND_COUNT=$(git rev-list --count "origin/develop..origin/master")
              echo "✅ Develop is now only $AHEAD_COUNT commits ahead and $BEHIND_COUNT commits behind master"

              # Also update any feature branches if they exist
              echo "🔹 Checking for active feature branches to update..."
              FEATURE_BRANCHES=$(git branch -r | grep 'origin/feature/' | sed 's/origin\///')
              if [ -n "$FEATURE_BRANCHES" ]; then
                echo "Found feature branches to update"
                for BRANCH in $FEATURE_BRANCHES; do
                  echo "Updating $BRANCH with latest master changes..."
                  git checkout $BRANCH 2>/dev/null || git checkout -b $BRANCH origin/$BRANCH
                  git pull origin $BRANCH

                  # Try to rebase on master
                  if git rebase master; then
                    echo "✅ Successfully rebased $BRANCH on master"
                    git push origin $BRANCH --force
                  else
                    echo "⚠️ Conflicts rebasing $BRANCH, aborting"
                    git rebase --abort
                  fi
                done
              fi
            else
              echo "⚠️ Warning: Synchronization may have failed - master history not in develop"
              echo "Master: $MASTER_HEAD"
              echo "Develop (after attempted sync): $DEVELOP_HEAD_AFTER"
              echo "back_merge_status=failed" >> $GITHUB_OUTPUT
            fi

            # Return to master branch to complete workflow
            git checkout master
          else
            echo "⚠️ No develop branch found, skipping synchronization"
            echo "back_merge_status=skipped" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"

  generate-summary:
    name: "📊 Generate Release Summary"
    needs: [release-assets]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: "Download changelog"
        uses: actions/download-artifact@v4
        with:
          name: changelog
      - name: "Generate Summary"
        id: summary
        run: |
          VERSION="${{ needs.release-assets.outputs.version }}"
          echo "# Semantic Release Results" >> $GITHUB_STEP_SUMMARY
          if [[ "$VERSION" != "" ]]; then
            echo "✅ **Version $VERSION released successfully**" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "✅ **Dry run completed successfully**" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ job.status }}" != "success" ]]; then
            echo "❌ **Release process failed**" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **No new version released**" >> $GITHUB_STEP_SUMMARY
          fi
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "N/A")
          echo "- **Previous Release:** $LAST_TAG" >> $GITHUB_STEP_SUMMARY
