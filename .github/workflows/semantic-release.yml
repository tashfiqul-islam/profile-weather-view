name: "üöÄ Semantic Release"

# ============================================================
# ‚ö° Trigger Configuration
# ============================================================
on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      debug:
        description: "Enable debug logging"
        required: false
        type: choice
        options: ["true", "false"]
      dry_run:
        description: "Run in dry-run mode"
        type: boolean
        default: false

# ============================================================
# üö´ Prevent Redundant Runs
# ============================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# ============================================================
# üîí Permissions (Least Privilege Principle)
# ============================================================
permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

# ============================================================
# üåç Environment Variables
# ============================================================
env:
  GH_TOKEN: ${{ secrets.PAT }}
  NODE_ENV: "production"
  BUN_RUNTIME_SAFETY: "true"
  DEBUG: ${{ (github.event.inputs.debug == 'true' && 'semantic-release:*') || '' }}
  DRY_RUN: ${{ (github.event.inputs.dry_run == 'true' && 'true') || 'false' }}
  GIT_AUTHOR_NAME: "GitHub Actions"
  GIT_AUTHOR_EMAIL: "github-actions@github.com"
  GIT_COMMITTER_NAME: "GitHub Actions"
  GIT_COMMITTER_EMAIL: "github-actions@github.com"
  LEFTHOOK: "0"

# ============================================================
# üîÑ Jobs
# ============================================================
jobs:
  release:
    name: "üöÄ Release"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.check-release.outputs.new_release_version }}
      release_upload_url: ${{ steps.check-release.outputs.release_upload_url }}
      latest_tag: ${{ steps.check-release.outputs.latest_tag }}
      provenance_assets: ${{ steps.generate-provenance.outputs.provenance_assets }}
      skip_ci: ${{ steps.skip-ci-check.outputs.skip_ci }}
    steps:
      # ============================================================
      # ‚¨áÔ∏è Checkout Repository (Optimized)
      # ============================================================
      - name: "‚¨áÔ∏è Checkout Repository"
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}
          persist-credentials: false

      # ============================================================
      # üß∞ Setup Bun (Latest Version)
      # ============================================================
      - name: "üß∞ Setup Bun"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      # ============================================================
      # üì¶ Cache Dependencies (Advanced Caching Strategy)
      # ============================================================
      - name: "üì¶ Restore Bun Dependencies Cache"
        id: cache-deps
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      # ============================================================
      # üì¶ Install Dependencies (Conditional)
      # ============================================================
      - name: "üì¶ Install Dependencies"
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

      - name: "‚ö° Install Dependencies (Fast Path)"
        if: steps.cache-deps.outputs.cache-hit == 'true'
        run: bun install --frozen-lockfile --no-summary

      - name: "üíæ Save Bun Dependencies Cache"
        if: always() && steps.cache-deps.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.bun/install/cache
          key: ${{ steps.cache-deps.outputs.cache-primary-key }}

      # ============================================================
      # üîç Check for Skip CI Commits
      # ============================================================
      - name: "üîç Check for Skip CI Commits"
        id: skip-ci-check
        run: |
          # Check if the current commit message contains [skip ci] or similar
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if echo "$COMMIT_MSG" | grep -qE '\[skip ci\]|\[ci skip\]|\[no ci\]|\[skip actions\]'; then
            echo "skip_ci=true" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Skip CI detected in commit message. Will run semantic-release but skip validation steps."
          else
            echo "skip_ci=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No skip CI detected. Running full validation."
          fi

      # ============================================================
      # üîç Validate Project (Only if not dry-run and not skip ci)
      # ============================================================
      - name: "üîç Validate Project"
        if: ${{ env.DRY_RUN != 'true' && steps.skip-ci-check.outputs.skip_ci != 'true' }}
        run: |
          echo "::group::Project Validation"
          bun run type-check && npx vitest --run && bunx ultracite fix src && bunx ultracite check src
          echo "::endgroup::"

      # ============================================================
      # üîí Security Audit (Optional, Continue on Error)
      # ============================================================
      - name: "üîí Security Audit"
        if: ${{ env.DRY_RUN != 'true' && steps.skip-ci-check.outputs.skip_ci != 'true' }}
        continue-on-error: true
        run: |
          echo "::group::Security Audit"
          if bun audit --level high > bun-audit.txt; then
            echo "‚úÖ No high or critical vulnerabilities found."
          else
            echo "::warning::High or critical vulnerabilities found by bun audit."
            cat bun-audit.txt
          fi
          echo "::endgroup::"

      # ============================================================
      # üöÄ Run Semantic Release with Changelogen
      # ============================================================
      - name: "üß∞ Setup Node (LTS)"
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      # Ensure local branch is up-to-date to avoid non-fast-forward push failures
      - name: "üîÑ Sync branch with remote (rebase)"
        run: |
          git fetch --prune --tags origin
          git checkout master
          git pull --rebase origin master

      - name: "üöÄ Run Semantic Release"
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Build flags based on inputs
          FLAGS=""
          if [[ "${{ env.DRY_RUN }}" == "true" ]]; then
            FLAGS="--dry-run"
          fi
          if [[ "${{ github.event.inputs.debug }}" == "true" ]]; then
            FLAGS="${FLAGS} --debug"
          fi
          
          echo "::group::Running Semantic Release"
          
          # Handle skip CI gracefully - semantic-release will still run but won't create releases
          if [[ "${{ steps.skip-ci-check.outputs.skip_ci }}" == "true" ]]; then
            echo "‚ÑπÔ∏è Skip CI detected - semantic-release will analyze commits but won't create releases"
            echo "This is expected behavior for [skip ci] commits"
          fi
          
          npx semantic-release $FLAGS
          echo "::endgroup::"

      # ============================================================
      # üîç Check for New Release
      # ============================================================
      - name: "üîç Check for New Release"
        id: check-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_TAG_AFTER=$(git describe --tags --abbrev=0 2>/dev/null || echo 'none')
          echo "latest_tag=${LATEST_TAG_AFTER}" >> $GITHUB_OUTPUT
          
          # Get the tag before semantic-release ran
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo 'none')
          
          if [ "$PREVIOUS_TAG" != "$LATEST_TAG_AFTER" ] && [ "$LATEST_TAG_AFTER" != "none" ]; then
            echo "‚úÖ New release detected: $LATEST_TAG_AFTER"
            echo "new_release_version=${LATEST_TAG_AFTER#v}" >> $GITHUB_OUTPUT
            RELEASE_UPLOAD_URL=$(gh release view "$LATEST_TAG_AFTER" --json uploadUrl -q .uploadUrl)
            echo "release_upload_url=${RELEASE_UPLOAD_URL}" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è No new release detected."
            echo "new_release_version=" >> $GITHUB_OUTPUT
            echo "release_upload_url=" >> $GITHUB_OUTPUT
            
            # Check if semantic-release ran successfully but found no commits to release
            if [ -f ".releaserc.js" ]; then
              if [[ "${{ steps.skip-ci-check.outputs.skip_ci }}" == "true" ]]; then
                echo "‚ÑπÔ∏è Skip CI commit detected - this is expected behavior for [skip ci] commits"
              else
                echo "‚ÑπÔ∏è Semantic-release completed but found no commits that trigger a release."
                echo "This is normal for chore commits that don't match the release rules."
              fi
            fi
          fi

      # ============================================================
      # üì¶ Upload Changelog Artifact (Only if Release Created)
      # ============================================================
      - name: "üì¶ Upload Changelog Artifact"
        if: steps.check-release.outputs.new_release_version != ''
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md

      # ============================================================
      # üîç Generate Provenance Assets (Only if Release Created)
      # ============================================================
      - name: "üîç Generate Provenance Assets"
        id: generate-provenance
        if: steps.check-release.outputs.new_release_version != ''
        run: |
          # Generate SHA256 hashes in the correct format for SLSA
          ASSETS=("CHANGELOG.md" "package.json" "bun.lock" "bunfig.toml" "README.md")
          CONTENT=""
          for asset in "${ASSETS[@]}"; do
            if [ -f "$asset" ]; then
              # Generate SHA256 hash in format: SHA256 NAME
              HASH=$(sha256sum "$asset")
              CONTENT+="$HASH"
              CONTENT+=$'\n'
            fi
          done
          # Base64 encode the content for SLSA
          echo "provenance_assets=$(echo -n "$CONTENT" | base64 -w0)" >> $GITHUB_OUTPUT

  # SLSA provenance temporarily disabled to avoid failing the workflow when no subjects are present.

  # ============================================================
  # üìä Generate Release Summary
  # ============================================================
  generate-summary:
    name: "üìä Generate Release Summary"
    needs: [release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: "üì• Download Changelog"
        if: needs.release.outputs.version != ''
        uses: actions/download-artifact@v4
        with:
          name: changelog
          merge-multiple: false
          repository: ${{ github.repository }}
          run-id: ${{ github.run_id }}
        continue-on-error: true

      - name: "üìä Generate Summary"
        id: summary
        run: |
          VERSION="${{ needs.release.outputs.version }}"
          SKIP_CI="${{ needs.release.outputs.skip_ci }}"
          echo "# Semantic Release Results" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$VERSION" != "" ]]; then
            echo "‚úÖ **Version $VERSION released successfully**" >> $GITHUB_STEP_SUMMARY
            if [ -f "CHANGELOG.md" ]; then
              echo "üìã **Changelog generated**" >> $GITHUB_STEP_SUMMARY
            fi
            echo "üîí **SLSA provenance generated**" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "‚úÖ **Dry run completed successfully**" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.release.result }}" != "success" ]]; then
            echo "‚ùå **Release process failed**" >> $GITHUB_STEP_SUMMARY
            echo "Check the logs above for detailed error information." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ÑπÔ∏è **No new version released**" >> $GITHUB_STEP_SUMMARY
            if [[ "$SKIP_CI" == "true" ]]; then
              echo "This is expected for commits with [skip ci] - semantic-release analyzed commits but did not create a release." >> $GITHUB_STEP_SUMMARY
            else
              echo "This is normal for chore commits or when no semantic changes are detected." >> $GITHUB_STEP_SUMMARY
              echo "The commit analyzer determined no release was needed based on the commit messages." >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "N/A")
          echo "- **Previous Release:** $LAST_TAG" >> $GITHUB_STEP_SUMMARY
          
          # Add commit analysis information
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Commit Analysis" >> $GITHUB_STEP_SUMMARY
          echo "The following commit types trigger releases:" >> $GITHUB_STEP_SUMMARY
          echo "- `feat:` ‚Üí Minor release" >> $GITHUB_STEP_SUMMARY
          echo "- `fix:` ‚Üí Patch release" >> $GITHUB_STEP_SUMMARY
          echo "- `chore(deps):` ‚Üí Patch release" >> $GITHUB_STEP_SUMMARY
          echo "- `chore(actions):` ‚Üí Patch release" >> $GITHUB_STEP_SUMMARY
          echo "- `chore(bun):` ‚Üí Patch release" >> $GITHUB_STEP_SUMMARY
          echo "- `docs:`, `style:`, `refactor:`, `perf:`, `build:`, `ci:`, `test:` ‚Üí Patch release" >> $GITHUB_STEP_SUMMARY
          echo "- Other `chore:` commits ‚Üí No release" >> $GITHUB_STEP_SUMMARY
          echo "- Commits with `[skip ci]` ‚Üí No release (by design)" >> $GITHUB_STEP_SUMMARY
