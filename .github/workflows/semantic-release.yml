name: "🚀 Semantic Release"

# ============================================================
# ⚡ Trigger Configuration
# ============================================================
on:
  push:
    branches:
      - master
    paths-ignore:
      - 'CHANGELOG.md'
      - 'package.json'
      - '*.md'

  workflow_dispatch:
    inputs:
      debug:
        description: "Enable debug logging"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
      dry_run:
        description: "Run in dry-run mode (no actual release)"
        type: boolean
        default: false

# ============================================================
# 🚫 Prevent Redundant Runs
# ============================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# ============================================================
# 🔒 Permissions (Least Privilege Principle)
# ============================================================
permissions:
  contents: write  # For repository updates, Git tags
  issues: write    # For issue comments
  pull-requests: write  # For PR comments
  id-token: write  # For provenance generation (npm best practice)

# ============================================================
# 🌍 Environment Variables
# ============================================================
env:
  GH_TOKEN: ${{ secrets.PAT }}
  NODE_ENV: "production"
  BUN_RUNTIME_SAFETY: "true"
  DEBUG: ${{ github.event.inputs.debug == 'true' && 'semantic-release:*' || '' }}
  DRY_RUN: ${{ github.event.inputs.dry_run == 'true' || 'false' }}
  GIT_AUTHOR_NAME: "GitHub Actions"
  GIT_AUTHOR_EMAIL: "github-actions@github.com"
  GIT_COMMITTER_NAME: "GitHub Actions"
  GIT_COMMITTER_EMAIL: "github-actions@github.com"

# ============================================================
# 🔄 Jobs
# ============================================================
jobs:
  release:
    name: "🚀 Release"
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      # -------------------------------------------------------
      # 📋 Setup
      # -------------------------------------------------------
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for correct versioning
          persist-credentials: true
          token: ${{ secrets.PAT }}

      - name: "🔍 Initialize Workflow"
        id: init
        run: |
          echo "::group::Environment Information"
          echo "🔹 Repository: ${{ github.repository }}"
          echo "🔹 Branch: ${{ github.ref_name }}"
          echo "🔹 Trigger: ${{ github.event_name }}"
          echo "🔹 Commit: ${{ github.sha }}"
          echo "🔹 Mode: ${{ env.DRY_RUN == 'true' && 'Dry Run' || 'Release' }}"
          echo "🔹 Debug: ${{ github.event.inputs.debug == 'true' && 'Enabled' || 'Disabled' }}"
          echo "::endgroup::"

          # Extract Bun version from package.json
          BUN_VERSION=$(node -e "try { const pkg = require('./package.json'); const pm = pkg.packageManager || ''; const version = pm.match(/bun@(.*)/); console.log(version ? version[1] : '1.2.10'); } catch (e) { console.log('1.2.10'); }")
          echo "bun_version=${BUN_VERSION}" >> $GITHUB_OUTPUT

          # Get last tag for reference
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          echo "last_tag=${LAST_TAG}" >> $GITHUB_OUTPUT
          echo "::notice::Last release tag: ${LAST_TAG}"

      # -------------------------------------------------------
      # ⚙️ Runtime Setup
      # -------------------------------------------------------
      - name: "🧰 Setup Bun"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ steps.init.outputs.bun_version }}

      - name: "📦 Restore Dependencies Cache"
        uses: actions/cache/restore@v4
        id: bun-cache
        with:
          path: |
            node_modules
            ~/.bun/install/cache
            bun.lockb
          key: ${{ runner.os }}-bun-${{ hashFiles('**/package.json', '**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
            ${{ runner.os }}-
          enableCrossOsArchive: false

      - name: "📦 Install Dependencies"
        id: deps
        run: |
          echo "::group::Dependency Installation"
          if [ "${{ steps.bun-cache.outputs.cache-hit }}" == "true" ]; then
            echo "::notice::Using cached dependencies"
          fi
          echo "Installing dependencies..."
          bun install --no-summary
          # Verify integrity
          bun --revision
          echo "::endgroup::"

      - name: "📝 Commit Lockfile Changes"
        run: |
          # Check if the lockfile has changed
          if [[ -n "$(git status --porcelain bun.lockb)" ]]; then
            echo "::notice::Lockfile has been updated. Committing changes..."
            git config --local user.name "GitHub Actions"
            git config --local user.email "github-actions@github.com"
            git add bun.lockb
            git commit -m "chore(ci): update bun.lockb"
            git push
          else
            echo "✅ Lockfile is up to date."
          fi

      - name: "💾 Save Dependencies Cache"
        uses: actions/cache/save@v4
        if: always()
        with:
          path: |
            node_modules
            ~/.bun/install/cache
            bun.lockb
          key: ${{ runner.os }}-bun-${{ hashFiles('**/package.json', '**/bun.lockb') }}
          enableCrossOsArchive: false
      # -------------------------------------------------------
      # 🧪 Validation
      # -------------------------------------------------------
      - name: "🔍 Validate Project"
        id: validate
        if: ${{ env.DRY_RUN != 'true' }}
        run: |
          echo "::group::Project Validation"
          echo "🔹 Running TypeScript checks..."
          bun run type-check

          # Run a subset of critical tests rather than the whole test suite
          echo "🔹 Running critical path tests..."
          bun run test --run -- 'src/__tests__/unit/index.test.ts' 'src/__tests__/unit/services/fetchWeather.test.ts'

          echo "🔹 Validating build process..."
          # Ensure project can be built successfully
          bun run build || echo "⚠️ Warning: Build script not found, skipping build validation"

          # Simple code quality check focused on production files
          echo "🔹 Checking for code quality issues..."
          ISSUE_COUNT=$(grep -r "TODO\|FIXME\|console.log" src/weather-update/ | wc -l)
          if [ "$ISSUE_COUNT" -gt 0 ]; then
            echo "⚠️ Warning: Found $ISSUE_COUNT potential code quality issues in production code"
          fi
          echo "::endgroup::"

      # -------------------------------------------------------
      # 🔒 Security Check
      # -------------------------------------------------------
      - name: "🔒 Quick Security Scan"
        id: security-check
        if: ${{ env.DRY_RUN != 'true' }}
        continue-on-error: true
        run: |
          echo "::group::Security Scan"
          echo "🔹 Running minimal security scan..."

          # Generate package lock for npm audit with legacy-peer-deps flag to handle dependency conflicts
          npm i --package-lock-only --ignore-scripts --no-audit --legacy-peer-deps

          # Run only high and critical vulnerability check
          npm audit --audit-level=high --json > npm-audit.json || true

          # Check for high and critical vulnerabilities only
          HIGH_VULN_COUNT=$(jq '.metadata.vulnerabilities.high' npm-audit.json 2>/dev/null || echo "0")
          CRITICAL_VULN_COUNT=$(jq '.metadata.vulnerabilities.critical' npm-audit.json 2>/dev.null || echo "0")

          # Handle empty or invalid JSON
          if [ "$HIGH_VULN_COUNT" = "null" ] || [ -z "$HIGH_VULN_COUNT" ]; then HIGH_VULN_COUNT=0; fi
          if [ "$CRITICAL_VULN_COUNT" = "null" ] || [ -z "$CRITICAL_VULN_COUNT" ]; then CRITICAL_VULN_COUNT=0; fi

          echo "📊 Found $HIGH_VULN_COUNT high and $CRITICAL_VULN_COUNT critical vulnerabilities"

          # Set output but don't fail the build - just warn
          if [ "$HIGH_VULN_COUNT" -gt 0 ] || [ "$CRITICAL_VULN_COUNT" -gt 0 ]; then
            echo "sec_issues_found=true" >> $GITHUB_OUTPUT
            echo "::warning::Security issues found: $HIGH_VULN_COUNT high, $CRITICAL_VULN_COUNT critical vulnerabilities"
          else
            echo "sec_issues_found=false" >> $GITHUB_OUTPUT
            echo "✅ No significant security issues found"
          fi
          echo "::endgroup::"

      # -------------------------------------------------------
      # 🚀 Semantic Release
      # -------------------------------------------------------
      - name: "🚀 Run Semantic Release"
        id: semantic-release
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          echo "::group::Semantic Release Process"

          # Configure release flags based on inputs
          FLAGS=""
          if [[ "${{ env.DRY_RUN }}" == "true" ]]; then
            FLAGS="--dry-run"
            echo "Running in dry-run mode (no actual release)"
          fi

          # Add debug flags if needed
          if [[ "${{ github.event.inputs.debug }}" == "true" ]]; then
            FLAGS="${FLAGS} --debug"
            echo "Debug mode enabled"
          fi

          # Set git identity for commits
          git config --global user.name "${{ env.GIT_AUTHOR_NAME }}"
          git config --global user.email "${{ env.GIT_AUTHOR_EMAIL }}"

          # Execute semantic-release
          echo "Executing: bunx semantic-release ${FLAGS}"
          bunx semantic-release ${FLAGS}
          SEMANTIC_STATUS=$?

          # Handle semantic-release status
          if [ $SEMANTIC_STATUS -eq 0 ]; then
            echo "::notice::Semantic release completed successfully"

            # Extract the released version from package.json
            VERSION=$(node -e "try { console.log(require('./package.json').version) } catch (e) { console.log('') }")

            if [[ -n "$VERSION" ]]; then
              echo "version=${VERSION}" >> $GITHUB_OUTPUT
              echo "::notice::Version v${VERSION} released!"
            elif [[ "${{ env.DRY_RUN }}" == "true" ]]; then
              echo "status=dry-run" >> $GITHUB_OUTPUT
              echo "::notice::Dry run completed successfully"
            else
              echo "status=no-release" >> $GITHUB_OUTPUT
              echo "::notice::No release required - no relevant changes detected"
            fi
          else
            echo "::error::Semantic release failed with exit code $SEMANTIC_STATUS"
            exit $SEMANTIC_STATUS
          fi

          echo "::endgroup::"

      # -------------------------------------------------------
      # 🔄 Back-Merge & Synchronize Branches
      # -------------------------------------------------------
      - name: "🔄 Back-Merge & Synchronize Branches"
        id: back-merge
        if: steps.semantic-release.outputs.version != '' && env.DRY_RUN != 'true'
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          echo "::group::Back-Merge and Branch Synchronization"

          # Set git identity
          git config --global user.name "${{ env.GIT_AUTHOR_NAME }}"
          git config --global user.email "${{ env.GIT_AUTHOR_EMAIL }}"

          # Check if develop branch exists
          echo "🔹 Checking for develop branch..."
          if git show-ref --verify --quiet refs/remotes/origin/develop; then
            echo "✅ Found develop branch"

            # Fetch all branches and tags to ensure we have the latest state
            echo "🔹 Fetching latest repository state..."
            git fetch --all --tags --force

            # Get the latest release tag for reference
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
            echo "Latest release tag: $LATEST_TAG"

            # Clean workspace completely before starting
            echo "🔹 Cleaning workspace to ensure no conflicts..."
            git reset --hard HEAD
            git clean -fdx

            # Ensure we have the latest master branch
            echo "🔹 Getting the latest master branch..."
            git checkout master
            git pull origin master

            # Store master HEAD for verification
            MASTER_HEAD=$(git rev-parse HEAD)
            echo "Master is at commit: $MASTER_HEAD"

            # Now use the preferred strategy for branch synchronization based on squash merges
            echo "🔹 Synchronizing develop with master's history..."

            # Store original develop HEAD for verification
            git checkout develop
            git pull origin develop
            DEVELOP_HEAD_BEFORE=$(git rev-parse HEAD)
            echo "Develop was at: $DEVELOP_HEAD_BEFORE"

            # COMPLETE HISTORY RESET APPROACH:
            # We will completely reset the develop branch to match master exactly
            # and then create a single new commit with any develop-only changes
            echo "🔹 Completely resetting develop branch history to match master..."

            # Find all commits that are in develop but not in master
            echo "🔹 Identifying develop-only changes..."
            DEVELOP_ONLY_FILES=$(git diff --name-only master...develop)

            # If there are any develop-only files, save them
            if [ -n "$DEVELOP_ONLY_FILES" ]; then
              echo "🔹 Found develop-only changes to preserve"
              mkdir -p /tmp/develop-changes

              # Copy the current state of these files to a temp location
              for FILE in $DEVELOP_ONLY_FILES; do
                if [ -f "$FILE" ]; then
                  echo "Preserving: $FILE"
                  mkdir -p "/tmp/develop-changes/$(dirname "$FILE")"
                  cp "$FILE" "/tmp/develop-changes/$FILE" 2>/dev/null || true
                fi
              done
            else
              echo "🔹 No develop-only changes found"
            fi

            # Completely reset develop branch to be identical to master
            echo "🔹 Resetting develop to exactly match master's history..."
            git checkout master
            git checkout -B develop

            # Copy back develop-only changes if any
            if [ -n "$DEVELOP_ONLY_FILES" ]; then
              echo "🔹 Restoring develop-only changes on clean history..."
              for FILE in $(find /tmp/develop-changes -type f 2>/dev/null); do
                RELATIVE_PATH=${FILE#/tmp/develop-changes/}
                if [ -n "$RELATIVE_PATH" ]; then
                  echo "Restoring: $RELATIVE_PATH"
                  mkdir -p "$(dirname "$RELATIVE_PATH")"
                  cp "$FILE" "$RELATIVE_PATH" 2>/dev/null || true
                fi
              done

              # Commit these changes with a clear message
              git add --all
              HAS_CHANGES=$(git status --porcelain)
              if [ -n "$HAS_CHANGES" ]; then
                git commit -m "chore: preserve develop-only changes [skip ci]"
                echo "✅ Created a clean commit with develop-only changes"
              fi
            fi

            # Force push the updated develop branch with completely rewritten history
            echo "🔹 Force-pushing develop branch with clean history..."
            git push origin develop --force

            # Verify the synchronization was successful
            echo "🔹 Verifying branch synchronization..."
            DEVELOP_HEAD_AFTER=$(git rev-parse HEAD)

            # Check that master's history is now in develop
            if git merge-base --is-ancestor "$MASTER_HEAD" "$DEVELOP_HEAD_AFTER"; then
              echo "✅ Success! Develop branch now has a clean history based on master"
              echo "Master: $MASTER_HEAD"
              echo "Develop (after sync): $DEVELOP_HEAD_AFTER"
              echo "back_merge_status=success" >> $GITHUB_OUTPUT

              # Show commit count difference which should now be minimal
              AHEAD_COUNT=$(git rev-list --count "origin/master..origin/develop")
              BEHIND_COUNT=$(git rev-list --count "origin/develop..origin/master")
              echo "✅ Develop is now only $AHEAD_COUNT commits ahead and $BEHIND_COUNT commits behind master"

              # Also update any feature branches if they exist
              echo "🔹 Checking for active feature branches to update..."
              FEATURE_BRANCHES=$(git branch -r | grep 'origin/feature/' | sed 's/origin\///')
              if [ -n "$FEATURE_BRANCHES" ]; then
                echo "Found feature branches to update"
                for BRANCH in $FEATURE_BRANCHES; do
                  echo "Updating $BRANCH with latest master changes..."
                  git checkout $BRANCH 2>/dev/null || git checkout -b $BRANCH origin/$BRANCH
                  git pull origin $BRANCH

                  # Try to rebase on master
                  if git rebase master; then
                    echo "✅ Successfully rebased $BRANCH on master"
                    git push origin $BRANCH --force
                  else
                    echo "⚠️ Conflicts rebasing $BRANCH, aborting"
                    git rebase --abort
                  fi
                done
              fi
            else
              echo "⚠️ Warning: Synchronization may have failed - master history not in develop"
              echo "Master: $MASTER_HEAD"
              echo "Develop (after attempted sync): $DEVELOP_HEAD_AFTER"
              echo "back_merge_status=failed" >> $GITHUB_OUTPUT
            fi

            # Return to master branch to complete workflow
            git checkout master
          else
            echo "⚠️ No develop branch found, skipping synchronization"
            echo "back_merge_status=skipped" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"

      # -------------------------------------------------------
      # 📊 Release Summary
      # -------------------------------------------------------
      - name: "📊 Generate Release Summary"
        if: always()
        run: |
          echo "# Semantic Release Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # If we have version output, a release happened
          if [[ "${{ steps.semantic-release.outputs.version }}" != "" ]]; then
            echo "✅ **Version ${{ steps.semantic-release.outputs.version }} released successfully**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Add changelog info if available
            if [[ -f "CHANGELOG.md" ]]; then
              echo "## Release Notes" >> $GITHUB_STEP_SUMMARY
              echo "See [CHANGELOG.md](../blob/master/CHANGELOG.md) for detailed release notes." >> $GITHUB_STEP_SUMMARY

              # Extract the latest release notes from CHANGELOG.md
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Latest Changes" >> $GITHUB_STEP_SUMMARY
              echo "```" >> $GITHUB_STEP_SUMMARY
              sed -n "/## \[${{ steps.semantic-release.outputs.version }}/,/## \[/p" CHANGELOG.md | sed '1p;/## \[/d' | head -n 15 >> $GITHUB_STEP_SUMMARY
              echo "..." >> $GITHUB_STEP_SUMMARY
              echo "```" >> $GITHUB_STEP_SUMMARY
            fi

          elif [[ "${{ steps.semantic-release.outputs.status }}" == "dry-run" ]]; then
            echo "✅ **Dry run completed successfully**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No changes were made to the repository." >> $GITHUB_STEP_SUMMARY

          elif [[ "${{ steps.semantic-release.outputs.status }}" == "no-release" ]]; then
            echo "ℹ️ **No new version released**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No changes that would trigger a semantic version bump were detected." >> $GITHUB_STEP_SUMMARY

          elif [[ "${{ job.status }}" != "success" ]]; then
            echo "❌ **Release process failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the workflow logs for more information." >> $GITHUB_STEP_SUMMARY
          fi

          # Add execution stats
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Execution Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** [\`${GITHUB_SHA:0:7}\`](../commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Run:** [#${{ github.run_number }}](../actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Release:** ${{ steps.init.outputs.last_tag }}" >> $GITHUB_STEP_SUMMARY

      # -------------------------------------------------------
      # 📦 Upload Artifacts
      # -------------------------------------------------------
      - name: "📤 Upload Release Output Artifact"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semantic-release-output-${{ github.run_id }}
          path: |
            semantic-release-output.log
            CHANGELOG.md
          retention-days: 7
          if-no-files-found: ignore
