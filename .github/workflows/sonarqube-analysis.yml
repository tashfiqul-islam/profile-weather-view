name: "🔍 SonarQube Analysis"

# ============================================================
# ⚡ Trigger Configuration
# ============================================================
on:
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master" ]
    types: [ "opened", "synchronize", "reopened" ]

# ============================================================
# 🔒 Permissions (Least Privilege Principle)
# ============================================================
permissions:
  contents: read
  pull-requests: read
  security-events: write

# ============================================================
# 🌍 Environment Variables
# ============================================================
env:
  NODE_ENV: "test"
  CI: "true"
  BUN_RUNTIME_SAFETY: "true"

# ============================================================
# 🔄 Jobs
# ============================================================
jobs:
  sonarqube:
    name: "SonarQube Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Will not run if skip ci is in commit message
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}

    steps:
      # -------------------------------------------------------
      # 📋 Setup
      # -------------------------------------------------------
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          # Disabling shallow clone for better relevancy of analysis
          fetch-depth: 0

      - name: "🔧 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: "🔧 Setup Bun Runtime"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: "📦 Install Dependencies"
        run: bun install

      # -------------------------------------------------------
      # 🧪 Test & Coverage
      # -------------------------------------------------------
      - name: "🧪 Verify Test Coverage"
        run: |
          echo "::group::Test Coverage Verification"
          echo "Ensuring all tests are running properly before SonarQube analysis"
          bun test:coverage
          echo "::endgroup::"

      - name: "✅ Run Tests with Coverage"
        run: |
          echo "::group::Test Execution"
          bun test -- --coverage --reporter=junit
          echo "::endgroup::"
        env:
          BUN_RUNTIME_SAFETY: true
          CI: true

      - name: "📊 Generate Enhanced Coverage Report"
        run: |
          echo "::group::Coverage Report Validation"
          echo "Verifying LCOV report exists and is valid"
          ls -la coverage/
          cat coverage/lcov.info | grep -q "SF:" || echo "Error: Invalid LCOV file format"
          echo "Coverage report generated successfully"
          echo "::endgroup::"

      # -------------------------------------------------------
      # 🔍 Verify SonarQube Connection
      # -------------------------------------------------------
      - name: "🔍 Verify SonarQube Connection"
        id: sonar-connection-test
        run: |
          echo "::group::SonarQube Connection Test"
          echo "Testing connection to SonarQube server..."

          # Mask the URL for logs but test the connection
          SONAR_HOST="${{ secrets.SONAR_HOST_URL }}"
          SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}"

          # Extract domain without protocol for the curl test
          SONAR_DOMAIN=$(echo "$SONAR_HOST" | sed -e 's|^[^/]*//||' -e 's|/.*$||')

          echo "Testing connection to SonarQube server domain: $(echo $SONAR_DOMAIN | cut -d'.' -f1).***.com"

          # Test basic connectivity to the domain
          if ! curl --silent --head --fail --connect-timeout 10 "https://$SONAR_DOMAIN"; then
            echo "::error::Cannot connect to SonarQube server domain. Please check network connectivity and firewall rules."
            echo "connection_ok=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Connection to SonarQube domain successful"
          fi

          echo "connection_ok=true" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      # -------------------------------------------------------
      # 🔧 Prepare SonarQube Environment Variables
      # -------------------------------------------------------
      - name: "🔧 Prepare SonarQube Environment"
        id: prepare-sonar
        run: |
          echo "::group::SonarQube Environment Preparation"
          # Create the .scannerwork directory with appropriate permissions
          mkdir -p $GITHUB_WORKSPACE/.scannerwork
          chmod 777 $GITHUB_WORKSPACE/.scannerwork

          # Export GITHUB_WORKSPACE as environment variable
          echo "SONAR_SCANNER_WORK_DIR=$GITHUB_WORKSPACE/.scannerwork" >> $GITHUB_ENV

          echo "Workspace path: $GITHUB_WORKSPACE"
          echo "Scanner work directory: $GITHUB_WORKSPACE/.scannerwork"
          echo "::endgroup::"

      # -------------------------------------------------------
      # 🔍 SonarQube Analysis
      # -------------------------------------------------------
      - name: "🔧 Setup SonarQube"
        uses: SonarSource/sonarqube-scan-action@v5
        if: steps.sonar-connection-test.outputs.connection_ok == 'true'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        with:
          args: >
            -Dsonar.projectKey=tashfiqul-islam_profile-weather-view
            -Dsonar.projectName=profile-weather-view
            -Dsonar.organization=tashfiqul-islam
            -Dsonar.javascript.lcov.reportPaths=${{ github.workspace }}/coverage/lcov.info
            -Dsonar.testExecutionReportPaths=${{ github.workspace }}/test-results/junit.xml
            -Dsonar.working.directory=${{ github.workspace }}/.scannerwork
            -Dsonar.scanner.metadataFilePath=${{ github.workspace }}/.scannerwork/report-task.txt
            -Dsonar.verbose=true

      - name: "🚦 SonarQube Quality Gate Check"
        id: sonarqube-quality-gate-check
        if: steps.sonar-connection-test.outputs.connection_ok == 'true'
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          scanMetadataReportFile: ${{ github.workspace }}/.scannerwork/report-task.txt

      # -------------------------------------------------------
      # 📊 Results & Artifacts
      # -------------------------------------------------------
      - name: "📊 Upload Coverage Reports"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

      - name: "📝 Quality Gate Status Summary"
        if: always()
        run: |
          echo "::group::Quality Gate Summary"
          CONN_OK="${{ steps.sonar-connection-test.outputs.connection_ok || 'false' }}"

          if [ "$CONN_OK" != "true" ]; then
            echo "❌ SonarQube Connection Failed"
            echo "## SonarQube Connection Error" >> $GITHUB_STEP_SUMMARY
            echo "Could not establish a connection to the SonarQube server. Please check:" >> $GITHUB_STEP_SUMMARY
            echo "- SONAR_TOKEN secret is valid and not expired" >> $GITHUB_STEP_SUMMARY
            echo "- SONAR_HOST_URL is correctly formatted and accessible" >> $GITHUB_STEP_SUMMARY
            echo "- Network connectivity and firewall rules allow connections to SonarQube" >> $GITHUB_STEP_SUMMARY
            echo "- SonarQube service is running and accessible from GitHub Actions" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "💡 **Troubleshooting Tip:** Try testing the connection manually from your local environment" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          if [ "${{ steps.sonarqube-quality-gate-check.outcome }}" == "success" ]; then
            echo "✅ Quality Gate Passed"
            echo "Quality Gate Status: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Quality Gate Failed - Please check the SonarQube dashboard for details"
            echo "Common issues to check:"
            echo "  - Code coverage below 100%"
            echo "  - Code duplication"
            echo "  - Security hotspots"

            echo "Quality Gate Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "## Common reasons for failure:" >> $GITHUB_STEP_SUMMARY
            echo "- **Code Coverage:** Ensure 100% test coverage" >> $GITHUB_STEP_SUMMARY
            echo "- **Code Duplication:** Refactor duplicated code" >> $GITHUB_STEP_SUMMARY
            echo "- **Security Hotspots:** Address security issues" >> $GITHUB_STEP_SUMMARY
          fi
          echo "::endgroup::"
