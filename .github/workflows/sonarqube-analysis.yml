name: "🔍 SonarQube Analysis"

# ============================================================
# ⚡ Trigger Configuration
# ============================================================
on:
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master" ]
    types: [ "opened", "synchronize", "reopened" ]

# ============================================================
# 🔒 Permissions (Least Privilege Principle)
# ============================================================
permissions:
  contents: read
  pull-requests: read

# ============================================================
# 🌍 Environment Variables
# ============================================================
env:
  NODE_ENV: "test"
  CI: "true"
  BUN_RUNTIME_SAFETY: "true"

# ============================================================
# 🔄 Jobs
# ============================================================
jobs:
  sonarqube:
    name: "SonarQube Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Will not run if skip ci is in commit message
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}

    steps:
      # -------------------------------------------------------
      # 📋 Setup
      # -------------------------------------------------------
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v4
        with:
          # Disabling shallow clone for better relevancy of analysis
          fetch-depth: 0

      - name: "🔧 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: "🔧 Setup Bun Runtime"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: "📦 Install Dependencies"
        run: bun install

      # -------------------------------------------------------
      # 🧪 Test & Coverage
      # -------------------------------------------------------
      - name: "🧪 Verify Test Coverage"
        run: |
          echo "::group::Test Coverage Verification"
          echo "Ensuring all tests are running properly before SonarQube analysis"
          bun test:coverage
          echo "::endgroup::"

      - name: "✅ Run Tests with Coverage"
        run: |
          echo "::group::Test Execution"
          bun test -- --coverage --reporter=junit
          echo "::endgroup::"
        env:
          BUN_RUNTIME_SAFETY: true
          CI: true

      - name: "📊 Generate Enhanced Coverage Report"
        run: |
          echo "::group::Coverage Report Validation"
          echo "Verifying LCOV report exists and is valid"
          ls -la coverage/
          cat coverage/lcov.info | grep -q "SF:" || echo "Error: Invalid LCOV file format"
          echo "Coverage report generated successfully"
          echo "::endgroup::"

      # -------------------------------------------------------
      # 🔍 SonarQube Analysis
      # -------------------------------------------------------
      - name: "🔧 Setup SonarQube"
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.testExecutionReportPaths=test-results/junit.xml
            -Dsonar.coverage.minimum=100
            -Dsonar.verbose=true

      - name: "🚦 SonarQube Quality Gate Check"
        id: sonarqube-quality-gate-check
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # -------------------------------------------------------
      # 📊 Results & Artifacts
      # -------------------------------------------------------
      - name: "📊 Upload Coverage Reports"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

      - name: "📝 Quality Gate Status Summary"
        if: always()
        run: |
          echo "::group::Quality Gate Summary"
          if [ "${{ steps.sonarqube-quality-gate-check.outcome }}" == "success" ]; then
            echo "✅ Quality Gate Passed"
            echo "Quality Gate Status: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Quality Gate Failed - Please check the SonarQube dashboard for details"
            echo "Common issues to check:"
            echo "  - Code coverage below 100%"
            echo "  - Code duplication"
            echo "  - Security hotspots"

            echo "Quality Gate Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "## Common reasons for failure:" >> $GITHUB_STEP_SUMMARY
            echo "- **Code Coverage:** Ensure 100% test coverage" >> $GITHUB_STEP_SUMMARY
            echo "- **Code Duplication:** Refactor duplicated code" >> $GITHUB_STEP_SUMMARY
            echo "- **Security Hotspots:** Address security issues" >> $GITHUB_STEP_SUMMARY
          fi
          echo "::endgroup::"
