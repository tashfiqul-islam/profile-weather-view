name: "🛠️ Sync README Tech Stack"

# ============================================================
# 🚀 Triggers
# ============================================================
on:
  push:
    branches: [ master ]
    paths:
      - 'package.json'
      - 'bun.lock'
  workflow_dispatch:

# ============================================================
# 🔁 Concurrency (single run per ref)
# ============================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

# ============================================================
# 🔒 Permissions (least privilege)
# ============================================================
permissions:
  contents: write

# ============================================================
# 📌 Job: Sync README
# ============================================================
jobs:
  sync:
    name: "🔄 Sync Versions & Footer"
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: |
      !contains(github.event.head_commit.message, '[skip actions]')
    env:
      CACHE_KEY_PREFIX: v4-sync-readme
      TIMEZONE: Asia/Dhaka
    steps:
      - name: "⬇️ Checkout Repository"
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: "🏗️ Setup Bun"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: "📦 Restore Dependencies Cache"
        id: cache-deps
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
            bun.lock
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-bun-${{ hashFiles('package.json', 'bun.lock') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-bun-

      - name: "🔄 Install Dependencies"
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          echo "::group::Bun Installation"
          bun --version
          bun install --frozen-lockfile
          echo "::endgroup::"

      - name: "⚡ Install Dependencies (Fast Path)"
        if: steps.cache-deps.outputs.cache-hit == 'true'
        run: |
          echo "::notice::Using cached dependencies"
          bun install --frozen-lockfile --no-summary

      - name: "🧩 Sync README tech stack badges & footer"
        run: |
          echo "::group::Sync README"
          bun run sync-readme-tech-stack
          echo "::endgroup::"

      - name: "🔎 Validate GPG secret format"
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          if [ -z "${GPG_PRIVATE_KEY}" ]; then
            echo "::error::Missing secret GPG_PRIVATE_KEY"; exit 1; fi
          if ! grep -q "BEGIN PGP PRIVATE KEY BLOCK" <<< "${GPG_PRIVATE_KEY}"; then
            echo "::error::GPG_PRIVATE_KEY is not ASCII-armored. Re-export with 'gpg --export-secret-keys --armor KEY_ID' and paste full block including BEGIN/END lines."; exit 1; fi
          if ! grep -q "END PGP PRIVATE KEY BLOCK" <<< "${GPG_PRIVATE_KEY}"; then
            echo "::error::GPG_PRIVATE_KEY footer missing. Ensure END line is present."; exit 1; fi

      - name: "🔐 Setup GPG for Commit Signing"
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v6.3.0
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          git_push_gpgsign: if-asked
        env:
          GPG_TTY: /dev/console

      - name: "👤 Configure Git Identity"
        run: |
          git config --global user.name "${{ secrets.GIT_COMMITTER_NAME || github.repository_owner }}"
          git config --global user.email "${{ secrets.GIT_COMMITTER_EMAIL }}"

      - name: "💾 Commit Changes"
        id: commit
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git add README.md
            if git commit -S --no-verify -m "docs(readme): sync tech stack badges and footer date [skip actions]"; then
              echo "did_commit=true" >> "$GITHUB_OUTPUT"
            else
              echo "did_commit=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "did_commit=false" >> "$GITHUB_OUTPUT"
          fi

      - name: "⬆️ Push"
        if: steps.commit.outputs.did_commit == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} HEAD:${{ github.ref_name }}

      - name: "💾 Save Dependencies Cache"
        if: always() && steps.cache-deps.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
            bun.lock
          key: ${{ steps.cache-deps.outputs.cache-primary-key }}


