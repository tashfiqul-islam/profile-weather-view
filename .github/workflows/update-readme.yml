###########################################################################
# Profile README Weather Update Workflow
#
# Purpose: Automatically updates GitHub profile README with current weather data
# Workflow: Fetches data from OpenWeather API and updates special profile repository
# Execution: Runs on schedule and manual triggers with configurable parameters
###########################################################################

name: Profile README Weather Update

# Trigger mechanisms for workflow execution
on:
  schedule:
    # Runs at 17 minutes past every 6th hour (avoiding peak traffic times)
    - cron: '17 */6 * * *'

  # Manual trigger with customizable parameters
  workflow_dispatch:
    inputs:
      location:
        description: 'Weather location to display'
        required: false
        default: 'Dhaka'
        type: string
      force_update:
        description: 'Force README update even if weather unchanged'
        required: false
        default: false
        type: boolean
      debug:
        description: 'Enable verbose debug logging'
        required: false
        default: false
        type: boolean

# Workflow environment variables
env:
  WORKFLOW_VERSION: '2.5.0'
  LAST_UPDATED: '2025-03-08'
  BUN_VERSION: 'latest'
  WEATHER_LOCATION: ${{ github.event.inputs.location || 'Dhaka' }}
  FORCE_UPDATE: ${{ github.event.inputs.force_update == 'true' }}
  DEBUG_MODE: ${{ github.event.inputs.debug == 'true' }}
  TIMEZONE: 'Asia/Dhaka'

# Prevent concurrent workflow executions
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Minimal required permissions for security
permissions:
  contents: write         # For README updates
  id-token: write         # For OIDC authentication
  security-events: write  # For security scanning

jobs:
  # =============================================================================
  # PREFLIGHT CHECKS - Verify environment before main execution
  # =============================================================================
  preflight:
    name: Preflight Checks
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      api_status: ${{ steps.api-health.outputs.status }}

    steps:
      - name: "Check Runner Environment"
        run: |
          echo "Verifying execution environment..."
          echo "OS: $(uname -a)"
          echo "Node: $(node --version)"
          echo "NPM: $(npm --version)"
          echo "Workflow Version: ${{ env.WORKFLOW_VERSION }}"
          echo "Last Updated: ${{ env.LAST_UPDATED }}"

      - name: "Verify Secrets"
        id: secrets-check
        run: |
          echo "Verifying required secrets..."
          if [[ -z "${{ secrets.OPEN_WEATHER_KEY }}" ]]; then
            echo "::error::Missing required secret: OPEN_WEATHER_KEY"
            exit 1
          fi
          echo "All required secrets are configured properly"

      - name: "API Health Check"
        id: api-health
        run: |
          echo "Checking OpenWeather API status..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            "https://api.openweathermap.org/data/2.5/weather?q=London&appid=${{ secrets.OPEN_WEATHER_KEY }}")
          
          if [[ $HTTP_STATUS -eq 200 ]]; then
            echo "OpenWeather API is operational (HTTP 200)"
            echo "status=operational" >> $GITHUB_OUTPUT
          elif [[ $HTTP_STATUS -eq 429 ]]; then
            echo "OpenWeather API rate limiting detected (HTTP 429)"
            echo "status=rate_limited" >> $GITHUB_OUTPUT
          elif [[ $HTTP_STATUS -ge 500 ]]; then
            echo "OpenWeather API service degradation detected (HTTP $HTTP_STATUS)"
            echo "status=degraded" >> $GITHUB_OUTPUT
          else
            echo "OpenWeather API returned unexpected status code: $HTTP_STATUS"
            echo "status=unknown" >> $GITHUB_OUTPUT
          fi
        env:
          OPEN_WEATHER_KEY: ${{ secrets.OPEN_WEATHER_KEY }}

  # =============================================================================
  # MAIN WORKFLOW - Update profile README with weather data
  # =============================================================================
  update-weather:
    name: Update Profile README Weather
    needs: preflight
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      # -------------------------------------------------------------------------
      # REPOSITORY SETUP - Clone necessary repositories
      # -------------------------------------------------------------------------
      - name: "Checkout Weather Script Repository"
        uses: actions/checkout@v4
        with:
          path: profile-weather-view
          fetch-depth: 1

      - name: "Checkout Personal Profile Repository"
        uses: actions/checkout@v4
        with:
          repository: tashfiqul-islam/tashfiqul-islam
          path: tashfiqul-islam
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      # -------------------------------------------------------------------------
      # ENVIRONMENT SETUP - Configure runtime and tools
      # -------------------------------------------------------------------------
      - name: "Install Bun Runtime"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: "Configure Runtime Environment"
        run: |
          # Set timestamps for tracking and reporting
          echo "EXECUTION_TIMESTAMP=$(date +'%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_ENV
          echo "START_TIME=$(date +%s)" >> $GITHUB_ENV
          
          # Configure environment for execution
          if [[ "${{ env.DEBUG_MODE }}" == "true" ]]; then
            echo "::notice::Debug mode enabled - verbose output will be shown"
            set -x
          fi
          
          echo "Runtime environment configured successfully"

      # -------------------------------------------------------------------------
      # DEPENDENCY MANAGEMENT - Install required packages
      # -------------------------------------------------------------------------
      - name: "Optimize Dependencies Cache"
        uses: actions/cache@v4
        id: deps-cache
        with:
          path: profile-weather-view/node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('profile-weather-view/bun.lockb') }}-${{ env.WORKFLOW_VERSION }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ hashFiles('profile-weather-view/bun.lockb') }}-
            ${{ runner.os }}-deps-

      - name: "Install Required Packages"
        run: |
          cd profile-weather-view
          echo "Installing dependencies with Bun..."
          bun install
          echo "Dependencies installed successfully"

      # -------------------------------------------------------------------------
      # DATA ACQUISITION - Fetch weather data with retry logic
      # -------------------------------------------------------------------------
      - name: "Fetch Current Weather Data"
        id: weather-fetch
        run: |
          echo "Fetching weather data for ${{ env.WEATHER_LOCATION }}..."
          cd profile-weather-view
          
          # Configure environment for weather fetching
          cat > .env << EOF
          OPEN_WEATHER_KEY=${{ secrets.OPEN_WEATHER_KEY }}
          EOF
          
          # Execute with retry strategy
          MAX_RETRIES=3
          RETRY_COUNT=0
          SUCCESS=false
          BACKOFF_TIME=5
          
          # Retry with exponential backoff
          while [[ $RETRY_COUNT -lt $MAX_RETRIES && $SUCCESS == false ]]; do
            if bun run src/index.ts > /tmp/weather-output.txt 2>/tmp/weather-error.log; then
              SUCCESS=true
              echo "Weather data fetched successfully"
          
              # Extract the weather data from the output
              WEATHER_DATA=$(cat /tmp/weather-output.txt | grep -v '\[.*\]' | tail -n 1)
              echo "weather_data=$WEATHER_DATA" >> $GITHUB_OUTPUT
          
              # Calculate execution time for metrics
              FETCH_END_TIME=$(date +%s)
              FETCH_DURATION=$((FETCH_END_TIME - START_TIME))
              echo "fetch_duration=${FETCH_DURATION}s" >> $GITHUB_OUTPUT
            else
              RETRY_COUNT=$((RETRY_COUNT+1))
              if [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; then
                echo "Weather fetch attempt $RETRY_COUNT failed, retrying in ${BACKOFF_TIME}s..."
                sleep $BACKOFF_TIME
                BACKOFF_TIME=$((BACKOFF_TIME * 2))  # Exponential backoff
              fi
            fi
          done
          
          # Handle final failure state if all retries failed
          if [[ $SUCCESS == false ]]; then
            echo "Failed to fetch weather data after $MAX_RETRIES attempts"
            echo "Detailed error log:"
            cat /tmp/weather-error.log
            exit 1
          fi
        env:
          OPEN_WEATHER_KEY: ${{ secrets.OPEN_WEATHER_KEY }}
          START_TIME: ${{ env.START_TIME }}

      # -------------------------------------------------------------------------
      # README MANAGEMENT - Update profile with current weather
      # -------------------------------------------------------------------------
      - name: "Update README with Weather Data"
        id: readme-update
        run: |
          echo "Updating README with weather data: ${{ steps.weather-fetch.outputs.weather_data }}"
          README_START_TIME=$(date +%s)
          
          # Create backup for safety and rollback capability
          cp tashfiqul-islam/README.md tashfiqul-islam/README.md.bak
          
          # Calculate original checksum for change detection
          ORIGINAL_SHA=$(sha256sum tashfiqul-islam/README.md | cut -d ' ' -f 1)
          
          # Extract weather data components
          WEATHER_DATA="${{ steps.weather-fetch.outputs.weather_data }}"
          IFS='|' read -r DESCRIPTION TEMPERATURE SUNRISE SUNSET HUMIDITY ICON <<< "$WEATHER_DATA"
          
          # Format current time according to profile requirements
          TIMESTAMP=$(date '+%A, %B %d, %Y at %H:%M:%S UTC+6')
          
          # Create a Node.js update script for reliable processing
          cat > update-readme.js << 'EOF'
          const fs = require('fs');
          
          // Get command line arguments for weather data
          const args = process.argv.slice(2);
          const description = args[0];
          const temperature = args[1];
          const sunrise = args[2];
          const sunset = args[3];
          const humidity = args[4];
          const icon = args[5];
          const timestamp = args[6];
          const readmePath = args[7];
          
          try {
            // Read the README content
            const content = fs.readFileSync(readmePath, 'utf8');
          
            // Create the replacement weather section
            const weatherSection = [
              '<!-- Hourly Weather Update -->',
              `  <td align="center">${description} <img width="15" src="https://openweathermap.org/img/w/${icon}.png" alt="weather-icon"></td>`,
              `  <td align="center">${temperature}°C</td>`,
              `  <td align="center">${sunrise}</td>`,
              `  <td align="center">${sunset}</td>`,
              `  <td align="center">${humidity}%</td>`,
              '  <!-- End of Hourly Weather Update -->',
              '  </tr>',
              '  </table>',
              '  <div align="center">',
              '    <h6>',
              `      <em>Last refresh: ${timestamp}</em>`,
              '    </h6>',
              '  </div>',
              '  <!-- End of Dhaka\'s weather table -->'
            ].join('\n');
          
            // Replace the existing weather section
            const updatedContent = content.replace(
              /<!-- Hourly Weather Update -->[\s\S]*?<!-- End of Dhaka's weather table -->/,
              weatherSection
            );
          
            // Write the updated content back to the README
            fs.writeFileSync(readmePath, updatedContent);
            console.log('README updated successfully');
          } catch (error) {
            console.error('Error updating README:', error);
            process.exit(1);
          }
          EOF
          
          # Execute the dedicated update script
          if ! node update-readme.js "$DESCRIPTION" "$TEMPERATURE" "$SUNRISE" "$SUNSET" "$HUMIDITY" "$ICON" "$TIMESTAMP" "tashfiqul-islam/README.md"; then
            echo "Failed to update README"
            # Restore backup on failure
            cp tashfiqul-islam/README.md.bak tashfiqul-islam/README.md
            exit 1
          fi
          
          # Detect changes with intelligent decision making
          cd tashfiqul-islam
          CURRENT_SHA=$(sha256sum README.md | cut -d ' ' -f 1)
          if [[ "$CURRENT_SHA" != "$ORIGINAL_SHA" || "${{ env.FORCE_UPDATE }}" == "true" ]]; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          
            # Calculate execution time for metrics
            README_END_TIME=$(date +%s)
            README_DURATION=$((README_END_TIME - README_START_TIME))
            echo "update_duration=${README_DURATION}s" >> $GITHUB_OUTPUT
          
            echo "README updated successfully with new weather data"
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
            echo "No changes needed in README - weather data unchanged"
          fi

      # -------------------------------------------------------------------------
      # VERSION CONTROL - Commit and push changes securely
      # -------------------------------------------------------------------------
      - name: "Configure Git for Secure Operations"
        if: steps.readme-update.outputs.changes_detected == 'true'
        run: |
          cd tashfiqul-islam
          
          # Configure Git identity and security
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Enable cryptographic commit signing
          git config commit.gpgsign true
          git config gpg.format ssh
          git config user.signingkey "${{ github.token }}"
          
          echo "Git configured for secure operations"

      - name: "Commit and Push Changes"
        if: steps.readme-update.outputs.changes_detected == 'true'
        id: git-push
        run: |
          cd tashfiqul-islam
          GIT_START_TIME=$(date +%s)
          
          # Format timestamp for commit message
          COMMIT_TIMESTAMP=$(date +'%Y-%m-%d %H:%M:%S')
          
          # Create semantic commit with weather data
          git add README.md
          git commit -S -m "chore(profile): update weather data [${COMMIT_TIMESTAMP}]
          
          Location: ${{ env.WEATHER_LOCATION }}
          Weather: ${{ steps.weather-fetch.outputs.weather_data }}
          Workflow Version: ${{ env.WORKFLOW_VERSION }}
          
          [skip ci]"
          
          # Push with retry logic
          MAX_RETRIES=3
          for i in $(seq 1 $MAX_RETRIES); do
            if git push origin master; then
              echo "Changes pushed successfully"
          
              # Calculate execution time for metrics
              GIT_END_TIME=$(date +%s)
              GIT_DURATION=$((GIT_END_TIME - GIT_START_TIME))
              echo "push_duration=${GIT_DURATION}s" >> $GITHUB_OUTPUT
          
              break
            else
              if [[ $i -eq $MAX_RETRIES ]]; then
                echo "Failed to push changes after $MAX_RETRIES attempts"
                exit 1
              fi
              echo "Push attempt $i failed, retrying in 5s..."
              sleep 5
            fi
          done

      # -------------------------------------------------------------------------
      # REPORTING - Generate workflow summary
      # -------------------------------------------------------------------------
      - name: "Generate Execution Summary"
        if: always()
        run: |
          # Calculate total execution time
          END_TIME=$(date +%s)
          TOTAL_DURATION=$((END_TIME - START_TIME))
          
          # Parse the weather data into readable format
          WEATHER_DATA="${{ steps.weather-fetch.outputs.weather_data }}"
          
          if [[ -n "$WEATHER_DATA" ]]; then
            IFS='|' read -r DESCRIPTION TEMPERATURE SUNRISE SUNSET HUMIDITY ICON <<< "$WEATHER_DATA"
            WEATHER_SUMMARY="$DESCRIPTION, ${TEMPERATURE}°C, ${HUMIDITY}% humidity"
            SUNRISE_SUNSET="Sunrise: $SUNRISE, Sunset: $SUNSET"
          else
            WEATHER_SUMMARY="Not available"
            SUNRISE_SUNSET="Not available"
          fi
          
          # Generate execution report
          cat << EOF >> $GITHUB_STEP_SUMMARY
          # Profile Weather Update Report
          
          ## Execution Summary
          - **Time**: ${{ env.EXECUTION_TIMESTAMP }}
          - **Duration**: ${TOTAL_DURATION}s total execution time
          - **Location**: ${{ env.WEATHER_LOCATION }}
          - **Weather**: $WEATHER_SUMMARY
          - **Day Cycle**: $SUNRISE_SUNSET
          - **Status**: ${{ job.status }}
          
          ## Performance Metrics
          | Operation | Duration |
          |-----------|----------|
          | Weather Fetch | ${{ steps.weather-fetch.outputs.fetch_duration || 'N/A' }} |
          | README Update | ${{ steps.readme-update.outputs.update_duration || 'N/A' }} |
          | Git Operations | ${{ steps.git-push.outputs.push_duration || 'N/A' }} |
          
          ## Update Status
          ${{ steps.readme-update.outputs.changes_detected == 'true' && 'README successfully updated with new weather data' || 'No changes were made to README' }}
          
          ## Next Update
          The next scheduled update will run at approximately $(date -d '+6 hours' '+%H:%M:%S %Z').
          
          ---
          *Generated by Profile Weather Update Workflow v${{ env.WORKFLOW_VERSION }}*
          EOF
        env:
          START_TIME: ${{ env.START_TIME }}
