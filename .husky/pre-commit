#!/usr/bin/env bash
# ------------------------------------------------------------------------------
# Commit Message Validation Hook
# Ensures commit messages follow the Conventional Commits specification
# Compatible with Windows (Git Bash/MINGW), macOS, and Linux
# ------------------------------------------------------------------------------

# Safer execution mode with appropriate error handling
set -e

# ------------------------------------------------------------------------------
# Configuration
# ------------------------------------------------------------------------------
COMMIT_MSG_FILE="$1"
COMMIT_SOURCE="$2"
SHA1="$3"
CACHE_DIR=".git/hooks/cache"
MAX_MESSAGE_LENGTH=100

# Pattern matching for commit validation
CONVENTIONAL_PATTERN='^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\([a-z0-9/-]+\))?!?: .+$'
EMERGENCY_PATTERN='^EMERGENCY: .+'
MERGE_PATTERN='^Merge '
REVERT_PATTERN='^Revert '

# ------------------------------------------------------------------------------
# Cross-platform terminal support detection
# ------------------------------------------------------------------------------
init_colors() {
  # Check if NO_COLOR environment variable exists (industry standard)
  if [ -n "$NO_COLOR" ] || [ -n "$TERM" ] && [ "$TERM" = "dumb" ]; then
    SUPPORTS_COLOR=0
  elif [ -t 1 ] && command -v tput >/dev/null 2>&1; then
    SUPPORTS_COLOR=1

    # Define colors using tput for portability
    BOLD=$(tput bold 2>/dev/null || echo '')
    GREEN=$(tput setaf 2 2>/dev/null || echo '')
    YELLOW=$(tput setaf 3 2>/dev/null || echo '')
    BLUE=$(tput setaf 4 2>/dev/null || echo '')
    RED=$(tput setaf 1 2>/dev/null || echo '')
    CYAN=$(tput setaf 6 2>/dev/null || echo '')
    RESET=$(tput sgr0 2>/dev/null || echo '')
  else
    SUPPORTS_COLOR=0
  fi

  # If no color support, empty all color variables
  if [ "$SUPPORTS_COLOR" -eq 0 ]; then
    BOLD="" GREEN="" YELLOW="" BLUE="" RED="" CYAN="" RESET=""
  fi
}

# ------------------------------------------------------------------------------
# Logging functions
# ------------------------------------------------------------------------------
log() {
  local level=$1
  local message=$2
  local timestamp=$(date +"%H:%M:%S")

  case $level in
    "INFO")  echo -e "${timestamp} ${BLUE}${BOLD}ℹ️${RESET} ${BLUE}${message}${RESET}" ;;
    "WARN")  echo -e "${timestamp} ${YELLOW}${BOLD}⚠️${RESET} ${YELLOW}${message}${RESET}" ;;
    "ERROR") echo -e "${timestamp} ${RED}${BOLD}❌${RESET} ${RED}${message}${RESET}" ;;
    "SUCCESS") echo -e "${timestamp} ${GREEN}${BOLD}✅${RESET} ${GREEN}${message}${RESET}" ;;
    *) echo -e "${timestamp} ${message}" ;;
  esac
}

# Display message in a box for better readability
box_message() {
  local message=$1
  echo "╭───────────────────────────────────────────"
  echo "│ ${YELLOW}${message}${RESET}"
  echo "╰───────────────────────────────────────────"
}

# Show helpful examples when commit validation fails
show_examples() {
  cat << EOF

${CYAN}${BOLD}Examples of valid commit messages:${RESET}
  ${GREEN}feat: add weather forecast feature${RESET}
  ${GREEN}fix(api): handle network timeouts gracefully${RESET}
  ${GREEN}docs: update installation instructions${RESET}
  ${GREEN}refactor(core): simplify weather data processing${RESET}
  ${GREEN}test: add unit tests for API response handling${RESET}

${CYAN}${BOLD}Structure:${RESET} ${YELLOW}type(scope): description${RESET}

${CYAN}${BOLD}Available types:${RESET}
  ${YELLOW}feat${RESET}     - A new feature
  ${YELLOW}fix${RESET}      - A bug fix
  ${YELLOW}docs${RESET}     - Documentation changes
  ${YELLOW}style${RESET}    - Code style changes (formatting, etc.)
  ${YELLOW}refactor${RESET} - Code changes that neither fix bugs nor add features
  ${YELLOW}perf${RESET}     - Performance improvements
  ${YELLOW}test${RESET}     - Adding or modifying tests
  ${YELLOW}build${RESET}    - Changes to build system or dependencies
  ${YELLOW}ci${RESET}       - Changes to CI configuration
  ${YELLOW}chore${RESET}    - Other changes that don't modify src or test files

${CYAN}${BOLD}Emergency bypass:${RESET}
  ${YELLOW}EMERGENCY: your critical fix message${RESET}
EOF
}

# ------------------------------------------------------------------------------
# Main validation logic
# ------------------------------------------------------------------------------
validate_commit_message() {
  # Create cache directory for persistent data
  mkdir -p "$CACHE_DIR" 2>/dev/null || true

  # Skip validation for git commit --amend
  if [ "$COMMIT_SOURCE" = "message" ]; then
    exit 0
  fi

  # Read commit message safely across platforms
  if [ -f "$COMMIT_MSG_FILE" ]; then
    # Windows-compatible approach to read the file
    COMMIT_MSG=$(sed -e '/^#/d' < "$COMMIT_MSG_FILE" | tr -d '\r' | tr '\n' ' ' | xargs)
  else
    log "ERROR" "Cannot find commit message file: $COMMIT_MSG_FILE"
    exit 1
  fi

  # Skip empty commits
  if [ -z "$COMMIT_MSG" ]; then
    log "ERROR" "Empty commit message not allowed"
    exit 1
  fi

  # Skip validation for system-generated commits
  if [[ "$COMMIT_MSG" =~ $MERGE_PATTERN ]] || [[ "$COMMIT_MSG" =~ $REVERT_PATTERN ]]; then
    log "INFO" "System commit detected. Skipping validation."
    exit 0
  fi

  # Allow emergency commits to bypass validation
  if [[ "$COMMIT_MSG" =~ $EMERGENCY_PATTERN ]]; then
    log "WARN" "Emergency commit detected. Bypassing validation."
    exit 0
  fi

  # Begin validation
  echo
  log "INFO" "${BOLD}📝 Validating commit message format...${RESET}"
  echo "${BLUE}Commit message (${BOLD}${#COMMIT_MSG}${RESET}${BLUE} chars):${RESET}"
  box_message "$COMMIT_MSG"
  echo "${BLUE}Running commit message validation...${RESET}"

  # Validate against conventional commits pattern
  if [[ "$COMMIT_MSG" =~ $CONVENTIONAL_PATTERN ]]; then
    log "SUCCESS" "${BOLD}Commit message format is valid!${RESET}"

    # Length validation with a friendly warning
    if [ ${#COMMIT_MSG} -gt $MAX_MESSAGE_LENGTH ]; then
      log "WARN" "Commit message is longer than the recommended maximum of $MAX_MESSAGE_LENGTH characters"
    fi

    exit 0
  else
    log "ERROR" "${BOLD}Commit message does not follow the Conventional Commits specification${RESET}"
    show_examples
    exit 1
  fi
}

# Initialize color support
init_colors

# Run validation
validate_commit_message
